{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "range": [
            9,
            20
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          28,
          49
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 49
          }
        }
      },
      "range": [
        0,
        50
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isArray",
            "range": [
              60,
              67
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 16
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isArray",
            "range": [
              60,
              67
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 16
              }
            }
          },
          "range": [
            60,
            67
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 16
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isArray",
        "raw": "'../util/isArray'",
        "range": [
          75,
          92
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 24
          },
          "end": {
            "line": 2,
            "column": 41
          }
        }
      },
      "range": [
        51,
        93
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 42
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              103,
              118
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              103,
              118
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "range": [
            103,
            118
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./ArrayObservable",
        "raw": "'./ArrayObservable'",
        "range": [
          126,
          145
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 32
          },
          "end": {
            "line": 3,
            "column": 51
          }
        }
      },
      "range": [
        94,
        146
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 52
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              156,
              177
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 30
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              156,
              177
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 30
              }
            }
          },
          "range": [
            156,
            177
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 9
            },
            "end": {
              "line": 4,
              "column": 30
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operator/combineLatest",
        "raw": "'../operator/combineLatest'",
        "range": [
          185,
          212
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 38
          },
          "end": {
            "line": 4,
            "column": 65
          }
        }
      },
      "range": [
        147,
        213
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 66
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            214,
            249
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n ",
          "range": [
            250,
            2339
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "combineLatest",
          "range": [
            2356,
            2369
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 16
            },
            "end": {
              "line": 49,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                2373,
                2384
              ],
              "loc": {
                "start": {
                  "line": 49,
                  "column": 33
                },
                "end": {
                  "line": 49,
                  "column": 44
                }
              }
            },
            "range": [
              2370,
              2384
            ],
            "loc": {
              "start": {
                "line": 49,
                "column": 30
              },
              "end": {
                "line": 49,
                "column": 44
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "project",
                    "range": [
                      2396,
                      2403
                    ],
                    "loc": {
                      "start": {
                        "line": 50,
                        "column": 8
                      },
                      "end": {
                        "line": 50,
                        "column": 15
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      2406,
                      2410
                    ],
                    "loc": {
                      "start": {
                        "line": 50,
                        "column": 18
                      },
                      "end": {
                        "line": 50,
                        "column": 22
                      }
                    }
                  },
                  "range": [
                    2396,
                    2410
                  ],
                  "loc": {
                    "start": {
                      "line": 50,
                      "column": 8
                    },
                    "end": {
                      "line": 50,
                      "column": 22
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                2392,
                2411
              ],
              "loc": {
                "start": {
                  "line": 50,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 23
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      2420,
                      2429
                    ],
                    "loc": {
                      "start": {
                        "line": 51,
                        "column": 8
                      },
                      "end": {
                        "line": 51,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      2432,
                      2436
                    ],
                    "loc": {
                      "start": {
                        "line": 51,
                        "column": 20
                      },
                      "end": {
                        "line": 51,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    2420,
                    2436
                  ],
                  "loc": {
                    "start": {
                      "line": 51,
                      "column": 8
                    },
                    "end": {
                      "line": 51,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                2416,
                2437
              ],
              "loc": {
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 51,
                  "column": 25
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    2446,
                    2457
                  ],
                  "loc": {
                    "start": {
                      "line": 52,
                      "column": 8
                    },
                    "end": {
                      "line": 52,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        2458,
                        2469
                      ],
                      "loc": {
                        "start": {
                          "line": 52,
                          "column": 20
                        },
                        "end": {
                          "line": 52,
                          "column": 31
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            2470,
                            2481
                          ],
                          "loc": {
                            "start": {
                              "line": 52,
                              "column": 32
                            },
                            "end": {
                              "line": 52,
                              "column": 43
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            2482,
                            2488
                          ],
                          "loc": {
                            "start": {
                              "line": 52,
                              "column": 44
                            },
                            "end": {
                              "line": 52,
                              "column": 50
                            }
                          }
                        },
                        "range": [
                          2470,
                          2488
                        ],
                        "loc": {
                          "start": {
                            "line": 52,
                            "column": 32
                          },
                          "end": {
                            "line": 52,
                            "column": 50
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          2491,
                          2492
                        ],
                        "loc": {
                          "start": {
                            "line": 52,
                            "column": 53
                          },
                          "end": {
                            "line": 52,
                            "column": 54
                          }
                        }
                      },
                      "range": [
                        2470,
                        2492
                      ],
                      "loc": {
                        "start": {
                          "line": 52,
                          "column": 32
                        },
                        "end": {
                          "line": 52,
                          "column": 54
                        }
                      }
                    },
                    "range": [
                      2458,
                      2493
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 20
                      },
                      "end": {
                        "line": 52,
                        "column": 55
                      }
                    }
                  }
                ],
                "range": [
                  2446,
                  2494
                ],
                "loc": {
                  "start": {
                    "line": 52,
                    "column": 8
                  },
                  "end": {
                    "line": 52,
                    "column": 56
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          2506,
                          2515
                        ],
                        "loc": {
                          "start": {
                            "line": 53,
                            "column": 8
                          },
                          "end": {
                            "line": 53,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              2518,
                              2529
                            ],
                            "loc": {
                              "start": {
                                "line": 53,
                                "column": 20
                              },
                              "end": {
                                "line": 53,
                                "column": 31
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              2530,
                              2533
                            ],
                            "loc": {
                              "start": {
                                "line": 53,
                                "column": 32
                              },
                              "end": {
                                "line": 53,
                                "column": 35
                              }
                            }
                          },
                          "range": [
                            2518,
                            2533
                          ],
                          "loc": {
                            "start": {
                              "line": 53,
                              "column": 20
                            },
                            "end": {
                              "line": 53,
                              "column": 35
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          2518,
                          2535
                        ],
                        "loc": {
                          "start": {
                            "line": 53,
                            "column": 20
                          },
                          "end": {
                            "line": 53,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        2506,
                        2535
                      ],
                      "loc": {
                        "start": {
                          "line": 53,
                          "column": 8
                        },
                        "end": {
                          "line": 53,
                          "column": 37
                        }
                      }
                    },
                    "range": [
                      2506,
                      2536
                    ],
                    "loc": {
                      "start": {
                        "line": 53,
                        "column": 8
                      },
                      "end": {
                        "line": 53,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  2496,
                  2542
                ],
                "loc": {
                  "start": {
                    "line": 52,
                    "column": 58
                  },
                  "end": {
                    "line": 54,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                2442,
                2542
              ],
              "loc": {
                "start": {
                  "line": 52,
                  "column": 4
                },
                "end": {
                  "line": 54,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        2558,
                        2569
                      ],
                      "loc": {
                        "start": {
                          "line": 55,
                          "column": 15
                        },
                        "end": {
                          "line": 55,
                          "column": 26
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            2570,
                            2581
                          ],
                          "loc": {
                            "start": {
                              "line": 55,
                              "column": 27
                            },
                            "end": {
                              "line": 55,
                              "column": 38
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            2582,
                            2588
                          ],
                          "loc": {
                            "start": {
                              "line": 55,
                              "column": 39
                            },
                            "end": {
                              "line": 55,
                              "column": 45
                            }
                          }
                        },
                        "range": [
                          2570,
                          2588
                        ],
                        "loc": {
                          "start": {
                            "line": 55,
                            "column": 27
                          },
                          "end": {
                            "line": 55,
                            "column": 45
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          2591,
                          2592
                        ],
                        "loc": {
                          "start": {
                            "line": 55,
                            "column": 48
                          },
                          "end": {
                            "line": 55,
                            "column": 49
                          }
                        }
                      },
                      "range": [
                        2570,
                        2592
                      ],
                      "loc": {
                        "start": {
                          "line": 55,
                          "column": 27
                        },
                        "end": {
                          "line": 55,
                          "column": 49
                        }
                      }
                    },
                    "range": [
                      2558,
                      2593
                    ],
                    "loc": {
                      "start": {
                        "line": 55,
                        "column": 15
                      },
                      "end": {
                        "line": 55,
                        "column": 50
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    2551,
                    2593
                  ],
                  "loc": {
                    "start": {
                      "line": 55,
                      "column": 8
                    },
                    "end": {
                      "line": 55,
                      "column": 50
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "function",
                  "raw": "'function'",
                  "range": [
                    2598,
                    2608
                  ],
                  "loc": {
                    "start": {
                      "line": 55,
                      "column": 55
                    },
                    "end": {
                      "line": 55,
                      "column": 65
                    }
                  }
                },
                "range": [
                  2551,
                  2608
                ],
                "loc": {
                  "start": {
                    "line": 55,
                    "column": 8
                  },
                  "end": {
                    "line": 55,
                    "column": 65
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          2620,
                          2627
                        ],
                        "loc": {
                          "start": {
                            "line": 56,
                            "column": 8
                          },
                          "end": {
                            "line": 56,
                            "column": 15
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              2630,
                              2641
                            ],
                            "loc": {
                              "start": {
                                "line": 56,
                                "column": 18
                              },
                              "end": {
                                "line": 56,
                                "column": 29
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              2642,
                              2645
                            ],
                            "loc": {
                              "start": {
                                "line": 56,
                                "column": 30
                              },
                              "end": {
                                "line": 56,
                                "column": 33
                              }
                            }
                          },
                          "range": [
                            2630,
                            2645
                          ],
                          "loc": {
                            "start": {
                              "line": 56,
                              "column": 18
                            },
                            "end": {
                              "line": 56,
                              "column": 33
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          2630,
                          2647
                        ],
                        "loc": {
                          "start": {
                            "line": 56,
                            "column": 18
                          },
                          "end": {
                            "line": 56,
                            "column": 35
                          }
                        }
                      },
                      "range": [
                        2620,
                        2647
                      ],
                      "loc": {
                        "start": {
                          "line": 56,
                          "column": 8
                        },
                        "end": {
                          "line": 56,
                          "column": 35
                        }
                      }
                    },
                    "range": [
                      2620,
                      2648
                    ],
                    "loc": {
                      "start": {
                        "line": 56,
                        "column": 8
                      },
                      "end": {
                        "line": 56,
                        "column": 36
                      }
                    }
                  }
                ],
                "range": [
                  2610,
                  2654
                ],
                "loc": {
                  "start": {
                    "line": 55,
                    "column": 67
                  },
                  "end": {
                    "line": 57,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                2547,
                2654
              ],
              "loc": {
                "start": {
                  "line": 55,
                  "column": 4
                },
                "end": {
                  "line": 57,
                  "column": 5
                }
              },
              "trailingComments": [
                {
                  "type": "Line",
                  "value": " if the first and only other argument besides the resultSelector is an array",
                  "range": [
                    2659,
                    2737
                  ],
                  "loc": {
                    "start": {
                      "line": 58,
                      "column": 4
                    },
                    "end": {
                      "line": 58,
                      "column": 82
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " assume it's been called with `combineLatest([obs1, obs2, obs3], project)`",
                  "range": [
                    2742,
                    2818
                  ],
                  "loc": {
                    "start": {
                      "line": 59,
                      "column": 4
                    },
                    "end": {
                      "line": 59,
                      "column": 80
                    }
                  }
                }
              ]
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        2827,
                        2838
                      ],
                      "loc": {
                        "start": {
                          "line": 60,
                          "column": 8
                        },
                        "end": {
                          "line": 60,
                          "column": 19
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length",
                      "range": [
                        2839,
                        2845
                      ],
                      "loc": {
                        "start": {
                          "line": 60,
                          "column": 20
                        },
                        "end": {
                          "line": 60,
                          "column": 26
                        }
                      }
                    },
                    "range": [
                      2827,
                      2845
                    ],
                    "loc": {
                      "start": {
                        "line": 60,
                        "column": 8
                      },
                      "end": {
                        "line": 60,
                        "column": 26
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "range": [
                      2850,
                      2851
                    ],
                    "loc": {
                      "start": {
                        "line": 60,
                        "column": 31
                      },
                      "end": {
                        "line": 60,
                        "column": 32
                      }
                    }
                  },
                  "range": [
                    2827,
                    2851
                  ],
                  "loc": {
                    "start": {
                      "line": 60,
                      "column": 8
                    },
                    "end": {
                      "line": 60,
                      "column": 32
                    }
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArray",
                    "range": [
                      2855,
                      2862
                    ],
                    "loc": {
                      "start": {
                        "line": 60,
                        "column": 36
                      },
                      "end": {
                        "line": 60,
                        "column": 43
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          2863,
                          2874
                        ],
                        "loc": {
                          "start": {
                            "line": 60,
                            "column": 44
                          },
                          "end": {
                            "line": 60,
                            "column": 55
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          2875,
                          2876
                        ],
                        "loc": {
                          "start": {
                            "line": 60,
                            "column": 56
                          },
                          "end": {
                            "line": 60,
                            "column": 57
                          }
                        }
                      },
                      "range": [
                        2863,
                        2877
                      ],
                      "loc": {
                        "start": {
                          "line": 60,
                          "column": 44
                        },
                        "end": {
                          "line": 60,
                          "column": 58
                        }
                      }
                    }
                  ],
                  "range": [
                    2855,
                    2878
                  ],
                  "loc": {
                    "start": {
                      "line": 60,
                      "column": 36
                    },
                    "end": {
                      "line": 60,
                      "column": 59
                    }
                  }
                },
                "range": [
                  2827,
                  2878
                ],
                "loc": {
                  "start": {
                    "line": 60,
                    "column": 8
                  },
                  "end": {
                    "line": 60,
                    "column": 59
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          2890,
                          2901
                        ],
                        "loc": {
                          "start": {
                            "line": 61,
                            "column": 8
                          },
                          "end": {
                            "line": 61,
                            "column": 19
                          }
                        }
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            2904,
                            2915
                          ],
                          "loc": {
                            "start": {
                              "line": 61,
                              "column": 22
                            },
                            "end": {
                              "line": 61,
                              "column": 33
                            }
                          }
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "range": [
                            2916,
                            2917
                          ],
                          "loc": {
                            "start": {
                              "line": 61,
                              "column": 34
                            },
                            "end": {
                              "line": 61,
                              "column": 35
                            }
                          }
                        },
                        "range": [
                          2904,
                          2918
                        ],
                        "loc": {
                          "start": {
                            "line": 61,
                            "column": 22
                          },
                          "end": {
                            "line": 61,
                            "column": 36
                          }
                        }
                      },
                      "range": [
                        2890,
                        2918
                      ],
                      "loc": {
                        "start": {
                          "line": 61,
                          "column": 8
                        },
                        "end": {
                          "line": 61,
                          "column": 36
                        }
                      }
                    },
                    "range": [
                      2890,
                      2919
                    ],
                    "loc": {
                      "start": {
                        "line": 61,
                        "column": 8
                      },
                      "end": {
                        "line": 61,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  2880,
                  2925
                ],
                "loc": {
                  "start": {
                    "line": 60,
                    "column": 61
                  },
                  "end": {
                    "line": 62,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                2823,
                2925
              ],
              "loc": {
                "start": {
                  "line": 60,
                  "column": 4
                },
                "end": {
                  "line": 62,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Line",
                  "value": " if the first and only other argument besides the resultSelector is an array",
                  "range": [
                    2659,
                    2737
                  ],
                  "loc": {
                    "start": {
                      "line": 58,
                      "column": 4
                    },
                    "end": {
                      "line": 58,
                      "column": 82
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " assume it's been called with `combineLatest([obs1, obs2, obs3], project)`",
                  "range": [
                    2742,
                    2818
                  ],
                  "loc": {
                    "start": {
                      "line": 59,
                      "column": 4
                    },
                    "end": {
                      "line": 59,
                      "column": 80
                    }
                  }
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        2941,
                        2956
                      ],
                      "loc": {
                        "start": {
                          "line": 63,
                          "column": 15
                        },
                        "end": {
                          "line": 63,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          2957,
                          2968
                        ],
                        "loc": {
                          "start": {
                            "line": 63,
                            "column": 31
                          },
                          "end": {
                            "line": 63,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          2970,
                          2979
                        ],
                        "loc": {
                          "start": {
                            "line": 63,
                            "column": 44
                          },
                          "end": {
                            "line": 63,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      2937,
                      2980
                    ],
                    "loc": {
                      "start": {
                        "line": 63,
                        "column": 11
                      },
                      "end": {
                        "line": 63,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      2981,
                      2985
                    ],
                    "loc": {
                      "start": {
                        "line": 63,
                        "column": 55
                      },
                      "end": {
                        "line": 63,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    2937,
                    2985
                  ],
                  "loc": {
                    "start": {
                      "line": 63,
                      "column": 11
                    },
                    "end": {
                      "line": 63,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "CombineLatestOperator",
                      "range": [
                        2990,
                        3011
                      ],
                      "loc": {
                        "start": {
                          "line": 63,
                          "column": 64
                        },
                        "end": {
                          "line": 63,
                          "column": 85
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          3012,
                          3019
                        ],
                        "loc": {
                          "start": {
                            "line": 63,
                            "column": 86
                          },
                          "end": {
                            "line": 63,
                            "column": 93
                          }
                        }
                      }
                    ],
                    "range": [
                      2986,
                      3020
                    ],
                    "loc": {
                      "start": {
                        "line": 63,
                        "column": 60
                      },
                      "end": {
                        "line": 63,
                        "column": 94
                      }
                    }
                  }
                ],
                "range": [
                  2937,
                  3021
                ],
                "loc": {
                  "start": {
                    "line": 63,
                    "column": 11
                  },
                  "end": {
                    "line": 63,
                    "column": 95
                  }
                }
              },
              "range": [
                2930,
                3022
              ],
              "loc": {
                "start": {
                  "line": 63,
                  "column": 4
                },
                "end": {
                  "line": 63,
                  "column": 96
                }
              }
            }
          ],
          "range": [
            2386,
            3024
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 46
            },
            "end": {
              "line": 64,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2347,
          3024
        ],
        "loc": {
          "start": {
            "line": 49,
            "column": 7
          },
          "end": {
            "line": 64,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              214,
              249
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n ",
            "range": [
              250,
              2339
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 48,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=combineLatest.js.map",
            "range": [
              3025,
              3066
            ],
            "loc": {
              "start": {
                "line": 65,
                "column": 0
              },
              "end": {
                "line": 65,
                "column": 41
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2340,
        3024
      ],
      "loc": {
        "start": {
          "line": 49,
          "column": 0
        },
        "end": {
          "line": 64,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            214,
            249
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n ",
          "range": [
            250,
            2339
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=combineLatest.js.map",
          "range": [
            3025,
            3066
          ],
          "loc": {
            "start": {
              "line": 65,
              "column": 0
            },
            "end": {
              "line": 65,
              "column": 41
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    3024
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 64,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        214,
        249
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n ",
      "range": [
        250,
        2339
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 48,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": " if the first and only other argument besides the resultSelector is an array",
      "range": [
        2659,
        2737
      ],
      "loc": {
        "start": {
          "line": 58,
          "column": 4
        },
        "end": {
          "line": 58,
          "column": 82
        }
      }
    },
    {
      "type": "Line",
      "value": " assume it's been called with `combineLatest([obs1, obs2, obs3], project)`",
      "range": [
        2742,
        2818
      ],
      "loc": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 59,
          "column": 80
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=combineLatest.js.map",
      "range": [
        3025,
        3066
      ],
      "loc": {
        "start": {
          "line": 65,
          "column": 0
        },
        "end": {
          "line": 65,
          "column": 41
        }
      }
    }
  ]
}