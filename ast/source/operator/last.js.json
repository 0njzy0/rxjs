{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              17,
              28
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 17
              },
              "end": {
                "line": 1,
                "column": 28
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "last",
            "range": [
              9,
              13
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 13
              }
            }
          },
          "range": [
            9,
            28
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 28
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/last",
        "raw": "'../operators/last'",
        "range": [
          36,
          55
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 36
          },
          "end": {
            "line": 1,
            "column": 55
          }
        }
      },
      "range": [
        0,
        56
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 56
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            57,
            92
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n ",
          "range": [
            93,
            1039
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "last",
          "range": [
            1056,
            1060
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 16
            },
            "end": {
              "line": 20,
              "column": 20
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "predicate",
            "range": [
              1061,
              1070
            ],
            "loc": {
              "start": {
                "line": 20,
                "column": 21
              },
              "end": {
                "line": 20,
                "column": 30
              }
            }
          },
          {
            "type": "Identifier",
            "name": "resultSelector",
            "range": [
              1072,
              1086
            ],
            "loc": {
              "start": {
                "line": 20,
                "column": 32
              },
              "end": {
                "line": 20,
                "column": 46
              }
            }
          },
          {
            "type": "Identifier",
            "name": "defaultValue",
            "range": [
              1088,
              1100
            ],
            "loc": {
              "start": {
                "line": 20,
                "column": 48
              },
              "end": {
                "line": 20,
                "column": 60
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      1115,
                      1126
                    ],
                    "loc": {
                      "start": {
                        "line": 21,
                        "column": 11
                      },
                      "end": {
                        "line": 21,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "predicate",
                      "range": [
                        1127,
                        1136
                      ],
                      "loc": {
                        "start": {
                          "line": 21,
                          "column": 23
                        },
                        "end": {
                          "line": 21,
                          "column": 32
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "resultSelector",
                      "range": [
                        1138,
                        1152
                      ],
                      "loc": {
                        "start": {
                          "line": 21,
                          "column": 34
                        },
                        "end": {
                          "line": 21,
                          "column": 48
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "defaultValue",
                      "range": [
                        1154,
                        1166
                      ],
                      "loc": {
                        "start": {
                          "line": 21,
                          "column": 50
                        },
                        "end": {
                          "line": 21,
                          "column": 62
                        }
                      }
                    }
                  ],
                  "range": [
                    1115,
                    1167
                  ],
                  "loc": {
                    "start": {
                      "line": 21,
                      "column": 11
                    },
                    "end": {
                      "line": 21,
                      "column": 63
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      1168,
                      1172
                    ],
                    "loc": {
                      "start": {
                        "line": 21,
                        "column": 64
                      },
                      "end": {
                        "line": 21,
                        "column": 68
                      }
                    }
                  }
                ],
                "range": [
                  1115,
                  1173
                ],
                "loc": {
                  "start": {
                    "line": 21,
                    "column": 11
                  },
                  "end": {
                    "line": 21,
                    "column": 69
                  }
                }
              },
              "range": [
                1108,
                1174
              ],
              "loc": {
                "start": {
                  "line": 21,
                  "column": 4
                },
                "end": {
                  "line": 21,
                  "column": 70
                }
              }
            }
          ],
          "range": [
            1102,
            1176
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 62
            },
            "end": {
              "line": 22,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1047,
          1176
        ],
        "loc": {
          "start": {
            "line": 20,
            "column": 7
          },
          "end": {
            "line": 22,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              57,
              92
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n ",
            "range": [
              93,
              1039
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 19,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=last.js.map",
            "range": [
              1177,
              1209
            ],
            "loc": {
              "start": {
                "line": 23,
                "column": 0
              },
              "end": {
                "line": 23,
                "column": 32
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1040,
        1176
      ],
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 22,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            57,
            92
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n ",
          "range": [
            93,
            1039
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=last.js.map",
          "range": [
            1177,
            1209
          ],
          "loc": {
            "start": {
              "line": 23,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 32
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1176
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 22,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        57,
        92
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n ",
      "range": [
        93,
        1039
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=last.js.map",
      "range": [
        1177,
        1209
      ],
      "loc": {
        "start": {
          "line": 23,
          "column": 0
        },
        "end": {
          "line": 23,
          "column": 32
        }
      }
    }
  ]
}