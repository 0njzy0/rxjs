{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrderMap",
            "range": [
              16,
              30
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 16
              },
              "end": {
                "line": 1,
                "column": 30
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "map",
            "range": [
              9,
              12
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 12
              }
            }
          },
          "range": [
            9,
            30
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 30
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/map",
        "raw": "'../operators/map'",
        "range": [
          38,
          56
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 38
          },
          "end": {
            "line": 1,
            "column": 56
          }
        }
      },
      "range": [
        0,
        57
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 57
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n ",
          "range": [
            58,
            1521
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "map",
          "range": [
            1538,
            1541
          ],
          "loc": {
            "start": {
              "line": 35,
              "column": 16
            },
            "end": {
              "line": 35,
              "column": 19
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "project",
            "range": [
              1542,
              1549
            ],
            "loc": {
              "start": {
                "line": 35,
                "column": 20
              },
              "end": {
                "line": 35,
                "column": 27
              }
            }
          },
          {
            "type": "Identifier",
            "name": "thisArg",
            "range": [
              1551,
              1558
            ],
            "loc": {
              "start": {
                "line": 35,
                "column": 29
              },
              "end": {
                "line": 35,
                "column": 36
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrderMap",
                    "range": [
                      1573,
                      1587
                    ],
                    "loc": {
                      "start": {
                        "line": 36,
                        "column": 11
                      },
                      "end": {
                        "line": 36,
                        "column": 25
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "project",
                      "range": [
                        1588,
                        1595
                      ],
                      "loc": {
                        "start": {
                          "line": 36,
                          "column": 26
                        },
                        "end": {
                          "line": 36,
                          "column": 33
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "thisArg",
                      "range": [
                        1597,
                        1604
                      ],
                      "loc": {
                        "start": {
                          "line": 36,
                          "column": 35
                        },
                        "end": {
                          "line": 36,
                          "column": 42
                        }
                      }
                    }
                  ],
                  "range": [
                    1573,
                    1605
                  ],
                  "loc": {
                    "start": {
                      "line": 36,
                      "column": 11
                    },
                    "end": {
                      "line": 36,
                      "column": 43
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      1606,
                      1610
                    ],
                    "loc": {
                      "start": {
                        "line": 36,
                        "column": 44
                      },
                      "end": {
                        "line": 36,
                        "column": 48
                      }
                    }
                  }
                ],
                "range": [
                  1573,
                  1611
                ],
                "loc": {
                  "start": {
                    "line": 36,
                    "column": 11
                  },
                  "end": {
                    "line": 36,
                    "column": 49
                  }
                }
              },
              "range": [
                1566,
                1612
              ],
              "loc": {
                "start": {
                  "line": 36,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 50
                }
              }
            }
          ],
          "range": [
            1560,
            1614
          ],
          "loc": {
            "start": {
              "line": 35,
              "column": 38
            },
            "end": {
              "line": 37,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1529,
          1614
        ],
        "loc": {
          "start": {
            "line": 35,
            "column": 7
          },
          "end": {
            "line": 37,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n ",
            "range": [
              58,
              1521
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 34,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=map.js.map",
            "range": [
              1615,
              1646
            ],
            "loc": {
              "start": {
                "line": 38,
                "column": 0
              },
              "end": {
                "line": 38,
                "column": 31
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1522,
        1614
      ],
      "loc": {
        "start": {
          "line": 35,
          "column": 0
        },
        "end": {
          "line": 37,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n ",
          "range": [
            58,
            1521
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=map.js.map",
          "range": [
            1615,
            1646
          ],
          "loc": {
            "start": {
              "line": 38,
              "column": 0
            },
            "end": {
              "line": 38,
              "column": 31
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1614
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 37,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n ",
      "range": [
        58,
        1521
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=map.js.map",
      "range": [
        1615,
        1646
      ],
      "loc": {
        "start": {
          "line": 38,
          "column": 0
        },
        "end": {
          "line": 38,
          "column": 31
        }
      }
    }
  ]
}