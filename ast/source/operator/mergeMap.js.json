{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrderMergeMap",
            "range": [
              21,
              40
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 21
              },
              "end": {
                "line": 1,
                "column": 40
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "mergeMap",
            "range": [
              9,
              17
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 17
              }
            }
          },
          "range": [
            9,
            40
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 40
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/mergeMap",
        "raw": "'../operators/mergeMap'",
        "range": [
          48,
          71
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 48
          },
          "end": {
            "line": 1,
            "column": 71
          }
        }
      },
      "range": [
        0,
        72
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 72
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            73,
            108
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n ",
          "range": [
            109,
            2504
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 60,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "mergeMap",
          "range": [
            2521,
            2529
          ],
          "loc": {
            "start": {
              "line": 61,
              "column": 16
            },
            "end": {
              "line": 61,
              "column": 24
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "project",
            "range": [
              2530,
              2537
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 25
              },
              "end": {
                "line": 61,
                "column": 32
              }
            }
          },
          {
            "type": "Identifier",
            "name": "resultSelector",
            "range": [
              2539,
              2553
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 34
              },
              "end": {
                "line": 61,
                "column": 48
              }
            }
          },
          {
            "type": "AssignmentPattern",
            "left": {
              "type": "Identifier",
              "name": "concurrent",
              "range": [
                2555,
                2565
              ],
              "loc": {
                "start": {
                  "line": 61,
                  "column": 50
                },
                "end": {
                  "line": 61,
                  "column": 60
                }
              }
            },
            "right": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "Number",
                "range": [
                  2568,
                  2574
                ],
                "loc": {
                  "start": {
                    "line": 61,
                    "column": 63
                  },
                  "end": {
                    "line": 61,
                    "column": 69
                  }
                }
              },
              "property": {
                "type": "Identifier",
                "name": "POSITIVE_INFINITY",
                "range": [
                  2575,
                  2592
                ],
                "loc": {
                  "start": {
                    "line": 61,
                    "column": 70
                  },
                  "end": {
                    "line": 61,
                    "column": 87
                  }
                }
              },
              "range": [
                2568,
                2592
              ],
              "loc": {
                "start": {
                  "line": 61,
                  "column": 63
                },
                "end": {
                  "line": 61,
                  "column": 87
                }
              }
            },
            "range": [
              2555,
              2592
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 50
              },
              "end": {
                "line": 61,
                "column": 87
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrderMergeMap",
                    "range": [
                      2607,
                      2626
                    ],
                    "loc": {
                      "start": {
                        "line": 62,
                        "column": 11
                      },
                      "end": {
                        "line": 62,
                        "column": 30
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "project",
                      "range": [
                        2627,
                        2634
                      ],
                      "loc": {
                        "start": {
                          "line": 62,
                          "column": 31
                        },
                        "end": {
                          "line": 62,
                          "column": 38
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "resultSelector",
                      "range": [
                        2636,
                        2650
                      ],
                      "loc": {
                        "start": {
                          "line": 62,
                          "column": 40
                        },
                        "end": {
                          "line": 62,
                          "column": 54
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "concurrent",
                      "range": [
                        2652,
                        2662
                      ],
                      "loc": {
                        "start": {
                          "line": 62,
                          "column": 56
                        },
                        "end": {
                          "line": 62,
                          "column": 66
                        }
                      }
                    }
                  ],
                  "range": [
                    2607,
                    2663
                  ],
                  "loc": {
                    "start": {
                      "line": 62,
                      "column": 11
                    },
                    "end": {
                      "line": 62,
                      "column": 67
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      2664,
                      2668
                    ],
                    "loc": {
                      "start": {
                        "line": 62,
                        "column": 68
                      },
                      "end": {
                        "line": 62,
                        "column": 72
                      }
                    }
                  }
                ],
                "range": [
                  2607,
                  2669
                ],
                "loc": {
                  "start": {
                    "line": 62,
                    "column": 11
                  },
                  "end": {
                    "line": 62,
                    "column": 73
                  }
                }
              },
              "range": [
                2600,
                2670
              ],
              "loc": {
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 62,
                  "column": 74
                }
              }
            }
          ],
          "range": [
            2594,
            2672
          ],
          "loc": {
            "start": {
              "line": 61,
              "column": 89
            },
            "end": {
              "line": 63,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2512,
          2672
        ],
        "loc": {
          "start": {
            "line": 61,
            "column": 7
          },
          "end": {
            "line": 63,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              73,
              108
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n ",
            "range": [
              109,
              2504
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 60,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=mergeMap.js.map",
            "range": [
              2673,
              2709
            ],
            "loc": {
              "start": {
                "line": 64,
                "column": 0
              },
              "end": {
                "line": 64,
                "column": 36
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2505,
        2672
      ],
      "loc": {
        "start": {
          "line": 61,
          "column": 0
        },
        "end": {
          "line": 63,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            73,
            108
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n ",
          "range": [
            109,
            2504
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 60,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=mergeMap.js.map",
          "range": [
            2673,
            2709
          ],
          "loc": {
            "start": {
              "line": 64,
              "column": 0
            },
            "end": {
              "line": 64,
              "column": 36
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    2672
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 63,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        73,
        108
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n ",
      "range": [
        109,
        2504
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=mergeMap.js.map",
      "range": [
        2673,
        2709
      ],
      "loc": {
        "start": {
          "line": 64,
          "column": 0
        },
        "end": {
          "line": 64,
          "column": 36
        }
      }
    }
  ]
}