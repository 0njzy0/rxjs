{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ConnectableObservable",
            "range": [
              9,
              30
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 30
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ConnectableObservable",
            "range": [
              9,
              30
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 30
              }
            }
          },
          "range": [
            9,
            30
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 30
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../observable/ConnectableObservable",
        "raw": "'../observable/ConnectableObservable'",
        "range": [
          38,
          75
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 38
          },
          "end": {
            "line": 1,
            "column": 75
          }
        }
      },
      "range": [
        0,
        76
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 76
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function} selector - a function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n ",
          "range": [
            77,
            871
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "multicast",
          "range": [
            888,
            897
          ],
          "loc": {
            "start": {
              "line": 18,
              "column": 16
            },
            "end": {
              "line": 18,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "subjectOrSubjectFactory",
            "range": [
              898,
              921
            ],
            "loc": {
              "start": {
                "line": 18,
                "column": 26
              },
              "end": {
                "line": 18,
                "column": 49
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "subjectFactory",
                    "range": [
                      933,
                      947
                    ],
                    "loc": {
                      "start": {
                        "line": 19,
                        "column": 8
                      },
                      "end": {
                        "line": 19,
                        "column": 22
                      }
                    }
                  },
                  "init": null,
                  "range": [
                    933,
                    947
                  ],
                  "loc": {
                    "start": {
                      "line": 19,
                      "column": 8
                    },
                    "end": {
                      "line": 19,
                      "column": 22
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                929,
                948
              ],
              "loc": {
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 23
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "subjectOrSubjectFactory",
                    "range": [
                      964,
                      987
                    ],
                    "loc": {
                      "start": {
                        "line": 20,
                        "column": 15
                      },
                      "end": {
                        "line": 20,
                        "column": 38
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    957,
                    987
                  ],
                  "loc": {
                    "start": {
                      "line": 20,
                      "column": 8
                    },
                    "end": {
                      "line": 20,
                      "column": 38
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "function",
                  "raw": "'function'",
                  "range": [
                    992,
                    1002
                  ],
                  "loc": {
                    "start": {
                      "line": 20,
                      "column": 43
                    },
                    "end": {
                      "line": 20,
                      "column": 53
                    }
                  }
                },
                "range": [
                  957,
                  1002
                ],
                "loc": {
                  "start": {
                    "line": 20,
                    "column": 8
                  },
                  "end": {
                    "line": 20,
                    "column": 53
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "subjectFactory",
                        "range": [
                          1014,
                          1028
                        ],
                        "loc": {
                          "start": {
                            "line": 21,
                            "column": 8
                          },
                          "end": {
                            "line": 21,
                            "column": 22
                          }
                        }
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "subjectOrSubjectFactory",
                        "range": [
                          1031,
                          1054
                        ],
                        "loc": {
                          "start": {
                            "line": 21,
                            "column": 25
                          },
                          "end": {
                            "line": 21,
                            "column": 48
                          }
                        }
                      },
                      "range": [
                        1014,
                        1054
                      ],
                      "loc": {
                        "start": {
                          "line": 21,
                          "column": 8
                        },
                        "end": {
                          "line": 21,
                          "column": 48
                        }
                      }
                    },
                    "range": [
                      1014,
                      1055
                    ],
                    "loc": {
                      "start": {
                        "line": 21,
                        "column": 8
                      },
                      "end": {
                        "line": 21,
                        "column": 49
                      }
                    }
                  }
                ],
                "range": [
                  1004,
                  1061
                ],
                "loc": {
                  "start": {
                    "line": 20,
                    "column": 55
                  },
                  "end": {
                    "line": 22,
                    "column": 5
                  }
                }
              },
              "alternate": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "subjectFactory",
                        "range": [
                          1081,
                          1095
                        ],
                        "loc": {
                          "start": {
                            "line": 24,
                            "column": 8
                          },
                          "end": {
                            "line": 24,
                            "column": 22
                          }
                        }
                      },
                      "right": {
                        "type": "FunctionExpression",
                        "id": {
                          "type": "Identifier",
                          "name": "subjectFactory",
                          "range": [
                            1107,
                            1121
                          ],
                          "loc": {
                            "start": {
                              "line": 24,
                              "column": 34
                            },
                            "end": {
                              "line": 24,
                              "column": 48
                            }
                          }
                        },
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Identifier",
                                "name": "subjectOrSubjectFactory",
                                "range": [
                                  1145,
                                  1168
                                ],
                                "loc": {
                                  "start": {
                                    "line": 25,
                                    "column": 19
                                  },
                                  "end": {
                                    "line": 25,
                                    "column": 42
                                  }
                                }
                              },
                              "range": [
                                1138,
                                1169
                              ],
                              "loc": {
                                "start": {
                                  "line": 25,
                                  "column": 12
                                },
                                "end": {
                                  "line": 25,
                                  "column": 43
                                }
                              }
                            }
                          ],
                          "range": [
                            1124,
                            1179
                          ],
                          "loc": {
                            "start": {
                              "line": 24,
                              "column": 51
                            },
                            "end": {
                              "line": 26,
                              "column": 9
                            }
                          }
                        },
                        "generator": false,
                        "expression": false,
                        "range": [
                          1098,
                          1179
                        ],
                        "loc": {
                          "start": {
                            "line": 24,
                            "column": 25
                          },
                          "end": {
                            "line": 26,
                            "column": 9
                          }
                        }
                      },
                      "range": [
                        1081,
                        1179
                      ],
                      "loc": {
                        "start": {
                          "line": 24,
                          "column": 8
                        },
                        "end": {
                          "line": 26,
                          "column": 9
                        }
                      }
                    },
                    "range": [
                      1081,
                      1180
                    ],
                    "loc": {
                      "start": {
                        "line": 24,
                        "column": 8
                      },
                      "end": {
                        "line": 26,
                        "column": 10
                      }
                    }
                  }
                ],
                "range": [
                  1071,
                  1186
                ],
                "loc": {
                  "start": {
                    "line": 23,
                    "column": 9
                  },
                  "end": {
                    "line": 27,
                    "column": 5
                  }
                }
              },
              "range": [
                953,
                1186
              ],
              "loc": {
                "start": {
                  "line": 20,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "NewExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "ConnectableObservable",
                  "range": [
                    1202,
                    1223
                  ],
                  "loc": {
                    "start": {
                      "line": 28,
                      "column": 15
                    },
                    "end": {
                      "line": 28,
                      "column": 36
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      1224,
                      1228
                    ],
                    "loc": {
                      "start": {
                        "line": 28,
                        "column": 37
                      },
                      "end": {
                        "line": 28,
                        "column": 41
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "subjectFactory",
                    "range": [
                      1230,
                      1244
                    ],
                    "loc": {
                      "start": {
                        "line": 28,
                        "column": 43
                      },
                      "end": {
                        "line": 28,
                        "column": 57
                      }
                    }
                  }
                ],
                "range": [
                  1198,
                  1245
                ],
                "loc": {
                  "start": {
                    "line": 28,
                    "column": 11
                  },
                  "end": {
                    "line": 28,
                    "column": 58
                  }
                }
              },
              "range": [
                1191,
                1246
              ],
              "loc": {
                "start": {
                  "line": 28,
                  "column": 4
                },
                "end": {
                  "line": 28,
                  "column": 59
                }
              }
            }
          ],
          "range": [
            923,
            1248
          ],
          "loc": {
            "start": {
              "line": 18,
              "column": 51
            },
            "end": {
              "line": 29,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          879,
          1248
        ],
        "loc": {
          "start": {
            "line": 18,
            "column": 7
          },
          "end": {
            "line": 29,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function} selector - a function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n ",
            "range": [
              77,
              871
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 17,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=multicast.js.map",
            "range": [
              1249,
              1286
            ],
            "loc": {
              "start": {
                "line": 30,
                "column": 0
              },
              "end": {
                "line": 30,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        872,
        1248
      ],
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function} selector - a function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n ",
          "range": [
            77,
            871
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=multicast.js.map",
          "range": [
            1249,
            1286
          ],
          "loc": {
            "start": {
              "line": 30,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1248
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 29,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function} selector - a function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n ",
      "range": [
        77,
        871
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=multicast.js.map",
      "range": [
        1249,
        1286
      ],
      "loc": {
        "start": {
          "line": 30,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 37
        }
      }
    }
  ]
}