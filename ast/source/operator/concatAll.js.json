{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              9,
              25
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              9,
              25
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 25
              }
            }
          },
          "range": [
            9,
            25
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeAll",
        "raw": "'./mergeAll'",
        "range": [
          33,
          45
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 33
          },
          "end": {
            "line": 1,
            "column": 45
          }
        }
      },
      "range": [
        0,
        46
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 46
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Joins every Observable emitted by the source (an Observable of Observables), in a serial\n * fashion. Subscribing to each one only when the previous one has completed, and merging\n * all of their values into the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and endlessly, and the\n * Observables it emits generally complete slower than the source emits, you can run into\n * memory issues as the incoming observables collect in an unbounded buffer.\n *\n * @return {Observable} an observable of values merged from the incoming observables.\n * @method concatAll\n * @owner Observable\n ",
          "range": [
            47,
            680
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concatAll",
          "range": [
            697,
            706
          ],
          "loc": {
            "start": {
              "line": 15,
              "column": 16
            },
            "end": {
              "line": 15,
              "column": 25
            }
          }
        },
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression",
                    "range": [
                      722,
                      726
                    ],
                    "loc": {
                      "start": {
                        "line": 16,
                        "column": 11
                      },
                      "end": {
                        "line": 16,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      727,
                      731
                    ],
                    "loc": {
                      "start": {
                        "line": 16,
                        "column": 16
                      },
                      "end": {
                        "line": 16,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    722,
                    731
                  ],
                  "loc": {
                    "start": {
                      "line": 16,
                      "column": 11
                    },
                    "end": {
                      "line": 16,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeAllOperator",
                      "range": [
                        736,
                        752
                      ],
                      "loc": {
                        "start": {
                          "line": 16,
                          "column": 25
                        },
                        "end": {
                          "line": 16,
                          "column": 41
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          753,
                          754
                        ],
                        "loc": {
                          "start": {
                            "line": 16,
                            "column": 42
                          },
                          "end": {
                            "line": 16,
                            "column": 43
                          }
                        }
                      }
                    ],
                    "range": [
                      732,
                      755
                    ],
                    "loc": {
                      "start": {
                        "line": 16,
                        "column": 21
                      },
                      "end": {
                        "line": 16,
                        "column": 44
                      }
                    }
                  }
                ],
                "range": [
                  722,
                  756
                ],
                "loc": {
                  "start": {
                    "line": 16,
                    "column": 11
                  },
                  "end": {
                    "line": 16,
                    "column": 45
                  }
                }
              },
              "range": [
                715,
                757
              ],
              "loc": {
                "start": {
                  "line": 16,
                  "column": 4
                },
                "end": {
                  "line": 16,
                  "column": 46
                }
              }
            }
          ],
          "range": [
            709,
            759
          ],
          "loc": {
            "start": {
              "line": 15,
              "column": 28
            },
            "end": {
              "line": 17,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          688,
          759
        ],
        "loc": {
          "start": {
            "line": 15,
            "column": 7
          },
          "end": {
            "line": 17,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Joins every Observable emitted by the source (an Observable of Observables), in a serial\n * fashion. Subscribing to each one only when the previous one has completed, and merging\n * all of their values into the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and endlessly, and the\n * Observables it emits generally complete slower than the source emits, you can run into\n * memory issues as the incoming observables collect in an unbounded buffer.\n *\n * @return {Observable} an observable of values merged from the incoming observables.\n * @method concatAll\n * @owner Observable\n ",
            "range": [
              47,
              680
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 14,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concatAll.js.map",
            "range": [
              760,
              797
            ],
            "loc": {
              "start": {
                "line": 18,
                "column": 0
              },
              "end": {
                "line": 18,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        681,
        759
      ],
      "loc": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Joins every Observable emitted by the source (an Observable of Observables), in a serial\n * fashion. Subscribing to each one only when the previous one has completed, and merging\n * all of their values into the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and endlessly, and the\n * Observables it emits generally complete slower than the source emits, you can run into\n * memory issues as the incoming observables collect in an unbounded buffer.\n *\n * @return {Observable} an observable of values merged from the incoming observables.\n * @method concatAll\n * @owner Observable\n ",
          "range": [
            47,
            680
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concatAll.js.map",
          "range": [
            760,
            797
          ],
          "loc": {
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    759
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 17,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Joins every Observable emitted by the source (an Observable of Observables), in a serial\n * fashion. Subscribing to each one only when the previous one has completed, and merging\n * all of their values into the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and endlessly, and the\n * Observables it emits generally complete slower than the source emits, you can run into\n * memory issues as the incoming observables collect in an unbounded buffer.\n *\n * @return {Observable} an observable of values merged from the incoming observables.\n * @method concatAll\n * @owner Observable\n ",
      "range": [
        47,
        680
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concatAll.js.map",
      "range": [
        760,
        797
      ],
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 37
        }
      }
    }
  ]
}