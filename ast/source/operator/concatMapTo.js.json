{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeMapToOperator",
            "range": [
              9,
              27
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 27
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeMapToOperator",
            "range": [
              9,
              27
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 27
              }
            }
          },
          "range": [
            9,
            27
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 27
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeMapTo",
        "raw": "'./mergeMapTo'",
        "range": [
          35,
          49
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 35
          },
          "end": {
            "line": 1,
            "column": 49
          }
        }
      },
      "range": [
        0,
        50
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 50
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Maps values from the source to a specific observable, and merges them together in a serialized fashion.\n *\n * @param {Observable} observable the observable to map each source value to\n * @param {function} [resultSelector] an optional result selector that is applied to values before they're\n * merged into the returned observable. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged together by joining the passed observable\n * with itself, one after the other, for each value emitted from the source.\n * @method concatMapTo\n * @owner Observable\n ",
          "range": [
            51,
            921
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concatMapTo",
          "range": [
            938,
            949
          ],
          "loc": {
            "start": {
              "line": 17,
              "column": 16
            },
            "end": {
              "line": 17,
              "column": 27
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "observable",
            "range": [
              950,
              960
            ],
            "loc": {
              "start": {
                "line": 17,
                "column": 28
              },
              "end": {
                "line": 17,
                "column": 38
              }
            }
          },
          {
            "type": "Identifier",
            "name": "resultSelector",
            "range": [
              962,
              976
            ],
            "loc": {
              "start": {
                "line": 17,
                "column": 40
              },
              "end": {
                "line": 17,
                "column": 54
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression",
                    "range": [
                      991,
                      995
                    ],
                    "loc": {
                      "start": {
                        "line": 18,
                        "column": 11
                      },
                      "end": {
                        "line": 18,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      996,
                      1000
                    ],
                    "loc": {
                      "start": {
                        "line": 18,
                        "column": 16
                      },
                      "end": {
                        "line": 18,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    991,
                    1000
                  ],
                  "loc": {
                    "start": {
                      "line": 18,
                      "column": 11
                    },
                    "end": {
                      "line": 18,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeMapToOperator",
                      "range": [
                        1005,
                        1023
                      ],
                      "loc": {
                        "start": {
                          "line": 18,
                          "column": 25
                        },
                        "end": {
                          "line": 18,
                          "column": 43
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observable",
                        "range": [
                          1024,
                          1034
                        ],
                        "loc": {
                          "start": {
                            "line": 18,
                            "column": 44
                          },
                          "end": {
                            "line": 18,
                            "column": 54
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "resultSelector",
                        "range": [
                          1036,
                          1050
                        ],
                        "loc": {
                          "start": {
                            "line": 18,
                            "column": 56
                          },
                          "end": {
                            "line": 18,
                            "column": 70
                          }
                        }
                      },
                      {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          1052,
                          1053
                        ],
                        "loc": {
                          "start": {
                            "line": 18,
                            "column": 72
                          },
                          "end": {
                            "line": 18,
                            "column": 73
                          }
                        }
                      }
                    ],
                    "range": [
                      1001,
                      1054
                    ],
                    "loc": {
                      "start": {
                        "line": 18,
                        "column": 21
                      },
                      "end": {
                        "line": 18,
                        "column": 74
                      }
                    }
                  }
                ],
                "range": [
                  991,
                  1055
                ],
                "loc": {
                  "start": {
                    "line": 18,
                    "column": 11
                  },
                  "end": {
                    "line": 18,
                    "column": 75
                  }
                }
              },
              "range": [
                984,
                1056
              ],
              "loc": {
                "start": {
                  "line": 18,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 76
                }
              }
            }
          ],
          "range": [
            978,
            1058
          ],
          "loc": {
            "start": {
              "line": 17,
              "column": 56
            },
            "end": {
              "line": 19,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          929,
          1058
        ],
        "loc": {
          "start": {
            "line": 17,
            "column": 7
          },
          "end": {
            "line": 19,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Maps values from the source to a specific observable, and merges them together in a serialized fashion.\n *\n * @param {Observable} observable the observable to map each source value to\n * @param {function} [resultSelector] an optional result selector that is applied to values before they're\n * merged into the returned observable. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged together by joining the passed observable\n * with itself, one after the other, for each value emitted from the source.\n * @method concatMapTo\n * @owner Observable\n ",
            "range": [
              51,
              921
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 16,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concatMapTo.js.map",
            "range": [
              1059,
              1098
            ],
            "loc": {
              "start": {
                "line": 20,
                "column": 0
              },
              "end": {
                "line": 20,
                "column": 39
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        922,
        1058
      ],
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Maps values from the source to a specific observable, and merges them together in a serialized fashion.\n *\n * @param {Observable} observable the observable to map each source value to\n * @param {function} [resultSelector] an optional result selector that is applied to values before they're\n * merged into the returned observable. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged together by joining the passed observable\n * with itself, one after the other, for each value emitted from the source.\n * @method concatMapTo\n * @owner Observable\n ",
          "range": [
            51,
            921
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concatMapTo.js.map",
          "range": [
            1059,
            1098
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 39
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1058
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 19,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Maps values from the source to a specific observable, and merges them together in a serialized fashion.\n *\n * @param {Observable} observable the observable to map each source value to\n * @param {function} [resultSelector] an optional result selector that is applied to values before they're\n * merged into the returned observable. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged together by joining the passed observable\n * with itself, one after the other, for each value emitted from the source.\n * @method concatMapTo\n * @owner Observable\n ",
      "range": [
        51,
        921
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concatMapTo.js.map",
      "range": [
        1059,
        1098
      ],
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 39
        }
      }
    }
  ]
}