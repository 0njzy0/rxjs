{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              22,
              33
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 22
              },
              "end": {
                "line": 1,
                "column": 33
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "skipUntil",
            "range": [
              9,
              18
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 18
              }
            }
          },
          "range": [
            9,
            33
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 33
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/skipUntil",
        "raw": "'../operators/skipUntil'",
        "range": [
          41,
          65
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 41
          },
          "end": {
            "line": 1,
            "column": 65
          }
        }
      },
      "range": [
        0,
        66
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 66
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n ",
          "range": [
            67,
            623
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "skipUntil",
          "range": [
            640,
            649
          ],
          "loc": {
            "start": {
              "line": 14,
              "column": 16
            },
            "end": {
              "line": 14,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "notifier",
            "range": [
              650,
              658
            ],
            "loc": {
              "start": {
                "line": 14,
                "column": 26
              },
              "end": {
                "line": 14,
                "column": 34
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      673,
                      684
                    ],
                    "loc": {
                      "start": {
                        "line": 15,
                        "column": 11
                      },
                      "end": {
                        "line": 15,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "notifier",
                      "range": [
                        685,
                        693
                      ],
                      "loc": {
                        "start": {
                          "line": 15,
                          "column": 23
                        },
                        "end": {
                          "line": 15,
                          "column": 31
                        }
                      }
                    }
                  ],
                  "range": [
                    673,
                    694
                  ],
                  "loc": {
                    "start": {
                      "line": 15,
                      "column": 11
                    },
                    "end": {
                      "line": 15,
                      "column": 32
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      695,
                      699
                    ],
                    "loc": {
                      "start": {
                        "line": 15,
                        "column": 33
                      },
                      "end": {
                        "line": 15,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  673,
                  700
                ],
                "loc": {
                  "start": {
                    "line": 15,
                    "column": 11
                  },
                  "end": {
                    "line": 15,
                    "column": 38
                  }
                }
              },
              "range": [
                666,
                701
              ],
              "loc": {
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 39
                }
              }
            }
          ],
          "range": [
            660,
            703
          ],
          "loc": {
            "start": {
              "line": 14,
              "column": 36
            },
            "end": {
              "line": 16,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          631,
          703
        ],
        "loc": {
          "start": {
            "line": 14,
            "column": 7
          },
          "end": {
            "line": 16,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n ",
            "range": [
              67,
              623
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 13,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=skipUntil.js.map",
            "range": [
              704,
              741
            ],
            "loc": {
              "start": {
                "line": 17,
                "column": 0
              },
              "end": {
                "line": 17,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        624,
        703
      ],
      "loc": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n ",
          "range": [
            67,
            623
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=skipUntil.js.map",
          "range": [
            704,
            741
          ],
          "loc": {
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    703
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 16,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n ",
      "range": [
        67,
        623
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=skipUntil.js.map",
      "range": [
        704,
        741
      ],
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 37
        }
      }
    }
  ]
}