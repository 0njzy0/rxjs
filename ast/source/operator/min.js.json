{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ReduceOperator",
            "range": [
              9,
              23
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 23
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ReduceOperator",
            "range": [
              9,
              23
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 23
              }
            }
          },
          "range": [
            9,
            23
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 23
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./reduce",
        "raw": "'./reduce'",
        "range": [
          31,
          41
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 31
          },
          "end": {
            "line": 1,
            "column": 41
          }
        }
      },
      "range": [
        0,
        42
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 42
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n ",
          "range": [
            43,
            549
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "min",
          "range": [
            566,
            569
          ],
          "loc": {
            "start": {
              "line": 13,
              "column": 16
            },
            "end": {
              "line": 13,
              "column": 19
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "comparer",
            "range": [
              570,
              578
            ],
            "loc": {
              "start": {
                "line": 13,
                "column": 20
              },
              "end": {
                "line": 13,
                "column": 28
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "min",
                    "range": [
                      592,
                      595
                    ],
                    "loc": {
                      "start": {
                        "line": 14,
                        "column": 10
                      },
                      "end": {
                        "line": 14,
                        "column": 13
                      }
                    }
                  },
                  "init": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "comparer",
                          "range": [
                            606,
                            614
                          ],
                          "loc": {
                            "start": {
                              "line": 14,
                              "column": 24
                            },
                            "end": {
                              "line": 14,
                              "column": 32
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          599,
                          614
                        ],
                        "loc": {
                          "start": {
                            "line": 14,
                            "column": 17
                          },
                          "end": {
                            "line": 14,
                            "column": 32
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'",
                        "range": [
                          619,
                          629
                        ],
                        "loc": {
                          "start": {
                            "line": 14,
                            "column": 37
                          },
                          "end": {
                            "line": 14,
                            "column": 47
                          }
                        }
                      },
                      "range": [
                        599,
                        629
                      ],
                      "loc": {
                        "start": {
                          "line": 14,
                          "column": 17
                        },
                        "end": {
                          "line": 14,
                          "column": 47
                        }
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "comparer",
                      "range": [
                        641,
                        649
                      ],
                      "loc": {
                        "start": {
                          "line": 15,
                          "column": 10
                        },
                        "end": {
                          "line": 15,
                          "column": 18
                        }
                      }
                    },
                    "alternate": {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            661,
                            662
                          ],
                          "loc": {
                            "start": {
                              "line": 16,
                              "column": 11
                            },
                            "end": {
                              "line": 16,
                              "column": 12
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            664,
                            665
                          ],
                          "loc": {
                            "start": {
                              "line": 16,
                              "column": 14
                            },
                            "end": {
                              "line": 16,
                              "column": 15
                            }
                          }
                        }
                      ],
                      "body": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "Identifier",
                            "name": "x",
                            "range": [
                              670,
                              671
                            ],
                            "loc": {
                              "start": {
                                "line": 16,
                                "column": 20
                              },
                              "end": {
                                "line": 16,
                                "column": 21
                              }
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "y",
                            "range": [
                              674,
                              675
                            ],
                            "loc": {
                              "start": {
                                "line": 16,
                                "column": 24
                              },
                              "end": {
                                "line": 16,
                                "column": 25
                              }
                            }
                          },
                          "range": [
                            670,
                            675
                          ],
                          "loc": {
                            "start": {
                              "line": 16,
                              "column": 20
                            },
                            "end": {
                              "line": 16,
                              "column": 25
                            }
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            678,
                            679
                          ],
                          "loc": {
                            "start": {
                              "line": 16,
                              "column": 28
                            },
                            "end": {
                              "line": 16,
                              "column": 29
                            }
                          }
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            682,
                            683
                          ],
                          "loc": {
                            "start": {
                              "line": 16,
                              "column": 32
                            },
                            "end": {
                              "line": 16,
                              "column": 33
                            }
                          }
                        },
                        "range": [
                          670,
                          683
                        ],
                        "loc": {
                          "start": {
                            "line": 16,
                            "column": 20
                          },
                          "end": {
                            "line": 16,
                            "column": 33
                          }
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "range": [
                        660,
                        683
                      ],
                      "loc": {
                        "start": {
                          "line": 16,
                          "column": 10
                        },
                        "end": {
                          "line": 16,
                          "column": 33
                        }
                      }
                    },
                    "range": [
                      598,
                      683
                    ],
                    "loc": {
                      "start": {
                        "line": 14,
                        "column": 16
                      },
                      "end": {
                        "line": 16,
                        "column": 33
                      }
                    }
                  },
                  "range": [
                    592,
                    683
                  ],
                  "loc": {
                    "start": {
                      "line": 14,
                      "column": 10
                    },
                    "end": {
                      "line": 16,
                      "column": 33
                    }
                  }
                }
              ],
              "kind": "const",
              "range": [
                586,
                684
              ],
              "loc": {
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 16,
                  "column": 34
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression",
                    "range": [
                      696,
                      700
                    ],
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 11
                      },
                      "end": {
                        "line": 17,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      701,
                      705
                    ],
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 16
                      },
                      "end": {
                        "line": 17,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    696,
                    705
                  ],
                  "loc": {
                    "start": {
                      "line": 17,
                      "column": 11
                    },
                    "end": {
                      "line": 17,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ReduceOperator",
                      "range": [
                        710,
                        724
                      ],
                      "loc": {
                        "start": {
                          "line": 17,
                          "column": 25
                        },
                        "end": {
                          "line": 17,
                          "column": 39
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "min",
                        "range": [
                          725,
                          728
                        ],
                        "loc": {
                          "start": {
                            "line": 17,
                            "column": 40
                          },
                          "end": {
                            "line": 17,
                            "column": 43
                          }
                        }
                      }
                    ],
                    "range": [
                      706,
                      729
                    ],
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 21
                      },
                      "end": {
                        "line": 17,
                        "column": 44
                      }
                    }
                  }
                ],
                "range": [
                  696,
                  730
                ],
                "loc": {
                  "start": {
                    "line": 17,
                    "column": 11
                  },
                  "end": {
                    "line": 17,
                    "column": 45
                  }
                }
              },
              "range": [
                689,
                731
              ],
              "loc": {
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 46
                }
              }
            }
          ],
          "range": [
            580,
            733
          ],
          "loc": {
            "start": {
              "line": 13,
              "column": 30
            },
            "end": {
              "line": 18,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          557,
          733
        ],
        "loc": {
          "start": {
            "line": 13,
            "column": 7
          },
          "end": {
            "line": 18,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n ",
            "range": [
              43,
              549
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 12,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=min.js.map",
            "range": [
              734,
              765
            ],
            "loc": {
              "start": {
                "line": 19,
                "column": 0
              },
              "end": {
                "line": 19,
                "column": 31
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        550,
        733
      ],
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n ",
          "range": [
            43,
            549
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=min.js.map",
          "range": [
            734,
            765
          ],
          "loc": {
            "start": {
              "line": 19,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 31
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    733
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 18,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n ",
      "range": [
        43,
        549
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=min.js.map",
      "range": [
        734,
        765
      ],
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 31
        }
      }
    }
  ]
}