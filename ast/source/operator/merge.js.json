{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              9,
              24
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              9,
              24
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 24
              }
            }
          },
          "range": [
            9,
            24
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../observable/ArrayObservable",
        "raw": "'../observable/ArrayObservable'",
        "range": [
          32,
          63
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 32
          },
          "end": {
            "line": 1,
            "column": 63
          }
        }
      },
      "range": [
        0,
        64
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 64
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              74,
              90
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              74,
              90
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 25
              }
            }
          },
          "range": [
            74,
            90
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeAll",
        "raw": "'./mergeAll'",
        "range": [
          98,
          110
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 33
          },
          "end": {
            "line": 2,
            "column": 45
          }
        }
      },
      "range": [
        65,
        111
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 46
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              121,
              132
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              121,
              132
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 20
              }
            }
          },
          "range": [
            121,
            132
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          140,
          161
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 28
          },
          "end": {
            "line": 3,
            "column": 49
          }
        }
      },
      "range": [
        112,
        162
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 50
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:disable:max-line-length ",
          "range": [
            163,
            199
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 36
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n ",
          "range": [
            200,
            2235
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "merge",
          "range": [
            2252,
            2257
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 16
            },
            "end": {
              "line": 51,
              "column": 21
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                2261,
                2272
              ],
              "loc": {
                "start": {
                  "line": 51,
                  "column": 25
                },
                "end": {
                  "line": 51,
                  "column": 36
                }
              }
            },
            "range": [
              2258,
              2272
            ],
            "loc": {
              "start": {
                "line": 51,
                "column": 22
              },
              "end": {
                "line": 51,
                "column": 36
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression",
                      "range": [
                        2287,
                        2291
                      ],
                      "loc": {
                        "start": {
                          "line": 52,
                          "column": 11
                        },
                        "end": {
                          "line": 52,
                          "column": 15
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "lift",
                      "range": [
                        2292,
                        2296
                      ],
                      "loc": {
                        "start": {
                          "line": 52,
                          "column": 16
                        },
                        "end": {
                          "line": 52,
                          "column": 20
                        }
                      }
                    },
                    "range": [
                      2287,
                      2296
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 11
                      },
                      "end": {
                        "line": 52,
                        "column": 20
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "call",
                    "range": [
                      2297,
                      2301
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 21
                      },
                      "end": {
                        "line": 52,
                        "column": 25
                      }
                    }
                  },
                  "range": [
                    2287,
                    2301
                  ],
                  "loc": {
                    "start": {
                      "line": 52,
                      "column": 11
                    },
                    "end": {
                      "line": 52,
                      "column": 25
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "mergeStatic",
                      "range": [
                        2302,
                        2313
                      ],
                      "loc": {
                        "start": {
                          "line": 52,
                          "column": 26
                        },
                        "end": {
                          "line": 52,
                          "column": 37
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          2314,
                          2318
                        ],
                        "loc": {
                          "start": {
                            "line": 52,
                            "column": 38
                          },
                          "end": {
                            "line": 52,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            2323,
                            2334
                          ],
                          "loc": {
                            "start": {
                              "line": 52,
                              "column": 47
                            },
                            "end": {
                              "line": 52,
                              "column": 58
                            }
                          }
                        },
                        "range": [
                          2320,
                          2334
                        ],
                        "loc": {
                          "start": {
                            "line": 52,
                            "column": 44
                          },
                          "end": {
                            "line": 52,
                            "column": 58
                          }
                        }
                      }
                    ],
                    "range": [
                      2302,
                      2335
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 26
                      },
                      "end": {
                        "line": 52,
                        "column": 59
                      }
                    }
                  }
                ],
                "range": [
                  2287,
                  2336
                ],
                "loc": {
                  "start": {
                    "line": 52,
                    "column": 11
                  },
                  "end": {
                    "line": 52,
                    "column": 60
                  }
                }
              },
              "range": [
                2280,
                2337
              ],
              "loc": {
                "start": {
                  "line": 52,
                  "column": 4
                },
                "end": {
                  "line": 52,
                  "column": 61
                }
              }
            }
          ],
          "range": [
            2274,
            2339
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 38
            },
            "end": {
              "line": 53,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2243,
          2339
        ],
        "loc": {
          "start": {
            "line": 51,
            "column": 7
          },
          "end": {
            "line": 53,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:disable:max-line-length ",
            "range": [
              163,
              199
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 4,
                "column": 36
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n ",
            "range": [
              200,
              2235
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 50,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2340,
              2375
            ],
            "loc": {
              "start": {
                "line": 54,
                "column": 0
              },
              "end": {
                "line": 54,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
            "range": [
              2376,
              4340
            ],
            "loc": {
              "start": {
                "line": 55,
                "column": 0
              },
              "end": {
                "line": 99,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2236,
        2339
      ],
      "loc": {
        "start": {
          "line": 51,
          "column": 0
        },
        "end": {
          "line": 53,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:disable:max-line-length ",
          "range": [
            163,
            199
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 36
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n ",
          "range": [
            200,
            2235
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2340,
            2375
          ],
          "loc": {
            "start": {
              "line": 54,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
          "range": [
            2376,
            4340
          ],
          "loc": {
            "start": {
              "line": 55,
              "column": 0
            },
            "end": {
              "line": 99,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "mergeStatic",
          "range": [
            4357,
            4368
          ],
          "loc": {
            "start": {
              "line": 100,
              "column": 16
            },
            "end": {
              "line": 100,
              "column": 27
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                4372,
                4383
              ],
              "loc": {
                "start": {
                  "line": 100,
                  "column": 31
                },
                "end": {
                  "line": 100,
                  "column": 42
                }
              }
            },
            "range": [
              4369,
              4383
            ],
            "loc": {
              "start": {
                "line": 100,
                "column": 28
              },
              "end": {
                "line": 100,
                "column": 42
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "concurrent",
                    "range": [
                      4395,
                      4405
                    ],
                    "loc": {
                      "start": {
                        "line": 101,
                        "column": 8
                      },
                      "end": {
                        "line": 101,
                        "column": 18
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Number",
                      "range": [
                        4408,
                        4414
                      ],
                      "loc": {
                        "start": {
                          "line": 101,
                          "column": 21
                        },
                        "end": {
                          "line": 101,
                          "column": 27
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "POSITIVE_INFINITY",
                      "range": [
                        4415,
                        4432
                      ],
                      "loc": {
                        "start": {
                          "line": 101,
                          "column": 28
                        },
                        "end": {
                          "line": 101,
                          "column": 45
                        }
                      }
                    },
                    "range": [
                      4408,
                      4432
                    ],
                    "loc": {
                      "start": {
                        "line": 101,
                        "column": 21
                      },
                      "end": {
                        "line": 101,
                        "column": 45
                      }
                    }
                  },
                  "range": [
                    4395,
                    4432
                  ],
                  "loc": {
                    "start": {
                      "line": 101,
                      "column": 8
                    },
                    "end": {
                      "line": 101,
                      "column": 45
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4391,
                4433
              ],
              "loc": {
                "start": {
                  "line": 101,
                  "column": 4
                },
                "end": {
                  "line": 101,
                  "column": 46
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      4442,
                      4451
                    ],
                    "loc": {
                      "start": {
                        "line": 102,
                        "column": 8
                      },
                      "end": {
                        "line": 102,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      4454,
                      4458
                    ],
                    "loc": {
                      "start": {
                        "line": 102,
                        "column": 20
                      },
                      "end": {
                        "line": 102,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    4442,
                    4458
                  ],
                  "loc": {
                    "start": {
                      "line": 102,
                      "column": 8
                    },
                    "end": {
                      "line": 102,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4438,
                4459
              ],
              "loc": {
                "start": {
                  "line": 102,
                  "column": 4
                },
                "end": {
                  "line": 102,
                  "column": 25
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "last",
                    "range": [
                      4468,
                      4472
                    ],
                    "loc": {
                      "start": {
                        "line": 103,
                        "column": 8
                      },
                      "end": {
                        "line": 103,
                        "column": 12
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        4475,
                        4486
                      ],
                      "loc": {
                        "start": {
                          "line": 103,
                          "column": 15
                        },
                        "end": {
                          "line": 103,
                          "column": 26
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            4487,
                            4498
                          ],
                          "loc": {
                            "start": {
                              "line": 103,
                              "column": 27
                            },
                            "end": {
                              "line": 103,
                              "column": 38
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            4499,
                            4505
                          ],
                          "loc": {
                            "start": {
                              "line": 103,
                              "column": 39
                            },
                            "end": {
                              "line": 103,
                              "column": 45
                            }
                          }
                        },
                        "range": [
                          4487,
                          4505
                        ],
                        "loc": {
                          "start": {
                            "line": 103,
                            "column": 27
                          },
                          "end": {
                            "line": 103,
                            "column": 45
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          4508,
                          4509
                        ],
                        "loc": {
                          "start": {
                            "line": 103,
                            "column": 48
                          },
                          "end": {
                            "line": 103,
                            "column": 49
                          }
                        }
                      },
                      "range": [
                        4487,
                        4509
                      ],
                      "loc": {
                        "start": {
                          "line": 103,
                          "column": 27
                        },
                        "end": {
                          "line": 103,
                          "column": 49
                        }
                      }
                    },
                    "range": [
                      4475,
                      4510
                    ],
                    "loc": {
                      "start": {
                        "line": 103,
                        "column": 15
                      },
                      "end": {
                        "line": 103,
                        "column": 50
                      }
                    }
                  },
                  "range": [
                    4468,
                    4510
                  ],
                  "loc": {
                    "start": {
                      "line": 103,
                      "column": 8
                    },
                    "end": {
                      "line": 103,
                      "column": 50
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4464,
                4511
              ],
              "loc": {
                "start": {
                  "line": 103,
                  "column": 4
                },
                "end": {
                  "line": 103,
                  "column": 51
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    4520,
                    4531
                  ],
                  "loc": {
                    "start": {
                      "line": 104,
                      "column": 8
                    },
                    "end": {
                      "line": 104,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "last",
                    "range": [
                      4532,
                      4536
                    ],
                    "loc": {
                      "start": {
                        "line": 104,
                        "column": 20
                      },
                      "end": {
                        "line": 104,
                        "column": 24
                      }
                    }
                  }
                ],
                "range": [
                  4520,
                  4537
                ],
                "loc": {
                  "start": {
                    "line": 104,
                    "column": 8
                  },
                  "end": {
                    "line": 104,
                    "column": 25
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4549,
                          4558
                        ],
                        "loc": {
                          "start": {
                            "line": 105,
                            "column": 8
                          },
                          "end": {
                            "line": 105,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              4561,
                              4572
                            ],
                            "loc": {
                              "start": {
                                "line": 105,
                                "column": 20
                              },
                              "end": {
                                "line": 105,
                                "column": 31
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              4573,
                              4576
                            ],
                            "loc": {
                              "start": {
                                "line": 105,
                                "column": 32
                              },
                              "end": {
                                "line": 105,
                                "column": 35
                              }
                            }
                          },
                          "range": [
                            4561,
                            4576
                          ],
                          "loc": {
                            "start": {
                              "line": 105,
                              "column": 20
                            },
                            "end": {
                              "line": 105,
                              "column": 35
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          4561,
                          4578
                        ],
                        "loc": {
                          "start": {
                            "line": 105,
                            "column": 20
                          },
                          "end": {
                            "line": 105,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        4549,
                        4578
                      ],
                      "loc": {
                        "start": {
                          "line": 105,
                          "column": 8
                        },
                        "end": {
                          "line": 105,
                          "column": 37
                        }
                      }
                    },
                    "range": [
                      4549,
                      4579
                    ],
                    "loc": {
                      "start": {
                        "line": 105,
                        "column": 8
                      },
                      "end": {
                        "line": 105,
                        "column": 38
                      }
                    }
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              4592,
                              4603
                            ],
                            "loc": {
                              "start": {
                                "line": 106,
                                "column": 12
                              },
                              "end": {
                                "line": 106,
                                "column": 23
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length",
                            "range": [
                              4604,
                              4610
                            ],
                            "loc": {
                              "start": {
                                "line": 106,
                                "column": 24
                              },
                              "end": {
                                "line": 106,
                                "column": 30
                              }
                            }
                          },
                          "range": [
                            4592,
                            4610
                          ],
                          "loc": {
                            "start": {
                              "line": 106,
                              "column": 12
                            },
                            "end": {
                              "line": 106,
                              "column": 30
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "range": [
                            4613,
                            4614
                          ],
                          "loc": {
                            "start": {
                              "line": 106,
                              "column": 33
                            },
                            "end": {
                              "line": 106,
                              "column": 34
                            }
                          }
                        },
                        "range": [
                          4592,
                          4614
                        ],
                        "loc": {
                          "start": {
                            "line": 106,
                            "column": 12
                          },
                          "end": {
                            "line": 106,
                            "column": 34
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "observables",
                              "range": [
                                4625,
                                4636
                              ],
                              "loc": {
                                "start": {
                                  "line": 106,
                                  "column": 45
                                },
                                "end": {
                                  "line": 106,
                                  "column": 56
                                }
                              }
                            },
                            "property": {
                              "type": "BinaryExpression",
                              "operator": "-",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "observables",
                                  "range": [
                                    4637,
                                    4648
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 106,
                                      "column": 57
                                    },
                                    "end": {
                                      "line": 106,
                                      "column": 68
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length",
                                  "range": [
                                    4649,
                                    4655
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 106,
                                      "column": 69
                                    },
                                    "end": {
                                      "line": 106,
                                      "column": 75
                                    }
                                  }
                                },
                                "range": [
                                  4637,
                                  4655
                                ],
                                "loc": {
                                  "start": {
                                    "line": 106,
                                    "column": 57
                                  },
                                  "end": {
                                    "line": 106,
                                    "column": 75
                                  }
                                }
                              },
                              "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1",
                                "range": [
                                  4658,
                                  4659
                                ],
                                "loc": {
                                  "start": {
                                    "line": 106,
                                    "column": 78
                                  },
                                  "end": {
                                    "line": 106,
                                    "column": 79
                                  }
                                }
                              },
                              "range": [
                                4637,
                                4659
                              ],
                              "loc": {
                                "start": {
                                  "line": 106,
                                  "column": 57
                                },
                                "end": {
                                  "line": 106,
                                  "column": 79
                                }
                              }
                            },
                            "range": [
                              4625,
                              4660
                            ],
                            "loc": {
                              "start": {
                                "line": 106,
                                "column": 45
                              },
                              "end": {
                                "line": 106,
                                "column": 80
                              }
                            }
                          },
                          "prefix": true,
                          "range": [
                            4618,
                            4660
                          ],
                          "loc": {
                            "start": {
                              "line": 106,
                              "column": 38
                            },
                            "end": {
                              "line": 106,
                              "column": 80
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": "number",
                          "raw": "'number'",
                          "range": [
                            4665,
                            4673
                          ],
                          "loc": {
                            "start": {
                              "line": 106,
                              "column": 85
                            },
                            "end": {
                              "line": 106,
                              "column": 93
                            }
                          }
                        },
                        "range": [
                          4618,
                          4673
                        ],
                        "loc": {
                          "start": {
                            "line": 106,
                            "column": 38
                          },
                          "end": {
                            "line": 106,
                            "column": 93
                          }
                        }
                      },
                      "range": [
                        4592,
                        4673
                      ],
                      "loc": {
                        "start": {
                          "line": 106,
                          "column": 12
                        },
                        "end": {
                          "line": 106,
                          "column": 93
                        }
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "concurrent",
                              "range": [
                                4689,
                                4699
                              ],
                              "loc": {
                                "start": {
                                  "line": 107,
                                  "column": 12
                                },
                                "end": {
                                  "line": 107,
                                  "column": 22
                                }
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "observables",
                                  "range": [
                                    4702,
                                    4713
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 107,
                                      "column": 25
                                    },
                                    "end": {
                                      "line": 107,
                                      "column": 36
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "pop",
                                  "range": [
                                    4714,
                                    4717
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 107,
                                      "column": 37
                                    },
                                    "end": {
                                      "line": 107,
                                      "column": 40
                                    }
                                  }
                                },
                                "range": [
                                  4702,
                                  4717
                                ],
                                "loc": {
                                  "start": {
                                    "line": 107,
                                    "column": 25
                                  },
                                  "end": {
                                    "line": 107,
                                    "column": 40
                                  }
                                }
                              },
                              "arguments": [],
                              "range": [
                                4702,
                                4719
                              ],
                              "loc": {
                                "start": {
                                  "line": 107,
                                  "column": 25
                                },
                                "end": {
                                  "line": 107,
                                  "column": 42
                                }
                              }
                            },
                            "range": [
                              4689,
                              4719
                            ],
                            "loc": {
                              "start": {
                                "line": 107,
                                "column": 12
                              },
                              "end": {
                                "line": 107,
                                "column": 42
                              }
                            }
                          },
                          "range": [
                            4689,
                            4720
                          ],
                          "loc": {
                            "start": {
                              "line": 107,
                              "column": 12
                            },
                            "end": {
                              "line": 107,
                              "column": 43
                            }
                          }
                        }
                      ],
                      "range": [
                        4675,
                        4730
                      ],
                      "loc": {
                        "start": {
                          "line": 106,
                          "column": 95
                        },
                        "end": {
                          "line": 108,
                          "column": 9
                        }
                      }
                    },
                    "alternate": null,
                    "range": [
                      4588,
                      4730
                    ],
                    "loc": {
                      "start": {
                        "line": 106,
                        "column": 8
                      },
                      "end": {
                        "line": 108,
                        "column": 9
                      }
                    }
                  }
                ],
                "range": [
                  4539,
                  4736
                ],
                "loc": {
                  "start": {
                    "line": 104,
                    "column": 27
                  },
                  "end": {
                    "line": 109,
                    "column": 5
                  }
                }
              },
              "alternate": {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "last",
                      "range": [
                        4757,
                        4761
                      ],
                      "loc": {
                        "start": {
                          "line": 110,
                          "column": 20
                        },
                        "end": {
                          "line": 110,
                          "column": 24
                        }
                      }
                    },
                    "prefix": true,
                    "range": [
                      4750,
                      4761
                    ],
                    "loc": {
                      "start": {
                        "line": 110,
                        "column": 13
                      },
                      "end": {
                        "line": 110,
                        "column": 24
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": "number",
                    "raw": "'number'",
                    "range": [
                      4766,
                      4774
                    ],
                    "loc": {
                      "start": {
                        "line": 110,
                        "column": 29
                      },
                      "end": {
                        "line": 110,
                        "column": 37
                      }
                    }
                  },
                  "range": [
                    4750,
                    4774
                  ],
                  "loc": {
                    "start": {
                      "line": 110,
                      "column": 13
                    },
                    "end": {
                      "line": 110,
                      "column": 37
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "concurrent",
                          "range": [
                            4786,
                            4796
                          ],
                          "loc": {
                            "start": {
                              "line": 111,
                              "column": 8
                            },
                            "end": {
                              "line": 111,
                              "column": 18
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "observables",
                              "range": [
                                4799,
                                4810
                              ],
                              "loc": {
                                "start": {
                                  "line": 111,
                                  "column": 21
                                },
                                "end": {
                                  "line": 111,
                                  "column": 32
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "pop",
                              "range": [
                                4811,
                                4814
                              ],
                              "loc": {
                                "start": {
                                  "line": 111,
                                  "column": 33
                                },
                                "end": {
                                  "line": 111,
                                  "column": 36
                                }
                              }
                            },
                            "range": [
                              4799,
                              4814
                            ],
                            "loc": {
                              "start": {
                                "line": 111,
                                "column": 21
                              },
                              "end": {
                                "line": 111,
                                "column": 36
                              }
                            }
                          },
                          "arguments": [],
                          "range": [
                            4799,
                            4816
                          ],
                          "loc": {
                            "start": {
                              "line": 111,
                              "column": 21
                            },
                            "end": {
                              "line": 111,
                              "column": 38
                            }
                          }
                        },
                        "range": [
                          4786,
                          4816
                        ],
                        "loc": {
                          "start": {
                            "line": 111,
                            "column": 8
                          },
                          "end": {
                            "line": 111,
                            "column": 38
                          }
                        }
                      },
                      "range": [
                        4786,
                        4817
                      ],
                      "loc": {
                        "start": {
                          "line": 111,
                          "column": 8
                        },
                        "end": {
                          "line": 111,
                          "column": 39
                        }
                      }
                    }
                  ],
                  "range": [
                    4776,
                    4823
                  ],
                  "loc": {
                    "start": {
                      "line": 110,
                      "column": 39
                    },
                    "end": {
                      "line": 112,
                      "column": 5
                    }
                  }
                },
                "alternate": null,
                "range": [
                  4746,
                  4823
                ],
                "loc": {
                  "start": {
                    "line": 110,
                    "column": 9
                  },
                  "end": {
                    "line": 112,
                    "column": 5
                  }
                }
              },
              "range": [
                4516,
                4823
              ],
              "loc": {
                "start": {
                  "line": 104,
                  "column": 4
                },
                "end": {
                  "line": 112,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      4832,
                      4841
                    ],
                    "loc": {
                      "start": {
                        "line": 113,
                        "column": 8
                      },
                      "end": {
                        "line": 113,
                        "column": 17
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      4846,
                      4850
                    ],
                    "loc": {
                      "start": {
                        "line": 113,
                        "column": 22
                      },
                      "end": {
                        "line": 113,
                        "column": 26
                      }
                    }
                  },
                  "range": [
                    4832,
                    4850
                  ],
                  "loc": {
                    "start": {
                      "line": 113,
                      "column": 8
                    },
                    "end": {
                      "line": 113,
                      "column": 26
                    }
                  }
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        4854,
                        4865
                      ],
                      "loc": {
                        "start": {
                          "line": 113,
                          "column": 30
                        },
                        "end": {
                          "line": 113,
                          "column": 41
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length",
                      "range": [
                        4866,
                        4872
                      ],
                      "loc": {
                        "start": {
                          "line": 113,
                          "column": 42
                        },
                        "end": {
                          "line": 113,
                          "column": 48
                        }
                      }
                    },
                    "range": [
                      4854,
                      4872
                    ],
                    "loc": {
                      "start": {
                        "line": 113,
                        "column": 30
                      },
                      "end": {
                        "line": 113,
                        "column": 48
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "range": [
                      4877,
                      4878
                    ],
                    "loc": {
                      "start": {
                        "line": 113,
                        "column": 53
                      },
                      "end": {
                        "line": 113,
                        "column": 54
                      }
                    }
                  },
                  "range": [
                    4854,
                    4878
                  ],
                  "loc": {
                    "start": {
                      "line": 113,
                      "column": 30
                    },
                    "end": {
                      "line": 113,
                      "column": 54
                    }
                  }
                },
                "range": [
                  4832,
                  4878
                ],
                "loc": {
                  "start": {
                    "line": 113,
                    "column": 8
                  },
                  "end": {
                    "line": 113,
                    "column": 54
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4897,
                          4908
                        ],
                        "loc": {
                          "start": {
                            "line": 114,
                            "column": 15
                          },
                          "end": {
                            "line": 114,
                            "column": 26
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          4909,
                          4910
                        ],
                        "loc": {
                          "start": {
                            "line": 114,
                            "column": 27
                          },
                          "end": {
                            "line": 114,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        4897,
                        4911
                      ],
                      "loc": {
                        "start": {
                          "line": 114,
                          "column": 15
                        },
                        "end": {
                          "line": 114,
                          "column": 29
                        }
                      }
                    },
                    "range": [
                      4890,
                      4912
                    ],
                    "loc": {
                      "start": {
                        "line": 114,
                        "column": 8
                      },
                      "end": {
                        "line": 114,
                        "column": 30
                      }
                    }
                  }
                ],
                "range": [
                  4880,
                  4918
                ],
                "loc": {
                  "start": {
                    "line": 113,
                    "column": 56
                  },
                  "end": {
                    "line": 115,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4828,
                4918
              ],
              "loc": {
                "start": {
                  "line": 113,
                  "column": 4
                },
                "end": {
                  "line": 115,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        4934,
                        4949
                      ],
                      "loc": {
                        "start": {
                          "line": 116,
                          "column": 15
                        },
                        "end": {
                          "line": 116,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4950,
                          4961
                        ],
                        "loc": {
                          "start": {
                            "line": 116,
                            "column": 31
                          },
                          "end": {
                            "line": 116,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4963,
                          4972
                        ],
                        "loc": {
                          "start": {
                            "line": 116,
                            "column": 44
                          },
                          "end": {
                            "line": 116,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      4930,
                      4973
                    ],
                    "loc": {
                      "start": {
                        "line": 116,
                        "column": 11
                      },
                      "end": {
                        "line": 116,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      4974,
                      4978
                    ],
                    "loc": {
                      "start": {
                        "line": 116,
                        "column": 55
                      },
                      "end": {
                        "line": 116,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    4930,
                    4978
                  ],
                  "loc": {
                    "start": {
                      "line": 116,
                      "column": 11
                    },
                    "end": {
                      "line": 116,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeAllOperator",
                      "range": [
                        4983,
                        4999
                      ],
                      "loc": {
                        "start": {
                          "line": 116,
                          "column": 64
                        },
                        "end": {
                          "line": 116,
                          "column": 80
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "concurrent",
                        "range": [
                          5000,
                          5010
                        ],
                        "loc": {
                          "start": {
                            "line": 116,
                            "column": 81
                          },
                          "end": {
                            "line": 116,
                            "column": 91
                          }
                        }
                      }
                    ],
                    "range": [
                      4979,
                      5011
                    ],
                    "loc": {
                      "start": {
                        "line": 116,
                        "column": 60
                      },
                      "end": {
                        "line": 116,
                        "column": 92
                      }
                    }
                  }
                ],
                "range": [
                  4930,
                  5012
                ],
                "loc": {
                  "start": {
                    "line": 116,
                    "column": 11
                  },
                  "end": {
                    "line": 116,
                    "column": 93
                  }
                }
              },
              "range": [
                4923,
                5013
              ],
              "loc": {
                "start": {
                  "line": 116,
                  "column": 4
                },
                "end": {
                  "line": 116,
                  "column": 94
                }
              }
            }
          ],
          "range": [
            4385,
            5015
          ],
          "loc": {
            "start": {
              "line": 100,
              "column": 44
            },
            "end": {
              "line": 117,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          4348,
          5015
        ],
        "loc": {
          "start": {
            "line": 100,
            "column": 7
          },
          "end": {
            "line": 117,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2340,
              2375
            ],
            "loc": {
              "start": {
                "line": 54,
                "column": 0
              },
              "end": {
                "line": 54,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
            "range": [
              2376,
              4340
            ],
            "loc": {
              "start": {
                "line": 55,
                "column": 0
              },
              "end": {
                "line": 99,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=merge.js.map",
            "range": [
              5016,
              5049
            ],
            "loc": {
              "start": {
                "line": 118,
                "column": 0
              },
              "end": {
                "line": 118,
                "column": 33
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        4341,
        5015
      ],
      "loc": {
        "start": {
          "line": 100,
          "column": 0
        },
        "end": {
          "line": 117,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2340,
            2375
          ],
          "loc": {
            "start": {
              "line": 54,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
          "range": [
            2376,
            4340
          ],
          "loc": {
            "start": {
              "line": 55,
              "column": 0
            },
            "end": {
              "line": 99,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=merge.js.map",
          "range": [
            5016,
            5049
          ],
          "loc": {
            "start": {
              "line": 118,
              "column": 0
            },
            "end": {
              "line": 118,
              "column": 33
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    5015
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 117,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:disable:max-line-length ",
      "range": [
        163,
        199
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 36
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n ",
      "range": [
        200,
        2235
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        2340,
        2375
      ],
      "loc": {
        "start": {
          "line": 54,
          "column": 0
        },
        "end": {
          "line": 54,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
      "range": [
        2376,
        4340
      ],
      "loc": {
        "start": {
          "line": 55,
          "column": 0
        },
        "end": {
          "line": 99,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=merge.js.map",
      "range": [
        5016,
        5049
      ],
      "loc": {
        "start": {
          "line": 118,
          "column": 0
        },
        "end": {
          "line": 118,
          "column": 33
        }
      }
    }
  ]
}