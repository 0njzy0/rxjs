{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              9,
              24
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              9,
              24
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 24
              }
            }
          },
          "range": [
            9,
            24
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../observable/ArrayObservable",
        "raw": "'../observable/ArrayObservable'",
        "range": [
          32,
          63
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 32
          },
          "end": {
            "line": 1,
            "column": 63
          }
        }
      },
      "range": [
        0,
        64
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 64
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              74,
              90
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              74,
              90
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 25
              }
            }
          },
          "range": [
            74,
            90
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeAll",
        "raw": "'./mergeAll'",
        "range": [
          98,
          110
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 33
          },
          "end": {
            "line": 2,
            "column": 45
          }
        }
      },
      "range": [
        65,
        111
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 46
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              121,
              132
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              121,
              132
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 20
              }
            }
          },
          "range": [
            121,
            132
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          140,
          161
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 28
          },
          "end": {
            "line": 3,
            "column": 49
          }
        }
      },
      "range": [
        112,
        162
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 50
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n ",
          "range": [
            163,
            2198
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 49,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "merge",
          "range": [
            2215,
            2220
          ],
          "loc": {
            "start": {
              "line": 50,
              "column": 16
            },
            "end": {
              "line": 50,
              "column": 21
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                2224,
                2235
              ],
              "loc": {
                "start": {
                  "line": 50,
                  "column": 25
                },
                "end": {
                  "line": 50,
                  "column": 36
                }
              }
            },
            "range": [
              2221,
              2235
            ],
            "loc": {
              "start": {
                "line": 50,
                "column": 22
              },
              "end": {
                "line": 50,
                "column": 36
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "observables",
                    "range": [
                      2243,
                      2254
                    ],
                    "loc": {
                      "start": {
                        "line": 51,
                        "column": 4
                      },
                      "end": {
                        "line": 51,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "unshift",
                    "range": [
                      2255,
                      2262
                    ],
                    "loc": {
                      "start": {
                        "line": 51,
                        "column": 16
                      },
                      "end": {
                        "line": 51,
                        "column": 23
                      }
                    }
                  },
                  "range": [
                    2243,
                    2262
                  ],
                  "loc": {
                    "start": {
                      "line": 51,
                      "column": 4
                    },
                    "end": {
                      "line": 51,
                      "column": 23
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      2263,
                      2267
                    ],
                    "loc": {
                      "start": {
                        "line": 51,
                        "column": 24
                      },
                      "end": {
                        "line": 51,
                        "column": 28
                      }
                    }
                  }
                ],
                "range": [
                  2243,
                  2268
                ],
                "loc": {
                  "start": {
                    "line": 51,
                    "column": 4
                  },
                  "end": {
                    "line": 51,
                    "column": 29
                  }
                }
              },
              "range": [
                2243,
                2269
              ],
              "loc": {
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 51,
                  "column": 30
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "mergeStatic",
                    "range": [
                      2281,
                      2292
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 11
                      },
                      "end": {
                        "line": 52,
                        "column": 22
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "apply",
                    "range": [
                      2293,
                      2298
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 23
                      },
                      "end": {
                        "line": 52,
                        "column": 28
                      }
                    }
                  },
                  "range": [
                    2281,
                    2298
                  ],
                  "loc": {
                    "start": {
                      "line": 52,
                      "column": 11
                    },
                    "end": {
                      "line": 52,
                      "column": 28
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      2299,
                      2303
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 29
                      },
                      "end": {
                        "line": 52,
                        "column": 33
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "observables",
                    "range": [
                      2305,
                      2316
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 35
                      },
                      "end": {
                        "line": 52,
                        "column": 46
                      }
                    }
                  }
                ],
                "range": [
                  2281,
                  2317
                ],
                "loc": {
                  "start": {
                    "line": 52,
                    "column": 11
                  },
                  "end": {
                    "line": 52,
                    "column": 47
                  }
                }
              },
              "range": [
                2274,
                2318
              ],
              "loc": {
                "start": {
                  "line": 52,
                  "column": 4
                },
                "end": {
                  "line": 52,
                  "column": 48
                }
              }
            }
          ],
          "range": [
            2237,
            2320
          ],
          "loc": {
            "start": {
              "line": 50,
              "column": 38
            },
            "end": {
              "line": 53,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2206,
          2320
        ],
        "loc": {
          "start": {
            "line": 50,
            "column": 7
          },
          "end": {
            "line": 53,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n ",
            "range": [
              163,
              2198
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 49,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2321,
              2356
            ],
            "loc": {
              "start": {
                "line": 54,
                "column": 0
              },
              "end": {
                "line": 54,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
            "range": [
              2357,
              4390
            ],
            "loc": {
              "start": {
                "line": 55,
                "column": 0
              },
              "end": {
                "line": 100,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2199,
        2320
      ],
      "loc": {
        "start": {
          "line": 50,
          "column": 0
        },
        "end": {
          "line": 53,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n ",
          "range": [
            163,
            2198
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 49,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2321,
            2356
          ],
          "loc": {
            "start": {
              "line": 54,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
          "range": [
            2357,
            4390
          ],
          "loc": {
            "start": {
              "line": 55,
              "column": 0
            },
            "end": {
              "line": 100,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "mergeStatic",
          "range": [
            4407,
            4418
          ],
          "loc": {
            "start": {
              "line": 101,
              "column": 16
            },
            "end": {
              "line": 101,
              "column": 27
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                4422,
                4433
              ],
              "loc": {
                "start": {
                  "line": 101,
                  "column": 31
                },
                "end": {
                  "line": 101,
                  "column": 42
                }
              }
            },
            "range": [
              4419,
              4433
            ],
            "loc": {
              "start": {
                "line": 101,
                "column": 28
              },
              "end": {
                "line": 101,
                "column": 42
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "concurrent",
                    "range": [
                      4445,
                      4455
                    ],
                    "loc": {
                      "start": {
                        "line": 102,
                        "column": 8
                      },
                      "end": {
                        "line": 102,
                        "column": 18
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Number",
                      "range": [
                        4458,
                        4464
                      ],
                      "loc": {
                        "start": {
                          "line": 102,
                          "column": 21
                        },
                        "end": {
                          "line": 102,
                          "column": 27
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "POSITIVE_INFINITY",
                      "range": [
                        4465,
                        4482
                      ],
                      "loc": {
                        "start": {
                          "line": 102,
                          "column": 28
                        },
                        "end": {
                          "line": 102,
                          "column": 45
                        }
                      }
                    },
                    "range": [
                      4458,
                      4482
                    ],
                    "loc": {
                      "start": {
                        "line": 102,
                        "column": 21
                      },
                      "end": {
                        "line": 102,
                        "column": 45
                      }
                    }
                  },
                  "range": [
                    4445,
                    4482
                  ],
                  "loc": {
                    "start": {
                      "line": 102,
                      "column": 8
                    },
                    "end": {
                      "line": 102,
                      "column": 45
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4441,
                4483
              ],
              "loc": {
                "start": {
                  "line": 102,
                  "column": 4
                },
                "end": {
                  "line": 102,
                  "column": 46
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      4492,
                      4501
                    ],
                    "loc": {
                      "start": {
                        "line": 103,
                        "column": 8
                      },
                      "end": {
                        "line": 103,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      4504,
                      4508
                    ],
                    "loc": {
                      "start": {
                        "line": 103,
                        "column": 20
                      },
                      "end": {
                        "line": 103,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    4492,
                    4508
                  ],
                  "loc": {
                    "start": {
                      "line": 103,
                      "column": 8
                    },
                    "end": {
                      "line": 103,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4488,
                4509
              ],
              "loc": {
                "start": {
                  "line": 103,
                  "column": 4
                },
                "end": {
                  "line": 103,
                  "column": 25
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "last",
                    "range": [
                      4518,
                      4522
                    ],
                    "loc": {
                      "start": {
                        "line": 104,
                        "column": 8
                      },
                      "end": {
                        "line": 104,
                        "column": 12
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        4525,
                        4536
                      ],
                      "loc": {
                        "start": {
                          "line": 104,
                          "column": 15
                        },
                        "end": {
                          "line": 104,
                          "column": 26
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            4537,
                            4548
                          ],
                          "loc": {
                            "start": {
                              "line": 104,
                              "column": 27
                            },
                            "end": {
                              "line": 104,
                              "column": 38
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            4549,
                            4555
                          ],
                          "loc": {
                            "start": {
                              "line": 104,
                              "column": 39
                            },
                            "end": {
                              "line": 104,
                              "column": 45
                            }
                          }
                        },
                        "range": [
                          4537,
                          4555
                        ],
                        "loc": {
                          "start": {
                            "line": 104,
                            "column": 27
                          },
                          "end": {
                            "line": 104,
                            "column": 45
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          4558,
                          4559
                        ],
                        "loc": {
                          "start": {
                            "line": 104,
                            "column": 48
                          },
                          "end": {
                            "line": 104,
                            "column": 49
                          }
                        }
                      },
                      "range": [
                        4537,
                        4559
                      ],
                      "loc": {
                        "start": {
                          "line": 104,
                          "column": 27
                        },
                        "end": {
                          "line": 104,
                          "column": 49
                        }
                      }
                    },
                    "range": [
                      4525,
                      4560
                    ],
                    "loc": {
                      "start": {
                        "line": 104,
                        "column": 15
                      },
                      "end": {
                        "line": 104,
                        "column": 50
                      }
                    }
                  },
                  "range": [
                    4518,
                    4560
                  ],
                  "loc": {
                    "start": {
                      "line": 104,
                      "column": 8
                    },
                    "end": {
                      "line": 104,
                      "column": 50
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4514,
                4561
              ],
              "loc": {
                "start": {
                  "line": 104,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 51
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    4570,
                    4581
                  ],
                  "loc": {
                    "start": {
                      "line": 105,
                      "column": 8
                    },
                    "end": {
                      "line": 105,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "last",
                    "range": [
                      4582,
                      4586
                    ],
                    "loc": {
                      "start": {
                        "line": 105,
                        "column": 20
                      },
                      "end": {
                        "line": 105,
                        "column": 24
                      }
                    }
                  }
                ],
                "range": [
                  4570,
                  4587
                ],
                "loc": {
                  "start": {
                    "line": 105,
                    "column": 8
                  },
                  "end": {
                    "line": 105,
                    "column": 25
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4599,
                          4608
                        ],
                        "loc": {
                          "start": {
                            "line": 106,
                            "column": 8
                          },
                          "end": {
                            "line": 106,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              4611,
                              4622
                            ],
                            "loc": {
                              "start": {
                                "line": 106,
                                "column": 20
                              },
                              "end": {
                                "line": 106,
                                "column": 31
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              4623,
                              4626
                            ],
                            "loc": {
                              "start": {
                                "line": 106,
                                "column": 32
                              },
                              "end": {
                                "line": 106,
                                "column": 35
                              }
                            }
                          },
                          "range": [
                            4611,
                            4626
                          ],
                          "loc": {
                            "start": {
                              "line": 106,
                              "column": 20
                            },
                            "end": {
                              "line": 106,
                              "column": 35
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          4611,
                          4628
                        ],
                        "loc": {
                          "start": {
                            "line": 106,
                            "column": 20
                          },
                          "end": {
                            "line": 106,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        4599,
                        4628
                      ],
                      "loc": {
                        "start": {
                          "line": 106,
                          "column": 8
                        },
                        "end": {
                          "line": 106,
                          "column": 37
                        }
                      }
                    },
                    "range": [
                      4599,
                      4629
                    ],
                    "loc": {
                      "start": {
                        "line": 106,
                        "column": 8
                      },
                      "end": {
                        "line": 106,
                        "column": 38
                      }
                    }
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              4642,
                              4653
                            ],
                            "loc": {
                              "start": {
                                "line": 107,
                                "column": 12
                              },
                              "end": {
                                "line": 107,
                                "column": 23
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length",
                            "range": [
                              4654,
                              4660
                            ],
                            "loc": {
                              "start": {
                                "line": 107,
                                "column": 24
                              },
                              "end": {
                                "line": 107,
                                "column": 30
                              }
                            }
                          },
                          "range": [
                            4642,
                            4660
                          ],
                          "loc": {
                            "start": {
                              "line": 107,
                              "column": 12
                            },
                            "end": {
                              "line": 107,
                              "column": 30
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "range": [
                            4663,
                            4664
                          ],
                          "loc": {
                            "start": {
                              "line": 107,
                              "column": 33
                            },
                            "end": {
                              "line": 107,
                              "column": 34
                            }
                          }
                        },
                        "range": [
                          4642,
                          4664
                        ],
                        "loc": {
                          "start": {
                            "line": 107,
                            "column": 12
                          },
                          "end": {
                            "line": 107,
                            "column": 34
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "observables",
                              "range": [
                                4675,
                                4686
                              ],
                              "loc": {
                                "start": {
                                  "line": 107,
                                  "column": 45
                                },
                                "end": {
                                  "line": 107,
                                  "column": 56
                                }
                              }
                            },
                            "property": {
                              "type": "BinaryExpression",
                              "operator": "-",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "observables",
                                  "range": [
                                    4687,
                                    4698
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 107,
                                      "column": 57
                                    },
                                    "end": {
                                      "line": 107,
                                      "column": 68
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length",
                                  "range": [
                                    4699,
                                    4705
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 107,
                                      "column": 69
                                    },
                                    "end": {
                                      "line": 107,
                                      "column": 75
                                    }
                                  }
                                },
                                "range": [
                                  4687,
                                  4705
                                ],
                                "loc": {
                                  "start": {
                                    "line": 107,
                                    "column": 57
                                  },
                                  "end": {
                                    "line": 107,
                                    "column": 75
                                  }
                                }
                              },
                              "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1",
                                "range": [
                                  4708,
                                  4709
                                ],
                                "loc": {
                                  "start": {
                                    "line": 107,
                                    "column": 78
                                  },
                                  "end": {
                                    "line": 107,
                                    "column": 79
                                  }
                                }
                              },
                              "range": [
                                4687,
                                4709
                              ],
                              "loc": {
                                "start": {
                                  "line": 107,
                                  "column": 57
                                },
                                "end": {
                                  "line": 107,
                                  "column": 79
                                }
                              }
                            },
                            "range": [
                              4675,
                              4710
                            ],
                            "loc": {
                              "start": {
                                "line": 107,
                                "column": 45
                              },
                              "end": {
                                "line": 107,
                                "column": 80
                              }
                            }
                          },
                          "prefix": true,
                          "range": [
                            4668,
                            4710
                          ],
                          "loc": {
                            "start": {
                              "line": 107,
                              "column": 38
                            },
                            "end": {
                              "line": 107,
                              "column": 80
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": "number",
                          "raw": "'number'",
                          "range": [
                            4715,
                            4723
                          ],
                          "loc": {
                            "start": {
                              "line": 107,
                              "column": 85
                            },
                            "end": {
                              "line": 107,
                              "column": 93
                            }
                          }
                        },
                        "range": [
                          4668,
                          4723
                        ],
                        "loc": {
                          "start": {
                            "line": 107,
                            "column": 38
                          },
                          "end": {
                            "line": 107,
                            "column": 93
                          }
                        }
                      },
                      "range": [
                        4642,
                        4723
                      ],
                      "loc": {
                        "start": {
                          "line": 107,
                          "column": 12
                        },
                        "end": {
                          "line": 107,
                          "column": 93
                        }
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "concurrent",
                              "range": [
                                4739,
                                4749
                              ],
                              "loc": {
                                "start": {
                                  "line": 108,
                                  "column": 12
                                },
                                "end": {
                                  "line": 108,
                                  "column": 22
                                }
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "observables",
                                  "range": [
                                    4752,
                                    4763
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 108,
                                      "column": 25
                                    },
                                    "end": {
                                      "line": 108,
                                      "column": 36
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "pop",
                                  "range": [
                                    4764,
                                    4767
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 108,
                                      "column": 37
                                    },
                                    "end": {
                                      "line": 108,
                                      "column": 40
                                    }
                                  }
                                },
                                "range": [
                                  4752,
                                  4767
                                ],
                                "loc": {
                                  "start": {
                                    "line": 108,
                                    "column": 25
                                  },
                                  "end": {
                                    "line": 108,
                                    "column": 40
                                  }
                                }
                              },
                              "arguments": [],
                              "range": [
                                4752,
                                4769
                              ],
                              "loc": {
                                "start": {
                                  "line": 108,
                                  "column": 25
                                },
                                "end": {
                                  "line": 108,
                                  "column": 42
                                }
                              }
                            },
                            "range": [
                              4739,
                              4769
                            ],
                            "loc": {
                              "start": {
                                "line": 108,
                                "column": 12
                              },
                              "end": {
                                "line": 108,
                                "column": 42
                              }
                            }
                          },
                          "range": [
                            4739,
                            4770
                          ],
                          "loc": {
                            "start": {
                              "line": 108,
                              "column": 12
                            },
                            "end": {
                              "line": 108,
                              "column": 43
                            }
                          }
                        }
                      ],
                      "range": [
                        4725,
                        4780
                      ],
                      "loc": {
                        "start": {
                          "line": 107,
                          "column": 95
                        },
                        "end": {
                          "line": 109,
                          "column": 9
                        }
                      }
                    },
                    "alternate": null,
                    "range": [
                      4638,
                      4780
                    ],
                    "loc": {
                      "start": {
                        "line": 107,
                        "column": 8
                      },
                      "end": {
                        "line": 109,
                        "column": 9
                      }
                    }
                  }
                ],
                "range": [
                  4589,
                  4786
                ],
                "loc": {
                  "start": {
                    "line": 105,
                    "column": 27
                  },
                  "end": {
                    "line": 110,
                    "column": 5
                  }
                }
              },
              "alternate": {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "last",
                      "range": [
                        4807,
                        4811
                      ],
                      "loc": {
                        "start": {
                          "line": 111,
                          "column": 20
                        },
                        "end": {
                          "line": 111,
                          "column": 24
                        }
                      }
                    },
                    "prefix": true,
                    "range": [
                      4800,
                      4811
                    ],
                    "loc": {
                      "start": {
                        "line": 111,
                        "column": 13
                      },
                      "end": {
                        "line": 111,
                        "column": 24
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": "number",
                    "raw": "'number'",
                    "range": [
                      4816,
                      4824
                    ],
                    "loc": {
                      "start": {
                        "line": 111,
                        "column": 29
                      },
                      "end": {
                        "line": 111,
                        "column": 37
                      }
                    }
                  },
                  "range": [
                    4800,
                    4824
                  ],
                  "loc": {
                    "start": {
                      "line": 111,
                      "column": 13
                    },
                    "end": {
                      "line": 111,
                      "column": 37
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "concurrent",
                          "range": [
                            4836,
                            4846
                          ],
                          "loc": {
                            "start": {
                              "line": 112,
                              "column": 8
                            },
                            "end": {
                              "line": 112,
                              "column": 18
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "observables",
                              "range": [
                                4849,
                                4860
                              ],
                              "loc": {
                                "start": {
                                  "line": 112,
                                  "column": 21
                                },
                                "end": {
                                  "line": 112,
                                  "column": 32
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "pop",
                              "range": [
                                4861,
                                4864
                              ],
                              "loc": {
                                "start": {
                                  "line": 112,
                                  "column": 33
                                },
                                "end": {
                                  "line": 112,
                                  "column": 36
                                }
                              }
                            },
                            "range": [
                              4849,
                              4864
                            ],
                            "loc": {
                              "start": {
                                "line": 112,
                                "column": 21
                              },
                              "end": {
                                "line": 112,
                                "column": 36
                              }
                            }
                          },
                          "arguments": [],
                          "range": [
                            4849,
                            4866
                          ],
                          "loc": {
                            "start": {
                              "line": 112,
                              "column": 21
                            },
                            "end": {
                              "line": 112,
                              "column": 38
                            }
                          }
                        },
                        "range": [
                          4836,
                          4866
                        ],
                        "loc": {
                          "start": {
                            "line": 112,
                            "column": 8
                          },
                          "end": {
                            "line": 112,
                            "column": 38
                          }
                        }
                      },
                      "range": [
                        4836,
                        4867
                      ],
                      "loc": {
                        "start": {
                          "line": 112,
                          "column": 8
                        },
                        "end": {
                          "line": 112,
                          "column": 39
                        }
                      }
                    }
                  ],
                  "range": [
                    4826,
                    4873
                  ],
                  "loc": {
                    "start": {
                      "line": 111,
                      "column": 39
                    },
                    "end": {
                      "line": 113,
                      "column": 5
                    }
                  }
                },
                "alternate": null,
                "range": [
                  4796,
                  4873
                ],
                "loc": {
                  "start": {
                    "line": 111,
                    "column": 9
                  },
                  "end": {
                    "line": 113,
                    "column": 5
                  }
                }
              },
              "range": [
                4566,
                4873
              ],
              "loc": {
                "start": {
                  "line": 105,
                  "column": 4
                },
                "end": {
                  "line": 113,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "observables",
                    "range": [
                      4882,
                      4893
                    ],
                    "loc": {
                      "start": {
                        "line": 114,
                        "column": 8
                      },
                      "end": {
                        "line": 114,
                        "column": 19
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "length",
                    "range": [
                      4894,
                      4900
                    ],
                    "loc": {
                      "start": {
                        "line": 114,
                        "column": 20
                      },
                      "end": {
                        "line": 114,
                        "column": 26
                      }
                    }
                  },
                  "range": [
                    4882,
                    4900
                  ],
                  "loc": {
                    "start": {
                      "line": 114,
                      "column": 8
                    },
                    "end": {
                      "line": 114,
                      "column": 26
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1",
                  "range": [
                    4905,
                    4906
                  ],
                  "loc": {
                    "start": {
                      "line": 114,
                      "column": 31
                    },
                    "end": {
                      "line": 114,
                      "column": 32
                    }
                  }
                },
                "range": [
                  4882,
                  4906
                ],
                "loc": {
                  "start": {
                    "line": 114,
                    "column": 8
                  },
                  "end": {
                    "line": 114,
                    "column": 32
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4925,
                          4936
                        ],
                        "loc": {
                          "start": {
                            "line": 115,
                            "column": 15
                          },
                          "end": {
                            "line": 115,
                            "column": 26
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          4937,
                          4938
                        ],
                        "loc": {
                          "start": {
                            "line": 115,
                            "column": 27
                          },
                          "end": {
                            "line": 115,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        4925,
                        4939
                      ],
                      "loc": {
                        "start": {
                          "line": 115,
                          "column": 15
                        },
                        "end": {
                          "line": 115,
                          "column": 29
                        }
                      }
                    },
                    "range": [
                      4918,
                      4940
                    ],
                    "loc": {
                      "start": {
                        "line": 115,
                        "column": 8
                      },
                      "end": {
                        "line": 115,
                        "column": 30
                      }
                    }
                  }
                ],
                "range": [
                  4908,
                  4946
                ],
                "loc": {
                  "start": {
                    "line": 114,
                    "column": 34
                  },
                  "end": {
                    "line": 116,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4878,
                4946
              ],
              "loc": {
                "start": {
                  "line": 114,
                  "column": 4
                },
                "end": {
                  "line": 116,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        4962,
                        4977
                      ],
                      "loc": {
                        "start": {
                          "line": 117,
                          "column": 15
                        },
                        "end": {
                          "line": 117,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4978,
                          4989
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 31
                          },
                          "end": {
                            "line": 117,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4991,
                          5000
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 44
                          },
                          "end": {
                            "line": 117,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      4958,
                      5001
                    ],
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 11
                      },
                      "end": {
                        "line": 117,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      5002,
                      5006
                    ],
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 55
                      },
                      "end": {
                        "line": 117,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    4958,
                    5006
                  ],
                  "loc": {
                    "start": {
                      "line": 117,
                      "column": 11
                    },
                    "end": {
                      "line": 117,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeAllOperator",
                      "range": [
                        5011,
                        5027
                      ],
                      "loc": {
                        "start": {
                          "line": 117,
                          "column": 64
                        },
                        "end": {
                          "line": 117,
                          "column": 80
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "concurrent",
                        "range": [
                          5028,
                          5038
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 81
                          },
                          "end": {
                            "line": 117,
                            "column": 91
                          }
                        }
                      }
                    ],
                    "range": [
                      5007,
                      5039
                    ],
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 60
                      },
                      "end": {
                        "line": 117,
                        "column": 92
                      }
                    }
                  }
                ],
                "range": [
                  4958,
                  5040
                ],
                "loc": {
                  "start": {
                    "line": 117,
                    "column": 11
                  },
                  "end": {
                    "line": 117,
                    "column": 93
                  }
                }
              },
              "range": [
                4951,
                5041
              ],
              "loc": {
                "start": {
                  "line": 117,
                  "column": 4
                },
                "end": {
                  "line": 117,
                  "column": 94
                }
              }
            }
          ],
          "range": [
            4435,
            5043
          ],
          "loc": {
            "start": {
              "line": 101,
              "column": 44
            },
            "end": {
              "line": 118,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          4398,
          5043
        ],
        "loc": {
          "start": {
            "line": 101,
            "column": 7
          },
          "end": {
            "line": 118,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2321,
              2356
            ],
            "loc": {
              "start": {
                "line": 54,
                "column": 0
              },
              "end": {
                "line": 54,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
            "range": [
              2357,
              4390
            ],
            "loc": {
              "start": {
                "line": 55,
                "column": 0
              },
              "end": {
                "line": 100,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=merge.js.map",
            "range": [
              5044,
              5077
            ],
            "loc": {
              "start": {
                "line": 119,
                "column": 0
              },
              "end": {
                "line": 119,
                "column": 33
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        4391,
        5043
      ],
      "loc": {
        "start": {
          "line": 101,
          "column": 0
        },
        "end": {
          "line": 118,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2321,
            2356
          ],
          "loc": {
            "start": {
              "line": 54,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
          "range": [
            2357,
            4390
          ],
          "loc": {
            "start": {
              "line": 55,
              "column": 0
            },
            "end": {
              "line": 100,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=merge.js.map",
          "range": [
            5044,
            5077
          ],
          "loc": {
            "start": {
              "line": 119,
              "column": 0
            },
            "end": {
              "line": 119,
              "column": 33
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    5043
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 118,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n ",
      "range": [
        163,
        2198
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 49,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        2321,
        2356
      ],
      "loc": {
        "start": {
          "line": 54,
          "column": 0
        },
        "end": {
          "line": 54,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
      "range": [
        2357,
        4390
      ],
      "loc": {
        "start": {
          "line": 55,
          "column": 0
        },
        "end": {
          "line": 100,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=merge.js.map",
      "range": [
        5044,
        5077
      ],
      "loc": {
        "start": {
          "line": 119,
          "column": 0
        },
        "end": {
          "line": 119,
          "column": 33
        }
      }
    }
  ]
}