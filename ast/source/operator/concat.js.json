{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "range": [
            9,
            19
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 19
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../Observable",
        "raw": "'../Observable'",
        "range": [
          27,
          42
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 27
          },
          "end": {
            "line": 1,
            "column": 42
          }
        }
      },
      "range": [
        0,
        43
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 43
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              53,
              64
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              53,
              64
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 20
              }
            }
          },
          "range": [
            53,
            64
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          72,
          93
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 28
          },
          "end": {
            "line": 2,
            "column": 49
          }
        }
      },
      "range": [
        44,
        94
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              104,
              119
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              104,
              119
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "range": [
            104,
            119
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../observable/ArrayObservable",
        "raw": "'../observable/ArrayObservable'",
        "range": [
          127,
          158
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 32
          },
          "end": {
            "line": 3,
            "column": 63
          }
        }
      },
      "range": [
        95,
        159
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 64
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              169,
              185
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              169,
              185
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 25
              }
            }
          },
          "range": [
            169,
            185
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 9
            },
            "end": {
              "line": 4,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeAll",
        "raw": "'./mergeAll'",
        "range": [
          193,
          205
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 33
          },
          "end": {
            "line": 4,
            "column": 45
          }
        }
      },
      "range": [
        160,
        206
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 46
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            207,
            242
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
          "range": [
            243,
            2279
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concat",
          "range": [
            2296,
            2302
          ],
          "loc": {
            "start": {
              "line": 55,
              "column": 16
            },
            "end": {
              "line": 55,
              "column": 22
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                2306,
                2317
              ],
              "loc": {
                "start": {
                  "line": 55,
                  "column": 26
                },
                "end": {
                  "line": 55,
                  "column": 37
                }
              }
            },
            "range": [
              2303,
              2317
            ],
            "loc": {
              "start": {
                "line": 55,
                "column": 23
              },
              "end": {
                "line": 55,
                "column": 37
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression",
                      "range": [
                        2332,
                        2336
                      ],
                      "loc": {
                        "start": {
                          "line": 56,
                          "column": 11
                        },
                        "end": {
                          "line": 56,
                          "column": 15
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "lift",
                      "range": [
                        2337,
                        2341
                      ],
                      "loc": {
                        "start": {
                          "line": 56,
                          "column": 16
                        },
                        "end": {
                          "line": 56,
                          "column": 20
                        }
                      }
                    },
                    "range": [
                      2332,
                      2341
                    ],
                    "loc": {
                      "start": {
                        "line": 56,
                        "column": 11
                      },
                      "end": {
                        "line": 56,
                        "column": 20
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "call",
                    "range": [
                      2342,
                      2346
                    ],
                    "loc": {
                      "start": {
                        "line": 56,
                        "column": 21
                      },
                      "end": {
                        "line": 56,
                        "column": 25
                      }
                    }
                  },
                  "range": [
                    2332,
                    2346
                  ],
                  "loc": {
                    "start": {
                      "line": 56,
                      "column": 11
                    },
                    "end": {
                      "line": 56,
                      "column": 25
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "concatStatic",
                      "range": [
                        2347,
                        2359
                      ],
                      "loc": {
                        "start": {
                          "line": 56,
                          "column": 26
                        },
                        "end": {
                          "line": 56,
                          "column": 38
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          2360,
                          2364
                        ],
                        "loc": {
                          "start": {
                            "line": 56,
                            "column": 39
                          },
                          "end": {
                            "line": 56,
                            "column": 43
                          }
                        }
                      },
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            2369,
                            2380
                          ],
                          "loc": {
                            "start": {
                              "line": 56,
                              "column": 48
                            },
                            "end": {
                              "line": 56,
                              "column": 59
                            }
                          }
                        },
                        "range": [
                          2366,
                          2380
                        ],
                        "loc": {
                          "start": {
                            "line": 56,
                            "column": 45
                          },
                          "end": {
                            "line": 56,
                            "column": 59
                          }
                        }
                      }
                    ],
                    "range": [
                      2347,
                      2381
                    ],
                    "loc": {
                      "start": {
                        "line": 56,
                        "column": 26
                      },
                      "end": {
                        "line": 56,
                        "column": 60
                      }
                    }
                  }
                ],
                "range": [
                  2332,
                  2382
                ],
                "loc": {
                  "start": {
                    "line": 56,
                    "column": 11
                  },
                  "end": {
                    "line": 56,
                    "column": 61
                  }
                }
              },
              "range": [
                2325,
                2383
              ],
              "loc": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 56,
                  "column": 62
                }
              }
            }
          ],
          "range": [
            2319,
            2385
          ],
          "loc": {
            "start": {
              "line": 55,
              "column": 39
            },
            "end": {
              "line": 57,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2287,
          2385
        ],
        "loc": {
          "start": {
            "line": 55,
            "column": 7
          },
          "end": {
            "line": 57,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              207,
              242
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
            "range": [
              243,
              2279
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 54,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2386,
              2421
            ],
            "loc": {
              "start": {
                "line": 58,
                "column": 0
              },
              "end": {
                "line": 58,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
            "range": [
              2422,
              6717
            ],
            "loc": {
              "start": {
                "line": 59,
                "column": 0
              },
              "end": {
                "line": 151,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2280,
        2385
      ],
      "loc": {
        "start": {
          "line": 55,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            207,
            242
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
          "range": [
            243,
            2279
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2386,
            2421
          ],
          "loc": {
            "start": {
              "line": 58,
              "column": 0
            },
            "end": {
              "line": 58,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            2422,
            6717
          ],
          "loc": {
            "start": {
              "line": 59,
              "column": 0
            },
            "end": {
              "line": 151,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concatStatic",
          "range": [
            6734,
            6746
          ],
          "loc": {
            "start": {
              "line": 152,
              "column": 16
            },
            "end": {
              "line": 152,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                6750,
                6761
              ],
              "loc": {
                "start": {
                  "line": 152,
                  "column": 32
                },
                "end": {
                  "line": 152,
                  "column": 43
                }
              }
            },
            "range": [
              6747,
              6761
            ],
            "loc": {
              "start": {
                "line": 152,
                "column": 29
              },
              "end": {
                "line": 152,
                "column": 43
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      6773,
                      6782
                    ],
                    "loc": {
                      "start": {
                        "line": 153,
                        "column": 8
                      },
                      "end": {
                        "line": 153,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      6785,
                      6789
                    ],
                    "loc": {
                      "start": {
                        "line": 153,
                        "column": 20
                      },
                      "end": {
                        "line": 153,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    6773,
                    6789
                  ],
                  "loc": {
                    "start": {
                      "line": 153,
                      "column": 8
                    },
                    "end": {
                      "line": 153,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                6769,
                6790
              ],
              "loc": {
                "start": {
                  "line": 153,
                  "column": 4
                },
                "end": {
                  "line": 153,
                  "column": 25
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "args",
                    "range": [
                      6799,
                      6803
                    ],
                    "loc": {
                      "start": {
                        "line": 154,
                        "column": 8
                      },
                      "end": {
                        "line": 154,
                        "column": 12
                      }
                    }
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "observables",
                    "range": [
                      6806,
                      6817
                    ],
                    "loc": {
                      "start": {
                        "line": 154,
                        "column": 15
                      },
                      "end": {
                        "line": 154,
                        "column": 26
                      }
                    }
                  },
                  "range": [
                    6799,
                    6817
                  ],
                  "loc": {
                    "start": {
                      "line": 154,
                      "column": 8
                    },
                    "end": {
                      "line": 154,
                      "column": 26
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                6795,
                6818
              ],
              "loc": {
                "start": {
                  "line": 154,
                  "column": 4
                },
                "end": {
                  "line": 154,
                  "column": 27
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    6827,
                    6838
                  ],
                  "loc": {
                    "start": {
                      "line": 155,
                      "column": 8
                    },
                    "end": {
                      "line": 155,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "args",
                      "range": [
                        6839,
                        6843
                      ],
                      "loc": {
                        "start": {
                          "line": 155,
                          "column": 20
                        },
                        "end": {
                          "line": 155,
                          "column": 24
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            6844,
                            6855
                          ],
                          "loc": {
                            "start": {
                              "line": 155,
                              "column": 25
                            },
                            "end": {
                              "line": 155,
                              "column": 36
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            6856,
                            6862
                          ],
                          "loc": {
                            "start": {
                              "line": 155,
                              "column": 37
                            },
                            "end": {
                              "line": 155,
                              "column": 43
                            }
                          }
                        },
                        "range": [
                          6844,
                          6862
                        ],
                        "loc": {
                          "start": {
                            "line": 155,
                            "column": 25
                          },
                          "end": {
                            "line": 155,
                            "column": 43
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          6865,
                          6866
                        ],
                        "loc": {
                          "start": {
                            "line": 155,
                            "column": 46
                          },
                          "end": {
                            "line": 155,
                            "column": 47
                          }
                        }
                      },
                      "range": [
                        6844,
                        6866
                      ],
                      "loc": {
                        "start": {
                          "line": 155,
                          "column": 25
                        },
                        "end": {
                          "line": 155,
                          "column": 47
                        }
                      }
                    },
                    "range": [
                      6839,
                      6867
                    ],
                    "loc": {
                      "start": {
                        "line": 155,
                        "column": 20
                      },
                      "end": {
                        "line": 155,
                        "column": 48
                      }
                    }
                  }
                ],
                "range": [
                  6827,
                  6868
                ],
                "loc": {
                  "start": {
                    "line": 155,
                    "column": 8
                  },
                  "end": {
                    "line": 155,
                    "column": 49
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          6880,
                          6889
                        ],
                        "loc": {
                          "start": {
                            "line": 156,
                            "column": 8
                          },
                          "end": {
                            "line": 156,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "args",
                            "range": [
                              6892,
                              6896
                            ],
                            "loc": {
                              "start": {
                                "line": 156,
                                "column": 20
                              },
                              "end": {
                                "line": 156,
                                "column": 24
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              6897,
                              6900
                            ],
                            "loc": {
                              "start": {
                                "line": 156,
                                "column": 25
                              },
                              "end": {
                                "line": 156,
                                "column": 28
                              }
                            }
                          },
                          "range": [
                            6892,
                            6900
                          ],
                          "loc": {
                            "start": {
                              "line": 156,
                              "column": 20
                            },
                            "end": {
                              "line": 156,
                              "column": 28
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          6892,
                          6902
                        ],
                        "loc": {
                          "start": {
                            "line": 156,
                            "column": 20
                          },
                          "end": {
                            "line": 156,
                            "column": 30
                          }
                        }
                      },
                      "range": [
                        6880,
                        6902
                      ],
                      "loc": {
                        "start": {
                          "line": 156,
                          "column": 8
                        },
                        "end": {
                          "line": 156,
                          "column": 30
                        }
                      }
                    },
                    "range": [
                      6880,
                      6903
                    ],
                    "loc": {
                      "start": {
                        "line": 156,
                        "column": 8
                      },
                      "end": {
                        "line": 156,
                        "column": 31
                      }
                    }
                  }
                ],
                "range": [
                  6870,
                  6909
                ],
                "loc": {
                  "start": {
                    "line": 155,
                    "column": 51
                  },
                  "end": {
                    "line": 157,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                6823,
                6909
              ],
              "loc": {
                "start": {
                  "line": 155,
                  "column": 4
                },
                "end": {
                  "line": 157,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "scheduler",
                      "range": [
                        6918,
                        6927
                      ],
                      "loc": {
                        "start": {
                          "line": 158,
                          "column": 8
                        },
                        "end": {
                          "line": 158,
                          "column": 17
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null",
                      "range": [
                        6932,
                        6936
                      ],
                      "loc": {
                        "start": {
                          "line": 158,
                          "column": 22
                        },
                        "end": {
                          "line": 158,
                          "column": 26
                        }
                      }
                    },
                    "range": [
                      6918,
                      6936
                    ],
                    "loc": {
                      "start": {
                        "line": 158,
                        "column": 8
                      },
                      "end": {
                        "line": 158,
                        "column": 26
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          6940,
                          6951
                        ],
                        "loc": {
                          "start": {
                            "line": 158,
                            "column": 30
                          },
                          "end": {
                            "line": 158,
                            "column": 41
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length",
                        "range": [
                          6952,
                          6958
                        ],
                        "loc": {
                          "start": {
                            "line": 158,
                            "column": 42
                          },
                          "end": {
                            "line": 158,
                            "column": 48
                          }
                        }
                      },
                      "range": [
                        6940,
                        6958
                      ],
                      "loc": {
                        "start": {
                          "line": 158,
                          "column": 30
                        },
                        "end": {
                          "line": 158,
                          "column": 48
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1",
                      "range": [
                        6963,
                        6964
                      ],
                      "loc": {
                        "start": {
                          "line": 158,
                          "column": 53
                        },
                        "end": {
                          "line": 158,
                          "column": 54
                        }
                      }
                    },
                    "range": [
                      6940,
                      6964
                    ],
                    "loc": {
                      "start": {
                        "line": 158,
                        "column": 30
                      },
                      "end": {
                        "line": 158,
                        "column": 54
                      }
                    }
                  },
                  "range": [
                    6918,
                    6964
                  ],
                  "loc": {
                    "start": {
                      "line": 158,
                      "column": 8
                    },
                    "end": {
                      "line": 158,
                      "column": 54
                    }
                  }
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "instanceof",
                  "left": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        6968,
                        6979
                      ],
                      "loc": {
                        "start": {
                          "line": 158,
                          "column": 58
                        },
                        "end": {
                          "line": 158,
                          "column": 69
                        }
                      }
                    },
                    "property": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0",
                      "range": [
                        6980,
                        6981
                      ],
                      "loc": {
                        "start": {
                          "line": 158,
                          "column": 70
                        },
                        "end": {
                          "line": 158,
                          "column": 71
                        }
                      }
                    },
                    "range": [
                      6968,
                      6982
                    ],
                    "loc": {
                      "start": {
                        "line": 158,
                        "column": 58
                      },
                      "end": {
                        "line": 158,
                        "column": 72
                      }
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "Observable",
                    "range": [
                      6994,
                      7004
                    ],
                    "loc": {
                      "start": {
                        "line": 158,
                        "column": 84
                      },
                      "end": {
                        "line": 158,
                        "column": 94
                      }
                    }
                  },
                  "range": [
                    6968,
                    7004
                  ],
                  "loc": {
                    "start": {
                      "line": 158,
                      "column": 58
                    },
                    "end": {
                      "line": 158,
                      "column": 94
                    }
                  }
                },
                "range": [
                  6918,
                  7004
                ],
                "loc": {
                  "start": {
                    "line": 158,
                    "column": 8
                  },
                  "end": {
                    "line": 158,
                    "column": 94
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          7023,
                          7034
                        ],
                        "loc": {
                          "start": {
                            "line": 159,
                            "column": 15
                          },
                          "end": {
                            "line": 159,
                            "column": 26
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          7035,
                          7036
                        ],
                        "loc": {
                          "start": {
                            "line": 159,
                            "column": 27
                          },
                          "end": {
                            "line": 159,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        7023,
                        7037
                      ],
                      "loc": {
                        "start": {
                          "line": 159,
                          "column": 15
                        },
                        "end": {
                          "line": 159,
                          "column": 29
                        }
                      }
                    },
                    "range": [
                      7016,
                      7038
                    ],
                    "loc": {
                      "start": {
                        "line": 159,
                        "column": 8
                      },
                      "end": {
                        "line": 159,
                        "column": 30
                      }
                    }
                  }
                ],
                "range": [
                  7006,
                  7044
                ],
                "loc": {
                  "start": {
                    "line": 158,
                    "column": 96
                  },
                  "end": {
                    "line": 160,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                6914,
                7044
              ],
              "loc": {
                "start": {
                  "line": 158,
                  "column": 4
                },
                "end": {
                  "line": 160,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        7060,
                        7075
                      ],
                      "loc": {
                        "start": {
                          "line": 161,
                          "column": 15
                        },
                        "end": {
                          "line": 161,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          7076,
                          7087
                        ],
                        "loc": {
                          "start": {
                            "line": 161,
                            "column": 31
                          },
                          "end": {
                            "line": 161,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          7089,
                          7098
                        ],
                        "loc": {
                          "start": {
                            "line": 161,
                            "column": 44
                          },
                          "end": {
                            "line": 161,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      7056,
                      7099
                    ],
                    "loc": {
                      "start": {
                        "line": 161,
                        "column": 11
                      },
                      "end": {
                        "line": 161,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      7100,
                      7104
                    ],
                    "loc": {
                      "start": {
                        "line": 161,
                        "column": 55
                      },
                      "end": {
                        "line": 161,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    7056,
                    7104
                  ],
                  "loc": {
                    "start": {
                      "line": 161,
                      "column": 11
                    },
                    "end": {
                      "line": 161,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeAllOperator",
                      "range": [
                        7109,
                        7125
                      ],
                      "loc": {
                        "start": {
                          "line": 161,
                          "column": 64
                        },
                        "end": {
                          "line": 161,
                          "column": 80
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          7126,
                          7127
                        ],
                        "loc": {
                          "start": {
                            "line": 161,
                            "column": 81
                          },
                          "end": {
                            "line": 161,
                            "column": 82
                          }
                        }
                      }
                    ],
                    "range": [
                      7105,
                      7128
                    ],
                    "loc": {
                      "start": {
                        "line": 161,
                        "column": 60
                      },
                      "end": {
                        "line": 161,
                        "column": 83
                      }
                    }
                  }
                ],
                "range": [
                  7056,
                  7129
                ],
                "loc": {
                  "start": {
                    "line": 161,
                    "column": 11
                  },
                  "end": {
                    "line": 161,
                    "column": 84
                  }
                }
              },
              "range": [
                7049,
                7130
              ],
              "loc": {
                "start": {
                  "line": 161,
                  "column": 4
                },
                "end": {
                  "line": 161,
                  "column": 85
                }
              }
            }
          ],
          "range": [
            6763,
            7132
          ],
          "loc": {
            "start": {
              "line": 152,
              "column": 45
            },
            "end": {
              "line": 162,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          6725,
          7132
        ],
        "loc": {
          "start": {
            "line": 152,
            "column": 7
          },
          "end": {
            "line": 162,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2386,
              2421
            ],
            "loc": {
              "start": {
                "line": 58,
                "column": 0
              },
              "end": {
                "line": 58,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
            "range": [
              2422,
              6717
            ],
            "loc": {
              "start": {
                "line": 59,
                "column": 0
              },
              "end": {
                "line": 151,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concat.js.map",
            "range": [
              7133,
              7167
            ],
            "loc": {
              "start": {
                "line": 163,
                "column": 0
              },
              "end": {
                "line": 163,
                "column": 34
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        6718,
        7132
      ],
      "loc": {
        "start": {
          "line": 152,
          "column": 0
        },
        "end": {
          "line": 162,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2386,
            2421
          ],
          "loc": {
            "start": {
              "line": 58,
              "column": 0
            },
            "end": {
              "line": 58,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            2422,
            6717
          ],
          "loc": {
            "start": {
              "line": 59,
              "column": 0
            },
            "end": {
              "line": 151,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concat.js.map",
          "range": [
            7133,
            7167
          ],
          "loc": {
            "start": {
              "line": 163,
              "column": 0
            },
            "end": {
              "line": 163,
              "column": 34
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    7132
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 162,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        207,
        242
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
      "range": [
        243,
        2279
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 54,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        2386,
        2421
      ],
      "loc": {
        "start": {
          "line": 58,
          "column": 0
        },
        "end": {
          "line": 58,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
      "range": [
        2422,
        6717
      ],
      "loc": {
        "start": {
          "line": 59,
          "column": 0
        },
        "end": {
          "line": 151,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concat.js.map",
      "range": [
        7133,
        7167
      ],
      "loc": {
        "start": {
          "line": 163,
          "column": 0
        },
        "end": {
          "line": 163,
          "column": 34
        }
      }
    }
  ]
}