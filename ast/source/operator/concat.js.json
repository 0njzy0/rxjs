{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "range": [
            9,
            20
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          28,
          49
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 49
          }
        }
      },
      "range": [
        0,
        50
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              60,
              75
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              60,
              75
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 24
              }
            }
          },
          "range": [
            60,
            75
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../observable/ArrayObservable",
        "raw": "'../observable/ArrayObservable'",
        "range": [
          83,
          114
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 32
          },
          "end": {
            "line": 2,
            "column": 63
          }
        }
      },
      "range": [
        51,
        115
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 64
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              125,
              141
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              125,
              141
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 25
              }
            }
          },
          "range": [
            125,
            141
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeAll",
        "raw": "'./mergeAll'",
        "range": [
          149,
          161
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 33
          },
          "end": {
            "line": 3,
            "column": 45
          }
        }
      },
      "range": [
        116,
        162
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 46
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:disable:max-line-length ",
          "range": [
            163,
            199
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 36
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
          "range": [
            200,
            2231
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 53,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concat",
          "range": [
            2248,
            2254
          ],
          "loc": {
            "start": {
              "line": 54,
              "column": 16
            },
            "end": {
              "line": 54,
              "column": 22
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                2258,
                2269
              ],
              "loc": {
                "start": {
                  "line": 54,
                  "column": 26
                },
                "end": {
                  "line": 54,
                  "column": 37
                }
              }
            },
            "range": [
              2255,
              2269
            ],
            "loc": {
              "start": {
                "line": 54,
                "column": 23
              },
              "end": {
                "line": 54,
                "column": 37
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression",
                      "range": [
                        2284,
                        2288
                      ],
                      "loc": {
                        "start": {
                          "line": 55,
                          "column": 11
                        },
                        "end": {
                          "line": 55,
                          "column": 15
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "lift",
                      "range": [
                        2289,
                        2293
                      ],
                      "loc": {
                        "start": {
                          "line": 55,
                          "column": 16
                        },
                        "end": {
                          "line": 55,
                          "column": 20
                        }
                      }
                    },
                    "range": [
                      2284,
                      2293
                    ],
                    "loc": {
                      "start": {
                        "line": 55,
                        "column": 11
                      },
                      "end": {
                        "line": 55,
                        "column": 20
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "call",
                    "range": [
                      2294,
                      2298
                    ],
                    "loc": {
                      "start": {
                        "line": 55,
                        "column": 21
                      },
                      "end": {
                        "line": 55,
                        "column": 25
                      }
                    }
                  },
                  "range": [
                    2284,
                    2298
                  ],
                  "loc": {
                    "start": {
                      "line": 55,
                      "column": 11
                    },
                    "end": {
                      "line": 55,
                      "column": 25
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "concatStatic",
                      "range": [
                        2299,
                        2311
                      ],
                      "loc": {
                        "start": {
                          "line": 55,
                          "column": 26
                        },
                        "end": {
                          "line": 55,
                          "column": 38
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          2312,
                          2316
                        ],
                        "loc": {
                          "start": {
                            "line": 55,
                            "column": 39
                          },
                          "end": {
                            "line": 55,
                            "column": 43
                          }
                        }
                      },
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            2321,
                            2332
                          ],
                          "loc": {
                            "start": {
                              "line": 55,
                              "column": 48
                            },
                            "end": {
                              "line": 55,
                              "column": 59
                            }
                          }
                        },
                        "range": [
                          2318,
                          2332
                        ],
                        "loc": {
                          "start": {
                            "line": 55,
                            "column": 45
                          },
                          "end": {
                            "line": 55,
                            "column": 59
                          }
                        }
                      }
                    ],
                    "range": [
                      2299,
                      2333
                    ],
                    "loc": {
                      "start": {
                        "line": 55,
                        "column": 26
                      },
                      "end": {
                        "line": 55,
                        "column": 60
                      }
                    }
                  }
                ],
                "range": [
                  2284,
                  2334
                ],
                "loc": {
                  "start": {
                    "line": 55,
                    "column": 11
                  },
                  "end": {
                    "line": 55,
                    "column": 61
                  }
                }
              },
              "range": [
                2277,
                2335
              ],
              "loc": {
                "start": {
                  "line": 55,
                  "column": 4
                },
                "end": {
                  "line": 55,
                  "column": 62
                }
              }
            }
          ],
          "range": [
            2271,
            2337
          ],
          "loc": {
            "start": {
              "line": 54,
              "column": 39
            },
            "end": {
              "line": 56,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2239,
          2337
        ],
        "loc": {
          "start": {
            "line": 54,
            "column": 7
          },
          "end": {
            "line": 56,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:disable:max-line-length ",
            "range": [
              163,
              199
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 4,
                "column": 36
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
            "range": [
              200,
              2231
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 53,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2338,
              2373
            ],
            "loc": {
              "start": {
                "line": 57,
                "column": 0
              },
              "end": {
                "line": 57,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
            "range": [
              2374,
              4455
            ],
            "loc": {
              "start": {
                "line": 58,
                "column": 0
              },
              "end": {
                "line": 107,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2232,
        2337
      ],
      "loc": {
        "start": {
          "line": 54,
          "column": 0
        },
        "end": {
          "line": 56,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:disable:max-line-length ",
          "range": [
            163,
            199
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 36
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
          "range": [
            200,
            2231
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 53,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2338,
            2373
          ],
          "loc": {
            "start": {
              "line": 57,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            2374,
            4455
          ],
          "loc": {
            "start": {
              "line": 58,
              "column": 0
            },
            "end": {
              "line": 107,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concatStatic",
          "range": [
            4472,
            4484
          ],
          "loc": {
            "start": {
              "line": 108,
              "column": 16
            },
            "end": {
              "line": 108,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                4488,
                4499
              ],
              "loc": {
                "start": {
                  "line": 108,
                  "column": 32
                },
                "end": {
                  "line": 108,
                  "column": 43
                }
              }
            },
            "range": [
              4485,
              4499
            ],
            "loc": {
              "start": {
                "line": 108,
                "column": 29
              },
              "end": {
                "line": 108,
                "column": 43
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      4511,
                      4520
                    ],
                    "loc": {
                      "start": {
                        "line": 109,
                        "column": 8
                      },
                      "end": {
                        "line": 109,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      4523,
                      4527
                    ],
                    "loc": {
                      "start": {
                        "line": 109,
                        "column": 20
                      },
                      "end": {
                        "line": 109,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    4511,
                    4527
                  ],
                  "loc": {
                    "start": {
                      "line": 109,
                      "column": 8
                    },
                    "end": {
                      "line": 109,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4507,
                4528
              ],
              "loc": {
                "start": {
                  "line": 109,
                  "column": 4
                },
                "end": {
                  "line": 109,
                  "column": 25
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "args",
                    "range": [
                      4537,
                      4541
                    ],
                    "loc": {
                      "start": {
                        "line": 110,
                        "column": 8
                      },
                      "end": {
                        "line": 110,
                        "column": 12
                      }
                    }
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "observables",
                    "range": [
                      4544,
                      4555
                    ],
                    "loc": {
                      "start": {
                        "line": 110,
                        "column": 15
                      },
                      "end": {
                        "line": 110,
                        "column": 26
                      }
                    }
                  },
                  "range": [
                    4537,
                    4555
                  ],
                  "loc": {
                    "start": {
                      "line": 110,
                      "column": 8
                    },
                    "end": {
                      "line": 110,
                      "column": 26
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4533,
                4556
              ],
              "loc": {
                "start": {
                  "line": 110,
                  "column": 4
                },
                "end": {
                  "line": 110,
                  "column": 27
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    4565,
                    4576
                  ],
                  "loc": {
                    "start": {
                      "line": 111,
                      "column": 8
                    },
                    "end": {
                      "line": 111,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "args",
                      "range": [
                        4577,
                        4581
                      ],
                      "loc": {
                        "start": {
                          "line": 111,
                          "column": 20
                        },
                        "end": {
                          "line": 111,
                          "column": 24
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            4582,
                            4593
                          ],
                          "loc": {
                            "start": {
                              "line": 111,
                              "column": 25
                            },
                            "end": {
                              "line": 111,
                              "column": 36
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            4594,
                            4600
                          ],
                          "loc": {
                            "start": {
                              "line": 111,
                              "column": 37
                            },
                            "end": {
                              "line": 111,
                              "column": 43
                            }
                          }
                        },
                        "range": [
                          4582,
                          4600
                        ],
                        "loc": {
                          "start": {
                            "line": 111,
                            "column": 25
                          },
                          "end": {
                            "line": 111,
                            "column": 43
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          4603,
                          4604
                        ],
                        "loc": {
                          "start": {
                            "line": 111,
                            "column": 46
                          },
                          "end": {
                            "line": 111,
                            "column": 47
                          }
                        }
                      },
                      "range": [
                        4582,
                        4604
                      ],
                      "loc": {
                        "start": {
                          "line": 111,
                          "column": 25
                        },
                        "end": {
                          "line": 111,
                          "column": 47
                        }
                      }
                    },
                    "range": [
                      4577,
                      4605
                    ],
                    "loc": {
                      "start": {
                        "line": 111,
                        "column": 20
                      },
                      "end": {
                        "line": 111,
                        "column": 48
                      }
                    }
                  }
                ],
                "range": [
                  4565,
                  4606
                ],
                "loc": {
                  "start": {
                    "line": 111,
                    "column": 8
                  },
                  "end": {
                    "line": 111,
                    "column": 49
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4618,
                          4627
                        ],
                        "loc": {
                          "start": {
                            "line": 112,
                            "column": 8
                          },
                          "end": {
                            "line": 112,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "args",
                            "range": [
                              4630,
                              4634
                            ],
                            "loc": {
                              "start": {
                                "line": 112,
                                "column": 20
                              },
                              "end": {
                                "line": 112,
                                "column": 24
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              4635,
                              4638
                            ],
                            "loc": {
                              "start": {
                                "line": 112,
                                "column": 25
                              },
                              "end": {
                                "line": 112,
                                "column": 28
                              }
                            }
                          },
                          "range": [
                            4630,
                            4638
                          ],
                          "loc": {
                            "start": {
                              "line": 112,
                              "column": 20
                            },
                            "end": {
                              "line": 112,
                              "column": 28
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          4630,
                          4640
                        ],
                        "loc": {
                          "start": {
                            "line": 112,
                            "column": 20
                          },
                          "end": {
                            "line": 112,
                            "column": 30
                          }
                        }
                      },
                      "range": [
                        4618,
                        4640
                      ],
                      "loc": {
                        "start": {
                          "line": 112,
                          "column": 8
                        },
                        "end": {
                          "line": 112,
                          "column": 30
                        }
                      }
                    },
                    "range": [
                      4618,
                      4641
                    ],
                    "loc": {
                      "start": {
                        "line": 112,
                        "column": 8
                      },
                      "end": {
                        "line": 112,
                        "column": 31
                      }
                    }
                  }
                ],
                "range": [
                  4608,
                  4647
                ],
                "loc": {
                  "start": {
                    "line": 111,
                    "column": 51
                  },
                  "end": {
                    "line": 113,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4561,
                4647
              ],
              "loc": {
                "start": {
                  "line": 111,
                  "column": 4
                },
                "end": {
                  "line": 113,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      4656,
                      4665
                    ],
                    "loc": {
                      "start": {
                        "line": 114,
                        "column": 8
                      },
                      "end": {
                        "line": 114,
                        "column": 17
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      4670,
                      4674
                    ],
                    "loc": {
                      "start": {
                        "line": 114,
                        "column": 22
                      },
                      "end": {
                        "line": 114,
                        "column": 26
                      }
                    }
                  },
                  "range": [
                    4656,
                    4674
                  ],
                  "loc": {
                    "start": {
                      "line": 114,
                      "column": 8
                    },
                    "end": {
                      "line": 114,
                      "column": 26
                    }
                  }
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        4678,
                        4689
                      ],
                      "loc": {
                        "start": {
                          "line": 114,
                          "column": 30
                        },
                        "end": {
                          "line": 114,
                          "column": 41
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length",
                      "range": [
                        4690,
                        4696
                      ],
                      "loc": {
                        "start": {
                          "line": 114,
                          "column": 42
                        },
                        "end": {
                          "line": 114,
                          "column": 48
                        }
                      }
                    },
                    "range": [
                      4678,
                      4696
                    ],
                    "loc": {
                      "start": {
                        "line": 114,
                        "column": 30
                      },
                      "end": {
                        "line": 114,
                        "column": 48
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "range": [
                      4701,
                      4702
                    ],
                    "loc": {
                      "start": {
                        "line": 114,
                        "column": 53
                      },
                      "end": {
                        "line": 114,
                        "column": 54
                      }
                    }
                  },
                  "range": [
                    4678,
                    4702
                  ],
                  "loc": {
                    "start": {
                      "line": 114,
                      "column": 30
                    },
                    "end": {
                      "line": 114,
                      "column": 54
                    }
                  }
                },
                "range": [
                  4656,
                  4702
                ],
                "loc": {
                  "start": {
                    "line": 114,
                    "column": 8
                  },
                  "end": {
                    "line": 114,
                    "column": 54
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4721,
                          4732
                        ],
                        "loc": {
                          "start": {
                            "line": 115,
                            "column": 15
                          },
                          "end": {
                            "line": 115,
                            "column": 26
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          4733,
                          4734
                        ],
                        "loc": {
                          "start": {
                            "line": 115,
                            "column": 27
                          },
                          "end": {
                            "line": 115,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        4721,
                        4735
                      ],
                      "loc": {
                        "start": {
                          "line": 115,
                          "column": 15
                        },
                        "end": {
                          "line": 115,
                          "column": 29
                        }
                      }
                    },
                    "range": [
                      4714,
                      4736
                    ],
                    "loc": {
                      "start": {
                        "line": 115,
                        "column": 8
                      },
                      "end": {
                        "line": 115,
                        "column": 30
                      }
                    }
                  }
                ],
                "range": [
                  4704,
                  4742
                ],
                "loc": {
                  "start": {
                    "line": 114,
                    "column": 56
                  },
                  "end": {
                    "line": 116,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4652,
                4742
              ],
              "loc": {
                "start": {
                  "line": 114,
                  "column": 4
                },
                "end": {
                  "line": 116,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        4758,
                        4773
                      ],
                      "loc": {
                        "start": {
                          "line": 117,
                          "column": 15
                        },
                        "end": {
                          "line": 117,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4774,
                          4785
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 31
                          },
                          "end": {
                            "line": 117,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4787,
                          4796
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 44
                          },
                          "end": {
                            "line": 117,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      4754,
                      4797
                    ],
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 11
                      },
                      "end": {
                        "line": 117,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      4798,
                      4802
                    ],
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 55
                      },
                      "end": {
                        "line": 117,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    4754,
                    4802
                  ],
                  "loc": {
                    "start": {
                      "line": 117,
                      "column": 11
                    },
                    "end": {
                      "line": 117,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeAllOperator",
                      "range": [
                        4807,
                        4823
                      ],
                      "loc": {
                        "start": {
                          "line": 117,
                          "column": 64
                        },
                        "end": {
                          "line": 117,
                          "column": 80
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          4824,
                          4825
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 81
                          },
                          "end": {
                            "line": 117,
                            "column": 82
                          }
                        }
                      }
                    ],
                    "range": [
                      4803,
                      4826
                    ],
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 60
                      },
                      "end": {
                        "line": 117,
                        "column": 83
                      }
                    }
                  }
                ],
                "range": [
                  4754,
                  4827
                ],
                "loc": {
                  "start": {
                    "line": 117,
                    "column": 11
                  },
                  "end": {
                    "line": 117,
                    "column": 84
                  }
                }
              },
              "range": [
                4747,
                4828
              ],
              "loc": {
                "start": {
                  "line": 117,
                  "column": 4
                },
                "end": {
                  "line": 117,
                  "column": 85
                }
              }
            }
          ],
          "range": [
            4501,
            4830
          ],
          "loc": {
            "start": {
              "line": 108,
              "column": 45
            },
            "end": {
              "line": 118,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          4463,
          4830
        ],
        "loc": {
          "start": {
            "line": 108,
            "column": 7
          },
          "end": {
            "line": 118,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2338,
              2373
            ],
            "loc": {
              "start": {
                "line": 57,
                "column": 0
              },
              "end": {
                "line": 57,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
            "range": [
              2374,
              4455
            ],
            "loc": {
              "start": {
                "line": 58,
                "column": 0
              },
              "end": {
                "line": 107,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concat.js.map",
            "range": [
              4831,
              4865
            ],
            "loc": {
              "start": {
                "line": 119,
                "column": 0
              },
              "end": {
                "line": 119,
                "column": 34
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        4456,
        4830
      ],
      "loc": {
        "start": {
          "line": 108,
          "column": 0
        },
        "end": {
          "line": 118,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2338,
            2373
          ],
          "loc": {
            "start": {
              "line": 57,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            2374,
            4455
          ],
          "loc": {
            "start": {
              "line": 58,
              "column": 0
            },
            "end": {
              "line": 107,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concat.js.map",
          "range": [
            4831,
            4865
          ],
          "loc": {
            "start": {
              "line": 119,
              "column": 0
            },
            "end": {
              "line": 119,
              "column": 34
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    4830
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 118,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:disable:max-line-length ",
      "range": [
        163,
        199
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 36
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
      "range": [
        200,
        2231
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 53,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        2338,
        2373
      ],
      "loc": {
        "start": {
          "line": 57,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
      "range": [
        2374,
        4455
      ],
      "loc": {
        "start": {
          "line": 58,
          "column": 0
        },
        "end": {
          "line": 107,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concat.js.map",
      "range": [
        4831,
        4865
      ],
      "loc": {
        "start": {
          "line": 119,
          "column": 0
        },
        "end": {
          "line": 119,
          "column": 34
        }
      }
    }
  ]
}