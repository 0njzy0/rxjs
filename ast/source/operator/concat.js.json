{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "range": [
            9,
            20
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          28,
          49
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 49
          }
        }
      },
      "range": [
        0,
        50
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              60,
              75
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              60,
              75
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 24
              }
            }
          },
          "range": [
            60,
            75
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../observable/ArrayObservable",
        "raw": "'../observable/ArrayObservable'",
        "range": [
          83,
          114
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 32
          },
          "end": {
            "line": 2,
            "column": 63
          }
        }
      },
      "range": [
        51,
        115
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 64
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              125,
              141
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              125,
              141
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 25
              }
            }
          },
          "range": [
            125,
            141
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeAll",
        "raw": "'./mergeAll'",
        "range": [
          149,
          161
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 33
          },
          "end": {
            "line": 3,
            "column": 45
          }
        }
      },
      "range": [
        116,
        162
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 46
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:disable:max-line-length ",
          "range": [
            163,
            199
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 36
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
          "range": [
            200,
            1925
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 44,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concat",
          "range": [
            1942,
            1948
          ],
          "loc": {
            "start": {
              "line": 45,
              "column": 16
            },
            "end": {
              "line": 45,
              "column": 22
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                1952,
                1963
              ],
              "loc": {
                "start": {
                  "line": 45,
                  "column": 26
                },
                "end": {
                  "line": 45,
                  "column": 37
                }
              }
            },
            "range": [
              1949,
              1963
            ],
            "loc": {
              "start": {
                "line": 45,
                "column": 23
              },
              "end": {
                "line": 45,
                "column": 37
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression",
                      "range": [
                        1978,
                        1982
                      ],
                      "loc": {
                        "start": {
                          "line": 46,
                          "column": 11
                        },
                        "end": {
                          "line": 46,
                          "column": 15
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "lift",
                      "range": [
                        1983,
                        1987
                      ],
                      "loc": {
                        "start": {
                          "line": 46,
                          "column": 16
                        },
                        "end": {
                          "line": 46,
                          "column": 20
                        }
                      }
                    },
                    "range": [
                      1978,
                      1987
                    ],
                    "loc": {
                      "start": {
                        "line": 46,
                        "column": 11
                      },
                      "end": {
                        "line": 46,
                        "column": 20
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "call",
                    "range": [
                      1988,
                      1992
                    ],
                    "loc": {
                      "start": {
                        "line": 46,
                        "column": 21
                      },
                      "end": {
                        "line": 46,
                        "column": 25
                      }
                    }
                  },
                  "range": [
                    1978,
                    1992
                  ],
                  "loc": {
                    "start": {
                      "line": 46,
                      "column": 11
                    },
                    "end": {
                      "line": 46,
                      "column": 25
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "concatStatic",
                      "range": [
                        1993,
                        2005
                      ],
                      "loc": {
                        "start": {
                          "line": 46,
                          "column": 26
                        },
                        "end": {
                          "line": 46,
                          "column": 38
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          2006,
                          2010
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 39
                          },
                          "end": {
                            "line": 46,
                            "column": 43
                          }
                        }
                      },
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            2015,
                            2026
                          ],
                          "loc": {
                            "start": {
                              "line": 46,
                              "column": 48
                            },
                            "end": {
                              "line": 46,
                              "column": 59
                            }
                          }
                        },
                        "range": [
                          2012,
                          2026
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 45
                          },
                          "end": {
                            "line": 46,
                            "column": 59
                          }
                        }
                      }
                    ],
                    "range": [
                      1993,
                      2027
                    ],
                    "loc": {
                      "start": {
                        "line": 46,
                        "column": 26
                      },
                      "end": {
                        "line": 46,
                        "column": 60
                      }
                    }
                  }
                ],
                "range": [
                  1978,
                  2028
                ],
                "loc": {
                  "start": {
                    "line": 46,
                    "column": 11
                  },
                  "end": {
                    "line": 46,
                    "column": 61
                  }
                }
              },
              "range": [
                1971,
                2029
              ],
              "loc": {
                "start": {
                  "line": 46,
                  "column": 4
                },
                "end": {
                  "line": 46,
                  "column": 62
                }
              }
            }
          ],
          "range": [
            1965,
            2031
          ],
          "loc": {
            "start": {
              "line": 45,
              "column": 39
            },
            "end": {
              "line": 47,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1933,
          2031
        ],
        "loc": {
          "start": {
            "line": 45,
            "column": 7
          },
          "end": {
            "line": 47,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:disable:max-line-length ",
            "range": [
              163,
              199
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 4,
                "column": 36
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
            "range": [
              200,
              1925
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 44,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2032,
              2067
            ],
            "loc": {
              "start": {
                "line": 48,
                "column": 0
              },
              "end": {
                "line": 48,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
            "range": [
              2068,
              3852
            ],
            "loc": {
              "start": {
                "line": 49,
                "column": 0
              },
              "end": {
                "line": 89,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1926,
        2031
      ],
      "loc": {
        "start": {
          "line": 45,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:disable:max-line-length ",
          "range": [
            163,
            199
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 36
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
          "range": [
            200,
            1925
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 44,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2032,
            2067
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            2068,
            3852
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 0
            },
            "end": {
              "line": 89,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concatStatic",
          "range": [
            3869,
            3881
          ],
          "loc": {
            "start": {
              "line": 90,
              "column": 16
            },
            "end": {
              "line": 90,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                3885,
                3896
              ],
              "loc": {
                "start": {
                  "line": 90,
                  "column": 32
                },
                "end": {
                  "line": 90,
                  "column": 43
                }
              }
            },
            "range": [
              3882,
              3896
            ],
            "loc": {
              "start": {
                "line": 90,
                "column": 29
              },
              "end": {
                "line": 90,
                "column": 43
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      3908,
                      3917
                    ],
                    "loc": {
                      "start": {
                        "line": 91,
                        "column": 8
                      },
                      "end": {
                        "line": 91,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      3920,
                      3924
                    ],
                    "loc": {
                      "start": {
                        "line": 91,
                        "column": 20
                      },
                      "end": {
                        "line": 91,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    3908,
                    3924
                  ],
                  "loc": {
                    "start": {
                      "line": 91,
                      "column": 8
                    },
                    "end": {
                      "line": 91,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                3904,
                3925
              ],
              "loc": {
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 91,
                  "column": 25
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "args",
                    "range": [
                      3934,
                      3938
                    ],
                    "loc": {
                      "start": {
                        "line": 92,
                        "column": 8
                      },
                      "end": {
                        "line": 92,
                        "column": 12
                      }
                    }
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "observables",
                    "range": [
                      3941,
                      3952
                    ],
                    "loc": {
                      "start": {
                        "line": 92,
                        "column": 15
                      },
                      "end": {
                        "line": 92,
                        "column": 26
                      }
                    }
                  },
                  "range": [
                    3934,
                    3952
                  ],
                  "loc": {
                    "start": {
                      "line": 92,
                      "column": 8
                    },
                    "end": {
                      "line": 92,
                      "column": 26
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                3930,
                3953
              ],
              "loc": {
                "start": {
                  "line": 92,
                  "column": 4
                },
                "end": {
                  "line": 92,
                  "column": 27
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    3962,
                    3973
                  ],
                  "loc": {
                    "start": {
                      "line": 93,
                      "column": 8
                    },
                    "end": {
                      "line": 93,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "args",
                      "range": [
                        3974,
                        3978
                      ],
                      "loc": {
                        "start": {
                          "line": 93,
                          "column": 20
                        },
                        "end": {
                          "line": 93,
                          "column": 24
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            3979,
                            3990
                          ],
                          "loc": {
                            "start": {
                              "line": 93,
                              "column": 25
                            },
                            "end": {
                              "line": 93,
                              "column": 36
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            3991,
                            3997
                          ],
                          "loc": {
                            "start": {
                              "line": 93,
                              "column": 37
                            },
                            "end": {
                              "line": 93,
                              "column": 43
                            }
                          }
                        },
                        "range": [
                          3979,
                          3997
                        ],
                        "loc": {
                          "start": {
                            "line": 93,
                            "column": 25
                          },
                          "end": {
                            "line": 93,
                            "column": 43
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          4000,
                          4001
                        ],
                        "loc": {
                          "start": {
                            "line": 93,
                            "column": 46
                          },
                          "end": {
                            "line": 93,
                            "column": 47
                          }
                        }
                      },
                      "range": [
                        3979,
                        4001
                      ],
                      "loc": {
                        "start": {
                          "line": 93,
                          "column": 25
                        },
                        "end": {
                          "line": 93,
                          "column": 47
                        }
                      }
                    },
                    "range": [
                      3974,
                      4002
                    ],
                    "loc": {
                      "start": {
                        "line": 93,
                        "column": 20
                      },
                      "end": {
                        "line": 93,
                        "column": 48
                      }
                    }
                  }
                ],
                "range": [
                  3962,
                  4003
                ],
                "loc": {
                  "start": {
                    "line": 93,
                    "column": 8
                  },
                  "end": {
                    "line": 93,
                    "column": 49
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4015,
                          4024
                        ],
                        "loc": {
                          "start": {
                            "line": 94,
                            "column": 8
                          },
                          "end": {
                            "line": 94,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "args",
                            "range": [
                              4027,
                              4031
                            ],
                            "loc": {
                              "start": {
                                "line": 94,
                                "column": 20
                              },
                              "end": {
                                "line": 94,
                                "column": 24
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              4032,
                              4035
                            ],
                            "loc": {
                              "start": {
                                "line": 94,
                                "column": 25
                              },
                              "end": {
                                "line": 94,
                                "column": 28
                              }
                            }
                          },
                          "range": [
                            4027,
                            4035
                          ],
                          "loc": {
                            "start": {
                              "line": 94,
                              "column": 20
                            },
                            "end": {
                              "line": 94,
                              "column": 28
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          4027,
                          4037
                        ],
                        "loc": {
                          "start": {
                            "line": 94,
                            "column": 20
                          },
                          "end": {
                            "line": 94,
                            "column": 30
                          }
                        }
                      },
                      "range": [
                        4015,
                        4037
                      ],
                      "loc": {
                        "start": {
                          "line": 94,
                          "column": 8
                        },
                        "end": {
                          "line": 94,
                          "column": 30
                        }
                      }
                    },
                    "range": [
                      4015,
                      4038
                    ],
                    "loc": {
                      "start": {
                        "line": 94,
                        "column": 8
                      },
                      "end": {
                        "line": 94,
                        "column": 31
                      }
                    }
                  }
                ],
                "range": [
                  4005,
                  4044
                ],
                "loc": {
                  "start": {
                    "line": 93,
                    "column": 51
                  },
                  "end": {
                    "line": 95,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                3958,
                4044
              ],
              "loc": {
                "start": {
                  "line": 93,
                  "column": 4
                },
                "end": {
                  "line": 95,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      4053,
                      4062
                    ],
                    "loc": {
                      "start": {
                        "line": 96,
                        "column": 8
                      },
                      "end": {
                        "line": 96,
                        "column": 17
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      4067,
                      4071
                    ],
                    "loc": {
                      "start": {
                        "line": 96,
                        "column": 22
                      },
                      "end": {
                        "line": 96,
                        "column": 26
                      }
                    }
                  },
                  "range": [
                    4053,
                    4071
                  ],
                  "loc": {
                    "start": {
                      "line": 96,
                      "column": 8
                    },
                    "end": {
                      "line": 96,
                      "column": 26
                    }
                  }
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        4075,
                        4086
                      ],
                      "loc": {
                        "start": {
                          "line": 96,
                          "column": 30
                        },
                        "end": {
                          "line": 96,
                          "column": 41
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length",
                      "range": [
                        4087,
                        4093
                      ],
                      "loc": {
                        "start": {
                          "line": 96,
                          "column": 42
                        },
                        "end": {
                          "line": 96,
                          "column": 48
                        }
                      }
                    },
                    "range": [
                      4075,
                      4093
                    ],
                    "loc": {
                      "start": {
                        "line": 96,
                        "column": 30
                      },
                      "end": {
                        "line": 96,
                        "column": 48
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "range": [
                      4098,
                      4099
                    ],
                    "loc": {
                      "start": {
                        "line": 96,
                        "column": 53
                      },
                      "end": {
                        "line": 96,
                        "column": 54
                      }
                    }
                  },
                  "range": [
                    4075,
                    4099
                  ],
                  "loc": {
                    "start": {
                      "line": 96,
                      "column": 30
                    },
                    "end": {
                      "line": 96,
                      "column": 54
                    }
                  }
                },
                "range": [
                  4053,
                  4099
                ],
                "loc": {
                  "start": {
                    "line": 96,
                    "column": 8
                  },
                  "end": {
                    "line": 96,
                    "column": 54
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4118,
                          4129
                        ],
                        "loc": {
                          "start": {
                            "line": 97,
                            "column": 15
                          },
                          "end": {
                            "line": 97,
                            "column": 26
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          4130,
                          4131
                        ],
                        "loc": {
                          "start": {
                            "line": 97,
                            "column": 27
                          },
                          "end": {
                            "line": 97,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        4118,
                        4132
                      ],
                      "loc": {
                        "start": {
                          "line": 97,
                          "column": 15
                        },
                        "end": {
                          "line": 97,
                          "column": 29
                        }
                      }
                    },
                    "range": [
                      4111,
                      4133
                    ],
                    "loc": {
                      "start": {
                        "line": 97,
                        "column": 8
                      },
                      "end": {
                        "line": 97,
                        "column": 30
                      }
                    }
                  }
                ],
                "range": [
                  4101,
                  4139
                ],
                "loc": {
                  "start": {
                    "line": 96,
                    "column": 56
                  },
                  "end": {
                    "line": 98,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4049,
                4139
              ],
              "loc": {
                "start": {
                  "line": 96,
                  "column": 4
                },
                "end": {
                  "line": 98,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        4155,
                        4170
                      ],
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 15
                        },
                        "end": {
                          "line": 99,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4171,
                          4182
                        ],
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 31
                          },
                          "end": {
                            "line": 99,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4184,
                          4193
                        ],
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 44
                          },
                          "end": {
                            "line": 99,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      4151,
                      4194
                    ],
                    "loc": {
                      "start": {
                        "line": 99,
                        "column": 11
                      },
                      "end": {
                        "line": 99,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      4195,
                      4199
                    ],
                    "loc": {
                      "start": {
                        "line": 99,
                        "column": 55
                      },
                      "end": {
                        "line": 99,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    4151,
                    4199
                  ],
                  "loc": {
                    "start": {
                      "line": 99,
                      "column": 11
                    },
                    "end": {
                      "line": 99,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeAllOperator",
                      "range": [
                        4204,
                        4220
                      ],
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 64
                        },
                        "end": {
                          "line": 99,
                          "column": 80
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          4221,
                          4222
                        ],
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 81
                          },
                          "end": {
                            "line": 99,
                            "column": 82
                          }
                        }
                      }
                    ],
                    "range": [
                      4200,
                      4223
                    ],
                    "loc": {
                      "start": {
                        "line": 99,
                        "column": 60
                      },
                      "end": {
                        "line": 99,
                        "column": 83
                      }
                    }
                  }
                ],
                "range": [
                  4151,
                  4224
                ],
                "loc": {
                  "start": {
                    "line": 99,
                    "column": 11
                  },
                  "end": {
                    "line": 99,
                    "column": 84
                  }
                }
              },
              "range": [
                4144,
                4225
              ],
              "loc": {
                "start": {
                  "line": 99,
                  "column": 4
                },
                "end": {
                  "line": 99,
                  "column": 85
                }
              }
            }
          ],
          "range": [
            3898,
            4227
          ],
          "loc": {
            "start": {
              "line": 90,
              "column": 45
            },
            "end": {
              "line": 100,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          3860,
          4227
        ],
        "loc": {
          "start": {
            "line": 90,
            "column": 7
          },
          "end": {
            "line": 100,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              2032,
              2067
            ],
            "loc": {
              "start": {
                "line": 48,
                "column": 0
              },
              "end": {
                "line": 48,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
            "range": [
              2068,
              3852
            ],
            "loc": {
              "start": {
                "line": 49,
                "column": 0
              },
              "end": {
                "line": 89,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concat.js.map",
            "range": [
              4228,
              4262
            ],
            "loc": {
              "start": {
                "line": 101,
                "column": 0
              },
              "end": {
                "line": 101,
                "column": 34
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        3853,
        4227
      ],
      "loc": {
        "start": {
          "line": 90,
          "column": 0
        },
        "end": {
          "line": 100,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            2032,
            2067
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            2068,
            3852
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 0
            },
            "end": {
              "line": 89,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concat.js.map",
          "range": [
            4228,
            4262
          ],
          "loc": {
            "start": {
              "line": 101,
              "column": 0
            },
            "end": {
              "line": 101,
              "column": 34
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    4227
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 100,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:disable:max-line-length ",
      "range": [
        163,
        199
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 36
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n ",
      "range": [
        200,
        1925
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 44,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        2032,
        2067
      ],
      "loc": {
        "start": {
          "line": 48,
          "column": 0
        },
        "end": {
          "line": 48,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
      "range": [
        2068,
        3852
      ],
      "loc": {
        "start": {
          "line": 49,
          "column": 0
        },
        "end": {
          "line": 89,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concat.js.map",
      "range": [
        4228,
        4262
      ],
      "loc": {
        "start": {
          "line": 101,
          "column": 0
        },
        "end": {
          "line": 101,
          "column": 34
        }
      }
    }
  ]
}