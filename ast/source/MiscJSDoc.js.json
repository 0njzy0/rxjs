{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "range": [
            9,
            19
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 19
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./Observable",
        "raw": "'./Observable'",
        "range": [
          27,
          41
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 27
          },
          "end": {
            "line": 1,
            "column": 41
          }
        }
      },
      "range": [
        0,
        42
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 42
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [],
      "source": {
        "type": "Literal",
        "value": "./scheduler/MiscJSDoc",
        "raw": "'./scheduler/MiscJSDoc'",
        "range": [
          50,
          73
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 7
          },
          "end": {
            "line": 2,
            "column": 30
          }
        }
      },
      "range": [
        43,
        74
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 31
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [],
      "source": {
        "type": "Literal",
        "value": "./observable/dom/MiscJSDoc",
        "raw": "'./observable/dom/MiscJSDoc'",
        "range": [
          82,
          110
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 7
          },
          "end": {
            "line": 3,
            "column": 35
          }
        }
      },
      "range": [
        75,
        111
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 36
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n ",
          "range": [
            112,
            206
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "ObservableDoc",
          "range": [
            220,
            233
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 13
            },
            "end": {
              "line": 9,
              "column": 26
            }
          }
        },
        "superClass": null,
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "create",
                "range": [
                  2354,
                  2360
                ],
                "loc": {
                  "start": {
                    "line": 56,
                    "column": 11
                  },
                  "end": {
                    "line": 56,
                    "column": 17
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "subscribe",
                    "range": [
                      2361,
                      2370
                    ],
                    "loc": {
                      "start": {
                        "line": 56,
                        "column": 18
                      },
                      "end": {
                        "line": 56,
                        "column": 27
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "Observable",
                          "range": [
                            2393,
                            2403
                          ],
                          "loc": {
                            "start": {
                              "line": 57,
                              "column": 19
                            },
                            "end": {
                              "line": 57,
                              "column": 29
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "subscribe",
                            "range": [
                              2404,
                              2413
                            ],
                            "loc": {
                              "start": {
                                "line": 57,
                                "column": 30
                              },
                              "end": {
                                "line": 57,
                                "column": 39
                              }
                            }
                          }
                        ],
                        "range": [
                          2389,
                          2414
                        ],
                        "loc": {
                          "start": {
                            "line": 57,
                            "column": 15
                          },
                          "end": {
                            "line": 57,
                            "column": 40
                          }
                        }
                      },
                      "range": [
                        2382,
                        2415
                      ],
                      "loc": {
                        "start": {
                          "line": 57,
                          "column": 8
                        },
                        "end": {
                          "line": 57,
                          "column": 41
                        }
                      }
                    }
                  ],
                  "range": [
                    2372,
                    2421
                  ],
                  "loc": {
                    "start": {
                      "line": 56,
                      "column": 29
                    },
                    "end": {
                      "line": 58,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  2360,
                  2421
                ],
                "loc": {
                  "start": {
                    "line": 56,
                    "column": 17
                  },
                  "end": {
                    "line": 58,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                2347,
                2421
              ],
              "loc": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Creates a new Observable that will execute the specified function when a\n     * {@link Subscriber} subscribes to it.\n     *\n     * <span class=\"informal\">Creates an Observable with custom logic given in\n     * the `subscribe` function.</span>\n     *\n     * <img src=\"./img/create.png\" width=\"100%\">\n     *\n     * `create` converts a `subscribe` function to an actual Observable. This is\n     * equivalent to calling the Observable constructor. Write the `subscribe`\n     * function so that it behaves as an Observable: It should invoke the\n     * Subscriber's `next`, `error`, and `complete` methods following the\n     * *Observable Contract*. A well-formed Observable must invoke either the\n     * Subscriber's `complete` method exactly once or its `error` method exactly\n     * once, and invoke nothing else thereafter.\n     *\n     * Most of the times you should not need to use `create` because existing\n     * creation operators (together with instance combination operators) allow you\n     * to create an Observable for most of the use cases. However, `create` is\n     * low-level and is able to create any Observable.\n     *\n     * @example <caption>Emit three random numbers, then complete.</caption>\n     * var result = Rx.Observable.create(function (subscriber) {\n     *   subscriber.next(Math.random());\n     *   subscriber.next(Math.random());\n     *   subscriber.next(Math.random());\n     *   subscriber.complete();\n     * });\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {function(subscriber: Subscriber): TeardownLogic} [subscribe] A\n     * function that accepts a {@link Subscriber}, and invokes its `next`,\n     * `error`, and `complete` methods as appropriate, and should return some\n     * logic for tear down, either as a {@link Subscription} or as a function.\n     * @return {Observable} An Observable that, when subscribed, will execute the\n     * specified function.\n     * @static true\n     * @name create\n     * @owner Observable\n     ",
                  "range": [
                    240,
                    2342
                  ],
                  "loc": {
                    "start": {
                      "line": 10,
                      "column": 4
                    },
                    "end": {
                      "line": 55,
                      "column": 7
                    }
                  }
                }
              ],
              "static": true
            }
          ],
          "range": [
            234,
            2429
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 27
            },
            "end": {
              "line": 60,
              "column": 1
            }
          }
        },
        "range": [
          214,
          2429
        ],
        "loc": {
          "start": {
            "line": 9,
            "column": 7
          },
          "end": {
            "line": 60,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n ",
            "range": [
              112,
              206
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 8,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * An interface for a consumer of push-based notifications delivered by an\n * {@link Observable}.\n *\n * ```ts\n * interface Observer<T> {\n *   isUnsubscribed?: boolean;\n *   next: (value: T) => void;\n *   error: (err: any) => void;\n *   complete: () => void;\n * }\n * ```\n *\n * An object conforming to the Observer interface is usually\n * given to the `observable.subscribe(observer)` method, and the Observable will\n * call the Observer's `next(value)` method to provide notifications. A\n * well-behaved Observable will call an Observer's `complete()` method exactly\n * once or the Observer's `error(err)` method exactly once, as the last\n * notification delivered.\n *\n * @interface\n * @name Observer\n * @noimport true\n ",
            "range": [
              2430,
              3155
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 0
              },
              "end": {
                "line": 84,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        207,
        2429
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n ",
          "range": [
            112,
            206
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * An interface for a consumer of push-based notifications delivered by an\n * {@link Observable}.\n *\n * ```ts\n * interface Observer<T> {\n *   isUnsubscribed?: boolean;\n *   next: (value: T) => void;\n *   error: (err: any) => void;\n *   complete: () => void;\n * }\n * ```\n *\n * An object conforming to the Observer interface is usually\n * given to the `observable.subscribe(observer)` method, and the Observable will\n * call the Observer's `next(value)` method to provide notifications. A\n * well-behaved Observable will call an Observer's `complete()` method exactly\n * once or the Observer's `error(err)` method exactly once, as the last\n * notification delivered.\n *\n * @interface\n * @name Observer\n * @noimport true\n ",
          "range": [
            2430,
            3155
          ],
          "loc": {
            "start": {
              "line": 61,
              "column": 0
            },
            "end": {
              "line": 84,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "ObserverDoc",
          "range": [
            3169,
            3180
          ],
          "loc": {
            "start": {
              "line": 85,
              "column": 13
            },
            "end": {
              "line": 85,
              "column": 24
            }
          }
        },
        "superClass": null,
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "constructor",
                "range": [
                  3187,
                  3198
                ],
                "loc": {
                  "start": {
                    "line": 86,
                    "column": 4
                  },
                  "end": {
                    "line": 86,
                    "column": 15
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression",
                            "range": [
                              3414,
                              3418
                            ],
                            "loc": {
                              "start": {
                                "line": 92,
                                "column": 8
                              },
                              "end": {
                                "line": 92,
                                "column": 12
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "isUnsubscribed",
                            "range": [
                              3419,
                              3433
                            ],
                            "loc": {
                              "start": {
                                "line": 92,
                                "column": 13
                              },
                              "end": {
                                "line": 92,
                                "column": 27
                              }
                            }
                          },
                          "range": [
                            3414,
                            3433
                          ],
                          "loc": {
                            "start": {
                              "line": 92,
                              "column": 8
                            },
                            "end": {
                              "line": 92,
                              "column": 27
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false",
                          "range": [
                            3436,
                            3441
                          ],
                          "loc": {
                            "start": {
                              "line": 92,
                              "column": 30
                            },
                            "end": {
                              "line": 92,
                              "column": 35
                            }
                          }
                        },
                        "range": [
                          3414,
                          3441
                        ],
                        "loc": {
                          "start": {
                            "line": 92,
                            "column": 8
                          },
                          "end": {
                            "line": 92,
                            "column": 35
                          }
                        }
                      },
                      "range": [
                        3414,
                        3442
                      ],
                      "loc": {
                        "start": {
                          "line": 92,
                          "column": 8
                        },
                        "end": {
                          "line": 92,
                          "column": 36
                        }
                      },
                      "leadingComments": [
                        {
                          "type": "Block",
                          "value": "*\n         * An optional flag to indicate whether this Observer, when used as a\n         * subscriber, has already been unsubscribed from its Observable.\n         * @type {boolean}\n         ",
                          "range": [
                            3211,
                            3405
                          ],
                          "loc": {
                            "start": {
                              "line": 87,
                              "column": 8
                            },
                            "end": {
                              "line": 91,
                              "column": 11
                            }
                          }
                        }
                      ]
                    }
                  ],
                  "range": [
                    3201,
                    3448
                  ],
                  "loc": {
                    "start": {
                      "line": 86,
                      "column": 18
                    },
                    "end": {
                      "line": 93,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  3198,
                  3448
                ],
                "loc": {
                  "start": {
                    "line": 86,
                    "column": 15
                  },
                  "end": {
                    "line": 93,
                    "column": 5
                  }
                }
              },
              "kind": "constructor",
              "computed": false,
              "range": [
                3187,
                3448
              ],
              "loc": {
                "start": {
                  "line": 86,
                  "column": 4
                },
                "end": {
                  "line": 93,
                  "column": 5
                }
              },
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * The callback to receive notifications of type `next` from the Observable,\n     * with a value. The Observable may call this method 0 or more times.\n     * @param {T} value The `next` value.\n     * @return {void}\n     ",
                  "range": [
                    3453,
                    3683
                  ],
                  "loc": {
                    "start": {
                      "line": 94,
                      "column": 4
                    },
                    "end": {
                      "line": 99,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "next",
                "range": [
                  3688,
                  3692
                ],
                "loc": {
                  "start": {
                    "line": 100,
                    "column": 4
                  },
                  "end": {
                    "line": 100,
                    "column": 8
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      3693,
                      3698
                    ],
                    "loc": {
                      "start": {
                        "line": 100,
                        "column": 9
                      },
                      "end": {
                        "line": 100,
                        "column": 14
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "void",
                        "argument": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "range": [
                            3722,
                            3723
                          ],
                          "loc": {
                            "start": {
                              "line": 101,
                              "column": 20
                            },
                            "end": {
                              "line": 101,
                              "column": 21
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          3717,
                          3723
                        ],
                        "loc": {
                          "start": {
                            "line": 101,
                            "column": 15
                          },
                          "end": {
                            "line": 101,
                            "column": 21
                          }
                        }
                      },
                      "range": [
                        3710,
                        3724
                      ],
                      "loc": {
                        "start": {
                          "line": 101,
                          "column": 8
                        },
                        "end": {
                          "line": 101,
                          "column": 22
                        }
                      }
                    }
                  ],
                  "range": [
                    3700,
                    3730
                  ],
                  "loc": {
                    "start": {
                      "line": 100,
                      "column": 16
                    },
                    "end": {
                      "line": 102,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  3692,
                  3730
                ],
                "loc": {
                  "start": {
                    "line": 100,
                    "column": 8
                  },
                  "end": {
                    "line": 102,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                3688,
                3730
              ],
              "loc": {
                "start": {
                  "line": 100,
                  "column": 4
                },
                "end": {
                  "line": 102,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * The callback to receive notifications of type `next` from the Observable,\n     * with a value. The Observable may call this method 0 or more times.\n     * @param {T} value The `next` value.\n     * @return {void}\n     ",
                  "range": [
                    3453,
                    3683
                  ],
                  "loc": {
                    "start": {
                      "line": 94,
                      "column": 4
                    },
                    "end": {
                      "line": 99,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * The callback to receive notifications of type `error` from the Observable,\n     * with an attached {@link Error}. Notifies the Observer that the Observable\n     * has experienced an error condition.\n     * @param {any} err The `error` exception.\n     * @return {void}\n     ",
                  "range": [
                    3735,
                    4021
                  ],
                  "loc": {
                    "start": {
                      "line": 103,
                      "column": 4
                    },
                    "end": {
                      "line": 109,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "error",
                "range": [
                  4026,
                  4031
                ],
                "loc": {
                  "start": {
                    "line": 110,
                    "column": 4
                  },
                  "end": {
                    "line": 110,
                    "column": 9
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "err",
                    "range": [
                      4032,
                      4035
                    ],
                    "loc": {
                      "start": {
                        "line": 110,
                        "column": 10
                      },
                      "end": {
                        "line": 110,
                        "column": 13
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "void",
                        "argument": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "range": [
                            4059,
                            4060
                          ],
                          "loc": {
                            "start": {
                              "line": 111,
                              "column": 20
                            },
                            "end": {
                              "line": 111,
                              "column": 21
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          4054,
                          4060
                        ],
                        "loc": {
                          "start": {
                            "line": 111,
                            "column": 15
                          },
                          "end": {
                            "line": 111,
                            "column": 21
                          }
                        }
                      },
                      "range": [
                        4047,
                        4061
                      ],
                      "loc": {
                        "start": {
                          "line": 111,
                          "column": 8
                        },
                        "end": {
                          "line": 111,
                          "column": 22
                        }
                      }
                    }
                  ],
                  "range": [
                    4037,
                    4067
                  ],
                  "loc": {
                    "start": {
                      "line": 110,
                      "column": 15
                    },
                    "end": {
                      "line": 112,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  4031,
                  4067
                ],
                "loc": {
                  "start": {
                    "line": 110,
                    "column": 9
                  },
                  "end": {
                    "line": 112,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                4026,
                4067
              ],
              "loc": {
                "start": {
                  "line": 110,
                  "column": 4
                },
                "end": {
                  "line": 112,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * The callback to receive notifications of type `error` from the Observable,\n     * with an attached {@link Error}. Notifies the Observer that the Observable\n     * has experienced an error condition.\n     * @param {any} err The `error` exception.\n     * @return {void}\n     ",
                  "range": [
                    3735,
                    4021
                  ],
                  "loc": {
                    "start": {
                      "line": 103,
                      "column": 4
                    },
                    "end": {
                      "line": 109,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * The callback to receive a valueless notification of type `complete` from\n     * the Observable. Notifies the Observer that the Observable has finished\n     * sending push-based notifications.\n     * @return {void}\n     ",
                  "range": [
                    4072,
                    4304
                  ],
                  "loc": {
                    "start": {
                      "line": 113,
                      "column": 4
                    },
                    "end": {
                      "line": 118,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "complete",
                "range": [
                  4309,
                  4317
                ],
                "loc": {
                  "start": {
                    "line": 119,
                    "column": 4
                  },
                  "end": {
                    "line": 119,
                    "column": 12
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "void",
                        "argument": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "range": [
                            4342,
                            4343
                          ],
                          "loc": {
                            "start": {
                              "line": 120,
                              "column": 20
                            },
                            "end": {
                              "line": 120,
                              "column": 21
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          4337,
                          4343
                        ],
                        "loc": {
                          "start": {
                            "line": 120,
                            "column": 15
                          },
                          "end": {
                            "line": 120,
                            "column": 21
                          }
                        }
                      },
                      "range": [
                        4330,
                        4344
                      ],
                      "loc": {
                        "start": {
                          "line": 120,
                          "column": 8
                        },
                        "end": {
                          "line": 120,
                          "column": 22
                        }
                      }
                    }
                  ],
                  "range": [
                    4320,
                    4350
                  ],
                  "loc": {
                    "start": {
                      "line": 119,
                      "column": 15
                    },
                    "end": {
                      "line": 121,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  4317,
                  4350
                ],
                "loc": {
                  "start": {
                    "line": 119,
                    "column": 12
                  },
                  "end": {
                    "line": 121,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                4309,
                4350
              ],
              "loc": {
                "start": {
                  "line": 119,
                  "column": 4
                },
                "end": {
                  "line": 121,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * The callback to receive a valueless notification of type `complete` from\n     * the Observable. Notifies the Observer that the Observable has finished\n     * sending push-based notifications.\n     * @return {void}\n     ",
                  "range": [
                    4072,
                    4304
                  ],
                  "loc": {
                    "start": {
                      "line": 113,
                      "column": 4
                    },
                    "end": {
                      "line": 118,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            3181,
            4352
          ],
          "loc": {
            "start": {
              "line": 85,
              "column": 25
            },
            "end": {
              "line": 122,
              "column": 1
            }
          }
        },
        "range": [
          3163,
          4352
        ],
        "loc": {
          "start": {
            "line": 85,
            "column": 7
          },
          "end": {
            "line": 122,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * An interface for a consumer of push-based notifications delivered by an\n * {@link Observable}.\n *\n * ```ts\n * interface Observer<T> {\n *   isUnsubscribed?: boolean;\n *   next: (value: T) => void;\n *   error: (err: any) => void;\n *   complete: () => void;\n * }\n * ```\n *\n * An object conforming to the Observer interface is usually\n * given to the `observable.subscribe(observer)` method, and the Observable will\n * call the Observer's `next(value)` method to provide notifications. A\n * well-behaved Observable will call an Observer's `complete()` method exactly\n * once or the Observer's `error(err)` method exactly once, as the last\n * notification delivered.\n *\n * @interface\n * @name Observer\n * @noimport true\n ",
            "range": [
              2430,
              3155
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 0
              },
              "end": {
                "line": 84,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * interface Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n *   flush(): void;\n *   active: boolean;\n *   actions: Action[];\n *   scheduledId: number;\n * }\n * ```\n *\n * @interface\n * @name Scheduler\n * @noimport true\n ",
            "range": [
              4353,
              4874
            ],
            "loc": {
              "start": {
                "line": 123,
                "column": 0
              },
              "end": {
                "line": 144,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        3156,
        4352
      ],
      "loc": {
        "start": {
          "line": 85,
          "column": 0
        },
        "end": {
          "line": 122,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * An interface for a consumer of push-based notifications delivered by an\n * {@link Observable}.\n *\n * ```ts\n * interface Observer<T> {\n *   isUnsubscribed?: boolean;\n *   next: (value: T) => void;\n *   error: (err: any) => void;\n *   complete: () => void;\n * }\n * ```\n *\n * An object conforming to the Observer interface is usually\n * given to the `observable.subscribe(observer)` method, and the Observable will\n * call the Observer's `next(value)` method to provide notifications. A\n * well-behaved Observable will call an Observer's `complete()` method exactly\n * once or the Observer's `error(err)` method exactly once, as the last\n * notification delivered.\n *\n * @interface\n * @name Observer\n * @noimport true\n ",
          "range": [
            2430,
            3155
          ],
          "loc": {
            "start": {
              "line": 61,
              "column": 0
            },
            "end": {
              "line": 84,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * interface Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n *   flush(): void;\n *   active: boolean;\n *   actions: Action[];\n *   scheduledId: number;\n * }\n * ```\n *\n * @interface\n * @name Scheduler\n * @noimport true\n ",
          "range": [
            4353,
            4874
          ],
          "loc": {
            "start": {
              "line": 123,
              "column": 0
            },
            "end": {
              "line": 144,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "SchedulerDoc",
          "range": [
            4888,
            4900
          ],
          "loc": {
            "start": {
              "line": 145,
              "column": 13
            },
            "end": {
              "line": 145,
              "column": 25
            }
          }
        },
        "superClass": null,
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "constructor",
                "range": [
                  4907,
                  4918
                ],
                "loc": {
                  "start": {
                    "line": 146,
                    "column": 4
                  },
                  "end": {
                    "line": 146,
                    "column": 15
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression",
                            "range": [
                              5095,
                              5099
                            ],
                            "loc": {
                              "start": {
                                "line": 152,
                                "column": 8
                              },
                              "end": {
                                "line": 152,
                                "column": 12
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "active",
                            "range": [
                              5100,
                              5106
                            ],
                            "loc": {
                              "start": {
                                "line": 152,
                                "column": 13
                              },
                              "end": {
                                "line": 152,
                                "column": 19
                              }
                            }
                          },
                          "range": [
                            5095,
                            5106
                          ],
                          "loc": {
                            "start": {
                              "line": 152,
                              "column": 8
                            },
                            "end": {
                              "line": 152,
                              "column": 19
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false",
                          "range": [
                            5109,
                            5114
                          ],
                          "loc": {
                            "start": {
                              "line": 152,
                              "column": 22
                            },
                            "end": {
                              "line": 152,
                              "column": 27
                            }
                          }
                        },
                        "range": [
                          5095,
                          5114
                        ],
                        "loc": {
                          "start": {
                            "line": 152,
                            "column": 8
                          },
                          "end": {
                            "line": 152,
                            "column": 27
                          }
                        }
                      },
                      "range": [
                        5095,
                        5115
                      ],
                      "loc": {
                        "start": {
                          "line": 152,
                          "column": 8
                        },
                        "end": {
                          "line": 152,
                          "column": 28
                        }
                      },
                      "leadingComments": [
                        {
                          "type": "Block",
                          "value": "*\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         ",
                          "range": [
                            4931,
                            5086
                          ],
                          "loc": {
                            "start": {
                              "line": 147,
                              "column": 8
                            },
                            "end": {
                              "line": 151,
                              "column": 11
                            }
                          }
                        }
                      ],
                      "trailingComments": [
                        {
                          "type": "Block",
                          "value": "*\n         * The queue of scheduled actions as an array.\n         * @type {Action[]}\n         ",
                          "range": [
                            5124,
                            5222
                          ],
                          "loc": {
                            "start": {
                              "line": 153,
                              "column": 8
                            },
                            "end": {
                              "line": 156,
                              "column": 11
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression",
                            "range": [
                              5231,
                              5235
                            ],
                            "loc": {
                              "start": {
                                "line": 157,
                                "column": 8
                              },
                              "end": {
                                "line": 157,
                                "column": 12
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "actions",
                            "range": [
                              5236,
                              5243
                            ],
                            "loc": {
                              "start": {
                                "line": 157,
                                "column": 13
                              },
                              "end": {
                                "line": 157,
                                "column": 20
                              }
                            }
                          },
                          "range": [
                            5231,
                            5243
                          ],
                          "loc": {
                            "start": {
                              "line": 157,
                              "column": 8
                            },
                            "end": {
                              "line": 157,
                              "column": 20
                            }
                          }
                        },
                        "right": {
                          "type": "ArrayExpression",
                          "elements": [],
                          "range": [
                            5246,
                            5248
                          ],
                          "loc": {
                            "start": {
                              "line": 157,
                              "column": 23
                            },
                            "end": {
                              "line": 157,
                              "column": 25
                            }
                          }
                        },
                        "range": [
                          5231,
                          5248
                        ],
                        "loc": {
                          "start": {
                            "line": 157,
                            "column": 8
                          },
                          "end": {
                            "line": 157,
                            "column": 25
                          }
                        }
                      },
                      "range": [
                        5231,
                        5249
                      ],
                      "loc": {
                        "start": {
                          "line": 157,
                          "column": 8
                        },
                        "end": {
                          "line": 157,
                          "column": 26
                        }
                      },
                      "leadingComments": [
                        {
                          "type": "Block",
                          "value": "*\n         * The queue of scheduled actions as an array.\n         * @type {Action[]}\n         ",
                          "range": [
                            5124,
                            5222
                          ],
                          "loc": {
                            "start": {
                              "line": 153,
                              "column": 8
                            },
                            "end": {
                              "line": 156,
                              "column": 11
                            }
                          }
                        }
                      ],
                      "trailingComments": [
                        {
                          "type": "Block",
                          "value": "*\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {number}\n         ",
                          "range": [
                            5258,
                            5482
                          ],
                          "loc": {
                            "start": {
                              "line": 158,
                              "column": 8
                            },
                            "end": {
                              "line": 163,
                              "column": 11
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression",
                            "range": [
                              5491,
                              5495
                            ],
                            "loc": {
                              "start": {
                                "line": 164,
                                "column": 8
                              },
                              "end": {
                                "line": 164,
                                "column": 12
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "scheduledId",
                            "range": [
                              5496,
                              5507
                            ],
                            "loc": {
                              "start": {
                                "line": 164,
                                "column": 13
                              },
                              "end": {
                                "line": 164,
                                "column": 24
                              }
                            }
                          },
                          "range": [
                            5491,
                            5507
                          ],
                          "loc": {
                            "start": {
                              "line": 164,
                              "column": 8
                            },
                            "end": {
                              "line": 164,
                              "column": 24
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "range": [
                            5510,
                            5511
                          ],
                          "loc": {
                            "start": {
                              "line": 164,
                              "column": 27
                            },
                            "end": {
                              "line": 164,
                              "column": 28
                            }
                          }
                        },
                        "range": [
                          5491,
                          5511
                        ],
                        "loc": {
                          "start": {
                            "line": 164,
                            "column": 8
                          },
                          "end": {
                            "line": 164,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        5491,
                        5512
                      ],
                      "loc": {
                        "start": {
                          "line": 164,
                          "column": 8
                        },
                        "end": {
                          "line": 164,
                          "column": 29
                        }
                      },
                      "leadingComments": [
                        {
                          "type": "Block",
                          "value": "*\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {number}\n         ",
                          "range": [
                            5258,
                            5482
                          ],
                          "loc": {
                            "start": {
                              "line": 158,
                              "column": 8
                            },
                            "end": {
                              "line": 163,
                              "column": 11
                            }
                          }
                        }
                      ]
                    }
                  ],
                  "range": [
                    4921,
                    5518
                  ],
                  "loc": {
                    "start": {
                      "line": 146,
                      "column": 18
                    },
                    "end": {
                      "line": 165,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  4918,
                  5518
                ],
                "loc": {
                  "start": {
                    "line": 146,
                    "column": 15
                  },
                  "end": {
                    "line": 165,
                    "column": 5
                  }
                }
              },
              "kind": "constructor",
              "computed": false,
              "range": [
                4907,
                5518
              ],
              "loc": {
                "start": {
                  "line": 146,
                  "column": 4
                },
                "end": {
                  "line": 165,
                  "column": 5
                }
              },
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * A getter method that returns a number representing the current time\n     * (at the time this function was called) according to the scheduler's own\n     * internal clock.\n     * @return {number} A number that represents the current time. May or may not\n     * have a relation to wall-clock time. May or may not refer to a time unit\n     * (e.g. milliseconds).\n     ",
                  "range": [
                    5523,
                    5900
                  ],
                  "loc": {
                    "start": {
                      "line": 166,
                      "column": 4
                    },
                    "end": {
                      "line": 173,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "now",
                "range": [
                  5905,
                  5908
                ],
                "loc": {
                  "start": {
                    "line": 174,
                    "column": 4
                  },
                  "end": {
                    "line": 174,
                    "column": 7
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          5928,
                          5929
                        ],
                        "loc": {
                          "start": {
                            "line": 175,
                            "column": 15
                          },
                          "end": {
                            "line": 175,
                            "column": 16
                          }
                        }
                      },
                      "range": [
                        5921,
                        5930
                      ],
                      "loc": {
                        "start": {
                          "line": 175,
                          "column": 8
                        },
                        "end": {
                          "line": 175,
                          "column": 17
                        }
                      }
                    }
                  ],
                  "range": [
                    5911,
                    5936
                  ],
                  "loc": {
                    "start": {
                      "line": 174,
                      "column": 10
                    },
                    "end": {
                      "line": 176,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  5908,
                  5936
                ],
                "loc": {
                  "start": {
                    "line": 174,
                    "column": 7
                  },
                  "end": {
                    "line": 176,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                5905,
                5936
              ],
              "loc": {
                "start": {
                  "line": 174,
                  "column": 4
                },
                "end": {
                  "line": 176,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * A getter method that returns a number representing the current time\n     * (at the time this function was called) according to the scheduler's own\n     * internal clock.\n     * @return {number} A number that represents the current time. May or may not\n     * have a relation to wall-clock time. May or may not refer to a time unit\n     * (e.g. milliseconds).\n     ",
                  "range": [
                    5523,
                    5900
                  ],
                  "loc": {
                    "start": {
                      "line": 166,
                      "column": 4
                    },
                    "end": {
                      "line": 173,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     ",
                  "range": [
                    5941,
                    6833
                  ],
                  "loc": {
                    "start": {
                      "line": 177,
                      "column": 4
                    },
                    "end": {
                      "line": 193,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "schedule",
                "range": [
                  6838,
                  6846
                ],
                "loc": {
                  "start": {
                    "line": 194,
                    "column": 4
                  },
                  "end": {
                    "line": 194,
                    "column": 12
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "work",
                    "range": [
                      6847,
                      6851
                    ],
                    "loc": {
                      "start": {
                        "line": 194,
                        "column": 13
                      },
                      "end": {
                        "line": 194,
                        "column": 17
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "delay",
                    "range": [
                      6853,
                      6858
                    ],
                    "loc": {
                      "start": {
                        "line": 194,
                        "column": 19
                      },
                      "end": {
                        "line": 194,
                        "column": 24
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "state",
                    "range": [
                      6860,
                      6865
                    ],
                    "loc": {
                      "start": {
                        "line": 194,
                        "column": 26
                      },
                      "end": {
                        "line": 194,
                        "column": 31
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "void",
                        "argument": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "range": [
                            6889,
                            6890
                          ],
                          "loc": {
                            "start": {
                              "line": 195,
                              "column": 20
                            },
                            "end": {
                              "line": 195,
                              "column": 21
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          6884,
                          6890
                        ],
                        "loc": {
                          "start": {
                            "line": 195,
                            "column": 15
                          },
                          "end": {
                            "line": 195,
                            "column": 21
                          }
                        }
                      },
                      "range": [
                        6877,
                        6891
                      ],
                      "loc": {
                        "start": {
                          "line": 195,
                          "column": 8
                        },
                        "end": {
                          "line": 195,
                          "column": 22
                        }
                      }
                    }
                  ],
                  "range": [
                    6867,
                    6897
                  ],
                  "loc": {
                    "start": {
                      "line": 194,
                      "column": 33
                    },
                    "end": {
                      "line": 196,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  6846,
                  6897
                ],
                "loc": {
                  "start": {
                    "line": 194,
                    "column": 12
                  },
                  "end": {
                    "line": 196,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                6838,
                6897
              ],
              "loc": {
                "start": {
                  "line": 194,
                  "column": 4
                },
                "end": {
                  "line": 196,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     ",
                  "range": [
                    5941,
                    6833
                  ],
                  "loc": {
                    "start": {
                      "line": 177,
                      "column": 4
                    },
                    "end": {
                      "line": 193,
                      "column": 7
                    }
                  }
                }
              ],
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     ",
                  "range": [
                    6902,
                    7038
                  ],
                  "loc": {
                    "start": {
                      "line": 197,
                      "column": 4
                    },
                    "end": {
                      "line": 201,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "flush",
                "range": [
                  7043,
                  7048
                ],
                "loc": {
                  "start": {
                    "line": 202,
                    "column": 4
                  },
                  "end": {
                    "line": 202,
                    "column": 9
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "void",
                        "argument": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "range": [
                            7073,
                            7074
                          ],
                          "loc": {
                            "start": {
                              "line": 203,
                              "column": 20
                            },
                            "end": {
                              "line": 203,
                              "column": 21
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          7068,
                          7074
                        ],
                        "loc": {
                          "start": {
                            "line": 203,
                            "column": 15
                          },
                          "end": {
                            "line": 203,
                            "column": 21
                          }
                        }
                      },
                      "range": [
                        7061,
                        7075
                      ],
                      "loc": {
                        "start": {
                          "line": 203,
                          "column": 8
                        },
                        "end": {
                          "line": 203,
                          "column": 22
                        }
                      }
                    }
                  ],
                  "range": [
                    7051,
                    7081
                  ],
                  "loc": {
                    "start": {
                      "line": 202,
                      "column": 12
                    },
                    "end": {
                      "line": 204,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  7048,
                  7081
                ],
                "loc": {
                  "start": {
                    "line": 202,
                    "column": 9
                  },
                  "end": {
                    "line": 204,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                7043,
                7081
              ],
              "loc": {
                "start": {
                  "line": 202,
                  "column": 4
                },
                "end": {
                  "line": 204,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     ",
                  "range": [
                    6902,
                    7038
                  ],
                  "loc": {
                    "start": {
                      "line": 197,
                      "column": 4
                    },
                    "end": {
                      "line": 201,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            4901,
            7083
          ],
          "loc": {
            "start": {
              "line": 145,
              "column": 26
            },
            "end": {
              "line": 205,
              "column": 1
            }
          }
        },
        "range": [
          4882,
          7083
        ],
        "loc": {
          "start": {
            "line": 145,
            "column": 7
          },
          "end": {
            "line": 205,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * interface Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n *   flush(): void;\n *   active: boolean;\n *   actions: Action[];\n *   scheduledId: number;\n * }\n * ```\n *\n * @interface\n * @name Scheduler\n * @noimport true\n ",
            "range": [
              4353,
              4874
            ],
            "loc": {
              "start": {
                "line": 123,
                "column": 0
              },
              "end": {
                "line": 144,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=MiscJSDoc.js.map",
            "range": [
              7084,
              7121
            ],
            "loc": {
              "start": {
                "line": 206,
                "column": 0
              },
              "end": {
                "line": 206,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        4875,
        7083
      ],
      "loc": {
        "start": {
          "line": 145,
          "column": 0
        },
        "end": {
          "line": 205,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * interface Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n *   flush(): void;\n *   active: boolean;\n *   actions: Action[];\n *   scheduledId: number;\n * }\n * ```\n *\n * @interface\n * @name Scheduler\n * @noimport true\n ",
          "range": [
            4353,
            4874
          ],
          "loc": {
            "start": {
              "line": 123,
              "column": 0
            },
            "end": {
              "line": 144,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=MiscJSDoc.js.map",
          "range": [
            7084,
            7121
          ],
          "loc": {
            "start": {
              "line": 206,
              "column": 0
            },
            "end": {
              "line": 206,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    7083
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 205,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n ",
      "range": [
        112,
        206
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Creates a new Observable that will execute the specified function when a\n     * {@link Subscriber} subscribes to it.\n     *\n     * <span class=\"informal\">Creates an Observable with custom logic given in\n     * the `subscribe` function.</span>\n     *\n     * <img src=\"./img/create.png\" width=\"100%\">\n     *\n     * `create` converts a `subscribe` function to an actual Observable. This is\n     * equivalent to calling the Observable constructor. Write the `subscribe`\n     * function so that it behaves as an Observable: It should invoke the\n     * Subscriber's `next`, `error`, and `complete` methods following the\n     * *Observable Contract*. A well-formed Observable must invoke either the\n     * Subscriber's `complete` method exactly once or its `error` method exactly\n     * once, and invoke nothing else thereafter.\n     *\n     * Most of the times you should not need to use `create` because existing\n     * creation operators (together with instance combination operators) allow you\n     * to create an Observable for most of the use cases. However, `create` is\n     * low-level and is able to create any Observable.\n     *\n     * @example <caption>Emit three random numbers, then complete.</caption>\n     * var result = Rx.Observable.create(function (subscriber) {\n     *   subscriber.next(Math.random());\n     *   subscriber.next(Math.random());\n     *   subscriber.next(Math.random());\n     *   subscriber.complete();\n     * });\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {function(subscriber: Subscriber): TeardownLogic} [subscribe] A\n     * function that accepts a {@link Subscriber}, and invokes its `next`,\n     * `error`, and `complete` methods as appropriate, and should return some\n     * logic for tear down, either as a {@link Subscription} or as a function.\n     * @return {Observable} An Observable that, when subscribed, will execute the\n     * specified function.\n     * @static true\n     * @name create\n     * @owner Observable\n     ",
      "range": [
        240,
        2342
      ],
      "loc": {
        "start": {
          "line": 10,
          "column": 4
        },
        "end": {
          "line": 55,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * An interface for a consumer of push-based notifications delivered by an\n * {@link Observable}.\n *\n * ```ts\n * interface Observer<T> {\n *   isUnsubscribed?: boolean;\n *   next: (value: T) => void;\n *   error: (err: any) => void;\n *   complete: () => void;\n * }\n * ```\n *\n * An object conforming to the Observer interface is usually\n * given to the `observable.subscribe(observer)` method, and the Observable will\n * call the Observer's `next(value)` method to provide notifications. A\n * well-behaved Observable will call an Observer's `complete()` method exactly\n * once or the Observer's `error(err)` method exactly once, as the last\n * notification delivered.\n *\n * @interface\n * @name Observer\n * @noimport true\n ",
      "range": [
        2430,
        3155
      ],
      "loc": {
        "start": {
          "line": 61,
          "column": 0
        },
        "end": {
          "line": 84,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n         * An optional flag to indicate whether this Observer, when used as a\n         * subscriber, has already been unsubscribed from its Observable.\n         * @type {boolean}\n         ",
      "range": [
        3211,
        3405
      ],
      "loc": {
        "start": {
          "line": 87,
          "column": 8
        },
        "end": {
          "line": 91,
          "column": 11
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * The callback to receive notifications of type `next` from the Observable,\n     * with a value. The Observable may call this method 0 or more times.\n     * @param {T} value The `next` value.\n     * @return {void}\n     ",
      "range": [
        3453,
        3683
      ],
      "loc": {
        "start": {
          "line": 94,
          "column": 4
        },
        "end": {
          "line": 99,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * The callback to receive notifications of type `error` from the Observable,\n     * with an attached {@link Error}. Notifies the Observer that the Observable\n     * has experienced an error condition.\n     * @param {any} err The `error` exception.\n     * @return {void}\n     ",
      "range": [
        3735,
        4021
      ],
      "loc": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * The callback to receive a valueless notification of type `complete` from\n     * the Observable. Notifies the Observer that the Observable has finished\n     * sending push-based notifications.\n     * @return {void}\n     ",
      "range": [
        4072,
        4304
      ],
      "loc": {
        "start": {
          "line": 113,
          "column": 4
        },
        "end": {
          "line": 118,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * interface Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n *   flush(): void;\n *   active: boolean;\n *   actions: Action[];\n *   scheduledId: number;\n * }\n * ```\n *\n * @interface\n * @name Scheduler\n * @noimport true\n ",
      "range": [
        4353,
        4874
      ],
      "loc": {
        "start": {
          "line": 123,
          "column": 0
        },
        "end": {
          "line": 144,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         ",
      "range": [
        4931,
        5086
      ],
      "loc": {
        "start": {
          "line": 147,
          "column": 8
        },
        "end": {
          "line": 151,
          "column": 11
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n         * The queue of scheduled actions as an array.\n         * @type {Action[]}\n         ",
      "range": [
        5124,
        5222
      ],
      "loc": {
        "start": {
          "line": 153,
          "column": 8
        },
        "end": {
          "line": 156,
          "column": 11
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {number}\n         ",
      "range": [
        5258,
        5482
      ],
      "loc": {
        "start": {
          "line": 158,
          "column": 8
        },
        "end": {
          "line": 163,
          "column": 11
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * A getter method that returns a number representing the current time\n     * (at the time this function was called) according to the scheduler's own\n     * internal clock.\n     * @return {number} A number that represents the current time. May or may not\n     * have a relation to wall-clock time. May or may not refer to a time unit\n     * (e.g. milliseconds).\n     ",
      "range": [
        5523,
        5900
      ],
      "loc": {
        "start": {
          "line": 166,
          "column": 4
        },
        "end": {
          "line": 173,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     ",
      "range": [
        5941,
        6833
      ],
      "loc": {
        "start": {
          "line": 177,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 7
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     ",
      "range": [
        6902,
        7038
      ],
      "loc": {
        "start": {
          "line": 197,
          "column": 4
        },
        "end": {
          "line": 201,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=MiscJSDoc.js.map",
      "range": [
        7084,
        7121
      ],
      "loc": {
        "start": {
          "line": 206,
          "column": 0
        },
        "end": {
          "line": 206,
          "column": 37
        }
      }
    }
  ]
}