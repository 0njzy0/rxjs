{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Subscription",
            "range": [
              9,
              21
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 21
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "Subscription",
            "range": [
              9,
              21
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 21
              }
            }
          },
          "range": [
            9,
            21
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 21
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../Subscription",
        "raw": "'../Subscription'",
        "range": [
          29,
          46
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 29
          },
          "end": {
            "line": 1,
            "column": 46
          }
        }
      },
      "range": [
        0,
        47
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 47
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n ",
          "range": [
            48,
            477
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "ClassDeclaration",
        "id": {
          "type": "Identifier",
          "name": "Action",
          "range": [
            491,
            497
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 13
            },
            "end": {
              "line": 16,
              "column": 19
            }
          }
        },
        "superClass": {
          "type": "Identifier",
          "name": "Subscription",
          "range": [
            506,
            518
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 28
            },
            "end": {
              "line": 16,
              "column": 40
            }
          }
        },
        "body": {
          "type": "ClassBody",
          "body": [
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "constructor",
                "range": [
                  525,
                  536
                ],
                "loc": {
                  "start": {
                    "line": 17,
                    "column": 4
                  },
                  "end": {
                    "line": 17,
                    "column": 15
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      537,
                      546
                    ],
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 16
                      },
                      "end": {
                        "line": 17,
                        "column": 25
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "work",
                    "range": [
                      548,
                      552
                    ],
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 27
                      },
                      "end": {
                        "line": 17,
                        "column": 31
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Super",
                          "range": [
                            564,
                            569
                          ],
                          "loc": {
                            "start": {
                              "line": 18,
                              "column": 8
                            },
                            "end": {
                              "line": 18,
                              "column": 13
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          564,
                          571
                        ],
                        "loc": {
                          "start": {
                            "line": 18,
                            "column": 8
                          },
                          "end": {
                            "line": 18,
                            "column": 15
                          }
                        }
                      },
                      "range": [
                        564,
                        572
                      ],
                      "loc": {
                        "start": {
                          "line": 18,
                          "column": 8
                        },
                        "end": {
                          "line": 18,
                          "column": 16
                        }
                      }
                    }
                  ],
                  "range": [
                    554,
                    578
                  ],
                  "loc": {
                    "start": {
                      "line": 17,
                      "column": 33
                    },
                    "end": {
                      "line": 19,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  536,
                  578
                ],
                "loc": {
                  "start": {
                    "line": 17,
                    "column": 15
                  },
                  "end": {
                    "line": 19,
                    "column": 5
                  }
                }
              },
              "kind": "constructor",
              "computed": false,
              "range": [
                525,
                578
              ],
              "loc": {
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 5
                }
              },
              "trailingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     ",
                  "range": [
                    583,
                    1086
                  ],
                  "loc": {
                    "start": {
                      "line": 20,
                      "column": 4
                    },
                    "end": {
                      "line": 29,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            },
            {
              "type": "MethodDefinition",
              "key": {
                "type": "Identifier",
                "name": "schedule",
                "range": [
                  1091,
                  1099
                ],
                "loc": {
                  "start": {
                    "line": 30,
                    "column": 4
                  },
                  "end": {
                    "line": 30,
                    "column": 12
                  }
                }
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "state",
                    "range": [
                      1100,
                      1105
                    ],
                    "loc": {
                      "start": {
                        "line": 30,
                        "column": 13
                      },
                      "end": {
                        "line": 30,
                        "column": 18
                      }
                    }
                  },
                  {
                    "type": "AssignmentPattern",
                    "left": {
                      "type": "Identifier",
                      "name": "delay",
                      "range": [
                        1107,
                        1112
                      ],
                      "loc": {
                        "start": {
                          "line": 30,
                          "column": 20
                        },
                        "end": {
                          "line": 30,
                          "column": 25
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0",
                      "range": [
                        1115,
                        1116
                      ],
                      "loc": {
                        "start": {
                          "line": 30,
                          "column": 28
                        },
                        "end": {
                          "line": 30,
                          "column": 29
                        }
                      }
                    },
                    "range": [
                      1107,
                      1116
                    ],
                    "loc": {
                      "start": {
                        "line": 30,
                        "column": 20
                      },
                      "end": {
                        "line": 30,
                        "column": 29
                      }
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ThisExpression",
                        "range": [
                          1135,
                          1139
                        ],
                        "loc": {
                          "start": {
                            "line": 31,
                            "column": 15
                          },
                          "end": {
                            "line": 31,
                            "column": 19
                          }
                        }
                      },
                      "range": [
                        1128,
                        1140
                      ],
                      "loc": {
                        "start": {
                          "line": 31,
                          "column": 8
                        },
                        "end": {
                          "line": 31,
                          "column": 20
                        }
                      }
                    }
                  ],
                  "range": [
                    1118,
                    1146
                  ],
                  "loc": {
                    "start": {
                      "line": 30,
                      "column": 31
                    },
                    "end": {
                      "line": 32,
                      "column": 5
                    }
                  }
                },
                "generator": false,
                "expression": false,
                "range": [
                  1099,
                  1146
                ],
                "loc": {
                  "start": {
                    "line": 30,
                    "column": 12
                  },
                  "end": {
                    "line": 32,
                    "column": 5
                  }
                }
              },
              "kind": "method",
              "computed": false,
              "range": [
                1091,
                1146
              ],
              "loc": {
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 32,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Block",
                  "value": "*\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     ",
                  "range": [
                    583,
                    1086
                  ],
                  "loc": {
                    "start": {
                      "line": 20,
                      "column": 4
                    },
                    "end": {
                      "line": 29,
                      "column": 7
                    }
                  }
                }
              ],
              "static": false
            }
          ],
          "range": [
            519,
            1148
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 41
            },
            "end": {
              "line": 33,
              "column": 1
            }
          }
        },
        "range": [
          485,
          1148
        ],
        "loc": {
          "start": {
            "line": 16,
            "column": 7
          },
          "end": {
            "line": 33,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n ",
            "range": [
              48,
              477
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 15,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=Action.js.map",
            "range": [
              1149,
              1183
            ],
            "loc": {
              "start": {
                "line": 34,
                "column": 0
              },
              "end": {
                "line": 34,
                "column": 34
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        478,
        1148
      ],
      "loc": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 33,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n ",
          "range": [
            48,
            477
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=Action.js.map",
          "range": [
            1149,
            1183
          ],
          "loc": {
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 34
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1148
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 33,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n ",
      "range": [
        48,
        477
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     ",
      "range": [
        583,
        1086
      ],
      "loc": {
        "start": {
          "line": 20,
          "column": 4
        },
        "end": {
          "line": 29,
          "column": 7
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=Action.js.map",
      "range": [
        1149,
        1183
      ],
      "loc": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 34
        }
      }
    }
  ]
}