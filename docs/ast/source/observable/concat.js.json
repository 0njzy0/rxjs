{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "range": [
            9,
            20
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          28,
          49
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 49
          }
        }
      },
      "range": [
        0,
        50
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "of",
            "range": [
              60,
              62
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 11
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "of",
            "range": [
              60,
              62
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 11
              }
            }
          },
          "range": [
            60,
            62
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 11
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./of",
        "raw": "'./of'",
        "range": [
          70,
          76
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 19
          },
          "end": {
            "line": 2,
            "column": 25
          }
        }
      },
      "range": [
        51,
        77
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 26
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "from",
            "range": [
              87,
              91
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 13
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "from",
            "range": [
              87,
              91
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 13
              }
            }
          },
          "range": [
            87,
            91
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 13
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./from",
        "raw": "'./from'",
        "range": [
          99,
          107
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 21
          },
          "end": {
            "line": 3,
            "column": 29
          }
        }
      },
      "range": [
        78,
        108
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 30
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "concatAll",
            "range": [
              118,
              127
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 18
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "concatAll",
            "range": [
              118,
              127
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 18
              }
            }
          },
          "range": [
            118,
            127
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 9
            },
            "end": {
              "line": 4,
              "column": 18
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/concatAll",
        "raw": "'../operators/concatAll'",
        "range": [
          135,
          159
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 26
          },
          "end": {
            "line": 4,
            "column": 50
          }
        }
      },
      "range": [
        109,
        160
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 51
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            161,
            196
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            197,
            4492
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 98,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concat",
          "range": [
            4509,
            4515
          ],
          "loc": {
            "start": {
              "line": 99,
              "column": 16
            },
            "end": {
              "line": 99,
              "column": 22
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                4519,
                4530
              ],
              "loc": {
                "start": {
                  "line": 99,
                  "column": 26
                },
                "end": {
                  "line": 99,
                  "column": 37
                }
              }
            },
            "range": [
              4516,
              4530
            ],
            "loc": {
              "start": {
                "line": 99,
                "column": 23
              },
              "end": {
                "line": 99,
                "column": 37
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        4542,
                        4553
                      ],
                      "loc": {
                        "start": {
                          "line": 100,
                          "column": 8
                        },
                        "end": {
                          "line": 100,
                          "column": 19
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length",
                      "range": [
                        4554,
                        4560
                      ],
                      "loc": {
                        "start": {
                          "line": 100,
                          "column": 20
                        },
                        "end": {
                          "line": 100,
                          "column": 26
                        }
                      }
                    },
                    "range": [
                      4542,
                      4560
                    ],
                    "loc": {
                      "start": {
                        "line": 100,
                        "column": 8
                      },
                      "end": {
                        "line": 100,
                        "column": 26
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "range": [
                      4565,
                      4566
                    ],
                    "loc": {
                      "start": {
                        "line": 100,
                        "column": 31
                      },
                      "end": {
                        "line": 100,
                        "column": 32
                      }
                    }
                  },
                  "range": [
                    4542,
                    4566
                  ],
                  "loc": {
                    "start": {
                      "line": 100,
                      "column": 8
                    },
                    "end": {
                      "line": 100,
                      "column": 32
                    }
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4571,
                          4582
                        ],
                        "loc": {
                          "start": {
                            "line": 100,
                            "column": 37
                          },
                          "end": {
                            "line": 100,
                            "column": 48
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length",
                        "range": [
                          4583,
                          4589
                        ],
                        "loc": {
                          "start": {
                            "line": 100,
                            "column": 49
                          },
                          "end": {
                            "line": 100,
                            "column": 55
                          }
                        }
                      },
                      "range": [
                        4571,
                        4589
                      ],
                      "loc": {
                        "start": {
                          "line": 100,
                          "column": 37
                        },
                        "end": {
                          "line": 100,
                          "column": 55
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 2,
                      "raw": "2",
                      "range": [
                        4594,
                        4595
                      ],
                      "loc": {
                        "start": {
                          "line": 100,
                          "column": 60
                        },
                        "end": {
                          "line": 100,
                          "column": 61
                        }
                      }
                    },
                    "range": [
                      4571,
                      4595
                    ],
                    "loc": {
                      "start": {
                        "line": 100,
                        "column": 37
                      },
                      "end": {
                        "line": 100,
                        "column": 61
                      }
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isScheduler",
                      "range": [
                        4599,
                        4610
                      ],
                      "loc": {
                        "start": {
                          "line": 100,
                          "column": 65
                        },
                        "end": {
                          "line": 100,
                          "column": 76
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            4611,
                            4622
                          ],
                          "loc": {
                            "start": {
                              "line": 100,
                              "column": 77
                            },
                            "end": {
                              "line": 100,
                              "column": 88
                            }
                          }
                        },
                        "property": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "range": [
                            4623,
                            4624
                          ],
                          "loc": {
                            "start": {
                              "line": 100,
                              "column": 89
                            },
                            "end": {
                              "line": 100,
                              "column": 90
                            }
                          }
                        },
                        "range": [
                          4611,
                          4625
                        ],
                        "loc": {
                          "start": {
                            "line": 100,
                            "column": 77
                          },
                          "end": {
                            "line": 100,
                            "column": 91
                          }
                        }
                      }
                    ],
                    "range": [
                      4599,
                      4626
                    ],
                    "loc": {
                      "start": {
                        "line": 100,
                        "column": 65
                      },
                      "end": {
                        "line": 100,
                        "column": 92
                      }
                    }
                  },
                  "range": [
                    4571,
                    4626
                  ],
                  "loc": {
                    "start": {
                      "line": 100,
                      "column": 37
                    },
                    "end": {
                      "line": 100,
                      "column": 92
                    }
                  }
                },
                "range": [
                  4542,
                  4627
                ],
                "loc": {
                  "start": {
                    "line": 100,
                    "column": 8
                  },
                  "end": {
                    "line": 100,
                    "column": 93
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "from",
                        "range": [
                          4646,
                          4650
                        ],
                        "loc": {
                          "start": {
                            "line": 101,
                            "column": 15
                          },
                          "end": {
                            "line": 101,
                            "column": 19
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              4651,
                              4662
                            ],
                            "loc": {
                              "start": {
                                "line": 101,
                                "column": 20
                              },
                              "end": {
                                "line": 101,
                                "column": 31
                              }
                            }
                          },
                          "property": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0",
                            "range": [
                              4663,
                              4664
                            ],
                            "loc": {
                              "start": {
                                "line": 101,
                                "column": 32
                              },
                              "end": {
                                "line": 101,
                                "column": 33
                              }
                            }
                          },
                          "range": [
                            4651,
                            4665
                          ],
                          "loc": {
                            "start": {
                              "line": 101,
                              "column": 20
                            },
                            "end": {
                              "line": 101,
                              "column": 34
                            }
                          }
                        }
                      ],
                      "range": [
                        4646,
                        4666
                      ],
                      "loc": {
                        "start": {
                          "line": 101,
                          "column": 15
                        },
                        "end": {
                          "line": 101,
                          "column": 35
                        }
                      }
                    },
                    "range": [
                      4639,
                      4667
                    ],
                    "loc": {
                      "start": {
                        "line": 101,
                        "column": 8
                      },
                      "end": {
                        "line": 101,
                        "column": 36
                      }
                    }
                  }
                ],
                "range": [
                  4629,
                  4673
                ],
                "loc": {
                  "start": {
                    "line": 100,
                    "column": 95
                  },
                  "end": {
                    "line": 102,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4538,
                4673
              ],
              "loc": {
                "start": {
                  "line": 100,
                  "column": 4
                },
                "end": {
                  "line": 102,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "concatAll",
                    "range": [
                      4685,
                      4694
                    ],
                    "loc": {
                      "start": {
                        "line": 103,
                        "column": 11
                      },
                      "end": {
                        "line": 103,
                        "column": 20
                      }
                    }
                  },
                  "arguments": [],
                  "range": [
                    4685,
                    4696
                  ],
                  "loc": {
                    "start": {
                      "line": 103,
                      "column": 11
                    },
                    "end": {
                      "line": 103,
                      "column": 22
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "of",
                      "range": [
                        4697,
                        4699
                      ],
                      "loc": {
                        "start": {
                          "line": 103,
                          "column": 23
                        },
                        "end": {
                          "line": 103,
                          "column": 25
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            4703,
                            4714
                          ],
                          "loc": {
                            "start": {
                              "line": 103,
                              "column": 29
                            },
                            "end": {
                              "line": 103,
                              "column": 40
                            }
                          }
                        },
                        "range": [
                          4700,
                          4714
                        ],
                        "loc": {
                          "start": {
                            "line": 103,
                            "column": 26
                          },
                          "end": {
                            "line": 103,
                            "column": 40
                          }
                        }
                      }
                    ],
                    "range": [
                      4697,
                      4715
                    ],
                    "loc": {
                      "start": {
                        "line": 103,
                        "column": 23
                      },
                      "end": {
                        "line": 103,
                        "column": 41
                      }
                    }
                  }
                ],
                "range": [
                  4685,
                  4716
                ],
                "loc": {
                  "start": {
                    "line": 103,
                    "column": 11
                  },
                  "end": {
                    "line": 103,
                    "column": 42
                  }
                }
              },
              "range": [
                4678,
                4717
              ],
              "loc": {
                "start": {
                  "line": 103,
                  "column": 4
                },
                "end": {
                  "line": 103,
                  "column": 43
                }
              }
            }
          ],
          "range": [
            4532,
            4719
          ],
          "loc": {
            "start": {
              "line": 99,
              "column": 39
            },
            "end": {
              "line": 104,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          4500,
          4719
        ],
        "loc": {
          "start": {
            "line": 99,
            "column": 7
          },
          "end": {
            "line": 104,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              161,
              196
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
            "range": [
              197,
              4492
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 98,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concat.js.map",
            "range": [
              4720,
              4754
            ],
            "loc": {
              "start": {
                "line": 105,
                "column": 0
              },
              "end": {
                "line": 105,
                "column": 34
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        4493,
        4719
      ],
      "loc": {
        "start": {
          "line": 99,
          "column": 0
        },
        "end": {
          "line": 104,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            161,
            196
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            197,
            4492
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 98,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concat.js.map",
          "range": [
            4720,
            4754
          ],
          "loc": {
            "start": {
              "line": 105,
              "column": 0
            },
            "end": {
              "line": 105,
              "column": 34
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    4719
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 104,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        161,
        196
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n ",
      "range": [
        197,
        4492
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concat.js.map",
      "range": [
        4720,
        4754
      ],
      "loc": {
        "start": {
          "line": 105,
          "column": 0
        },
        "end": {
          "line": 105,
          "column": 34
        }
      }
    }
  ]
}