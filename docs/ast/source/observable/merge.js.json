{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "range": [
            9,
            19
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 19
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../Observable",
        "raw": "'../Observable'",
        "range": [
          27,
          42
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 27
          },
          "end": {
            "line": 1,
            "column": 42
          }
        }
      },
      "range": [
        0,
        43
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 43
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              53,
              68
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              53,
              68
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 24
              }
            }
          },
          "range": [
            53,
            68
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./ArrayObservable",
        "raw": "'./ArrayObservable'",
        "range": [
          76,
          95
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 32
          },
          "end": {
            "line": 2,
            "column": 51
          }
        }
      },
      "range": [
        44,
        96
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 52
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              106,
              117
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              106,
              117
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 20
              }
            }
          },
          "range": [
            106,
            117
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          125,
          146
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 28
          },
          "end": {
            "line": 3,
            "column": 49
          }
        }
      },
      "range": [
        97,
        147
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "mergeAll",
            "range": [
              157,
              165
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 17
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "mergeAll",
            "range": [
              157,
              165
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 17
              }
            }
          },
          "range": [
            157,
            165
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 9
            },
            "end": {
              "line": 4,
              "column": 17
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/mergeAll",
        "raw": "'../operators/mergeAll'",
        "range": [
          173,
          196
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 25
          },
          "end": {
            "line": 4,
            "column": 48
          }
        }
      },
      "range": [
        148,
        197
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 49
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            198,
            233
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
          "range": [
            234,
            2963
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 65,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "merge",
          "range": [
            2980,
            2985
          ],
          "loc": {
            "start": {
              "line": 66,
              "column": 16
            },
            "end": {
              "line": 66,
              "column": 21
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                2989,
                3000
              ],
              "loc": {
                "start": {
                  "line": 66,
                  "column": 25
                },
                "end": {
                  "line": 66,
                  "column": 36
                }
              }
            },
            "range": [
              2986,
              3000
            ],
            "loc": {
              "start": {
                "line": 66,
                "column": 22
              },
              "end": {
                "line": 66,
                "column": 36
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "concurrent",
                    "range": [
                      3012,
                      3022
                    ],
                    "loc": {
                      "start": {
                        "line": 67,
                        "column": 8
                      },
                      "end": {
                        "line": 67,
                        "column": 18
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Number",
                      "range": [
                        3025,
                        3031
                      ],
                      "loc": {
                        "start": {
                          "line": 67,
                          "column": 21
                        },
                        "end": {
                          "line": 67,
                          "column": 27
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "POSITIVE_INFINITY",
                      "range": [
                        3032,
                        3049
                      ],
                      "loc": {
                        "start": {
                          "line": 67,
                          "column": 28
                        },
                        "end": {
                          "line": 67,
                          "column": 45
                        }
                      }
                    },
                    "range": [
                      3025,
                      3049
                    ],
                    "loc": {
                      "start": {
                        "line": 67,
                        "column": 21
                      },
                      "end": {
                        "line": 67,
                        "column": 45
                      }
                    }
                  },
                  "range": [
                    3012,
                    3049
                  ],
                  "loc": {
                    "start": {
                      "line": 67,
                      "column": 8
                    },
                    "end": {
                      "line": 67,
                      "column": 45
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                3008,
                3050
              ],
              "loc": {
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 67,
                  "column": 46
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      3059,
                      3068
                    ],
                    "loc": {
                      "start": {
                        "line": 68,
                        "column": 8
                      },
                      "end": {
                        "line": 68,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      3071,
                      3075
                    ],
                    "loc": {
                      "start": {
                        "line": 68,
                        "column": 20
                      },
                      "end": {
                        "line": 68,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    3059,
                    3075
                  ],
                  "loc": {
                    "start": {
                      "line": 68,
                      "column": 8
                    },
                    "end": {
                      "line": 68,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                3055,
                3076
              ],
              "loc": {
                "start": {
                  "line": 68,
                  "column": 4
                },
                "end": {
                  "line": 68,
                  "column": 25
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "last",
                    "range": [
                      3085,
                      3089
                    ],
                    "loc": {
                      "start": {
                        "line": 69,
                        "column": 8
                      },
                      "end": {
                        "line": 69,
                        "column": 12
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        3092,
                        3103
                      ],
                      "loc": {
                        "start": {
                          "line": 69,
                          "column": 15
                        },
                        "end": {
                          "line": 69,
                          "column": 26
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            3104,
                            3115
                          ],
                          "loc": {
                            "start": {
                              "line": 69,
                              "column": 27
                            },
                            "end": {
                              "line": 69,
                              "column": 38
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            3116,
                            3122
                          ],
                          "loc": {
                            "start": {
                              "line": 69,
                              "column": 39
                            },
                            "end": {
                              "line": 69,
                              "column": 45
                            }
                          }
                        },
                        "range": [
                          3104,
                          3122
                        ],
                        "loc": {
                          "start": {
                            "line": 69,
                            "column": 27
                          },
                          "end": {
                            "line": 69,
                            "column": 45
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          3125,
                          3126
                        ],
                        "loc": {
                          "start": {
                            "line": 69,
                            "column": 48
                          },
                          "end": {
                            "line": 69,
                            "column": 49
                          }
                        }
                      },
                      "range": [
                        3104,
                        3126
                      ],
                      "loc": {
                        "start": {
                          "line": 69,
                          "column": 27
                        },
                        "end": {
                          "line": 69,
                          "column": 49
                        }
                      }
                    },
                    "range": [
                      3092,
                      3127
                    ],
                    "loc": {
                      "start": {
                        "line": 69,
                        "column": 15
                      },
                      "end": {
                        "line": 69,
                        "column": 50
                      }
                    }
                  },
                  "range": [
                    3085,
                    3127
                  ],
                  "loc": {
                    "start": {
                      "line": 69,
                      "column": 8
                    },
                    "end": {
                      "line": 69,
                      "column": 50
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                3081,
                3128
              ],
              "loc": {
                "start": {
                  "line": 69,
                  "column": 4
                },
                "end": {
                  "line": 69,
                  "column": 51
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    3137,
                    3148
                  ],
                  "loc": {
                    "start": {
                      "line": 70,
                      "column": 8
                    },
                    "end": {
                      "line": 70,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "last",
                    "range": [
                      3149,
                      3153
                    ],
                    "loc": {
                      "start": {
                        "line": 70,
                        "column": 20
                      },
                      "end": {
                        "line": 70,
                        "column": 24
                      }
                    }
                  }
                ],
                "range": [
                  3137,
                  3154
                ],
                "loc": {
                  "start": {
                    "line": 70,
                    "column": 8
                  },
                  "end": {
                    "line": 70,
                    "column": 25
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          3166,
                          3175
                        ],
                        "loc": {
                          "start": {
                            "line": 71,
                            "column": 8
                          },
                          "end": {
                            "line": 71,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              3178,
                              3189
                            ],
                            "loc": {
                              "start": {
                                "line": 71,
                                "column": 20
                              },
                              "end": {
                                "line": 71,
                                "column": 31
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              3190,
                              3193
                            ],
                            "loc": {
                              "start": {
                                "line": 71,
                                "column": 32
                              },
                              "end": {
                                "line": 71,
                                "column": 35
                              }
                            }
                          },
                          "range": [
                            3178,
                            3193
                          ],
                          "loc": {
                            "start": {
                              "line": 71,
                              "column": 20
                            },
                            "end": {
                              "line": 71,
                              "column": 35
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          3178,
                          3195
                        ],
                        "loc": {
                          "start": {
                            "line": 71,
                            "column": 20
                          },
                          "end": {
                            "line": 71,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        3166,
                        3195
                      ],
                      "loc": {
                        "start": {
                          "line": 71,
                          "column": 8
                        },
                        "end": {
                          "line": 71,
                          "column": 37
                        }
                      }
                    },
                    "range": [
                      3166,
                      3196
                    ],
                    "loc": {
                      "start": {
                        "line": 71,
                        "column": 8
                      },
                      "end": {
                        "line": 71,
                        "column": 38
                      }
                    }
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              3209,
                              3220
                            ],
                            "loc": {
                              "start": {
                                "line": 72,
                                "column": 12
                              },
                              "end": {
                                "line": 72,
                                "column": 23
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length",
                            "range": [
                              3221,
                              3227
                            ],
                            "loc": {
                              "start": {
                                "line": 72,
                                "column": 24
                              },
                              "end": {
                                "line": 72,
                                "column": 30
                              }
                            }
                          },
                          "range": [
                            3209,
                            3227
                          ],
                          "loc": {
                            "start": {
                              "line": 72,
                              "column": 12
                            },
                            "end": {
                              "line": 72,
                              "column": 30
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "range": [
                            3230,
                            3231
                          ],
                          "loc": {
                            "start": {
                              "line": 72,
                              "column": 33
                            },
                            "end": {
                              "line": 72,
                              "column": 34
                            }
                          }
                        },
                        "range": [
                          3209,
                          3231
                        ],
                        "loc": {
                          "start": {
                            "line": 72,
                            "column": 12
                          },
                          "end": {
                            "line": 72,
                            "column": 34
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "observables",
                              "range": [
                                3242,
                                3253
                              ],
                              "loc": {
                                "start": {
                                  "line": 72,
                                  "column": 45
                                },
                                "end": {
                                  "line": 72,
                                  "column": 56
                                }
                              }
                            },
                            "property": {
                              "type": "BinaryExpression",
                              "operator": "-",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "observables",
                                  "range": [
                                    3254,
                                    3265
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 72,
                                      "column": 57
                                    },
                                    "end": {
                                      "line": 72,
                                      "column": 68
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length",
                                  "range": [
                                    3266,
                                    3272
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 72,
                                      "column": 69
                                    },
                                    "end": {
                                      "line": 72,
                                      "column": 75
                                    }
                                  }
                                },
                                "range": [
                                  3254,
                                  3272
                                ],
                                "loc": {
                                  "start": {
                                    "line": 72,
                                    "column": 57
                                  },
                                  "end": {
                                    "line": 72,
                                    "column": 75
                                  }
                                }
                              },
                              "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1",
                                "range": [
                                  3275,
                                  3276
                                ],
                                "loc": {
                                  "start": {
                                    "line": 72,
                                    "column": 78
                                  },
                                  "end": {
                                    "line": 72,
                                    "column": 79
                                  }
                                }
                              },
                              "range": [
                                3254,
                                3276
                              ],
                              "loc": {
                                "start": {
                                  "line": 72,
                                  "column": 57
                                },
                                "end": {
                                  "line": 72,
                                  "column": 79
                                }
                              }
                            },
                            "range": [
                              3242,
                              3277
                            ],
                            "loc": {
                              "start": {
                                "line": 72,
                                "column": 45
                              },
                              "end": {
                                "line": 72,
                                "column": 80
                              }
                            }
                          },
                          "prefix": true,
                          "range": [
                            3235,
                            3277
                          ],
                          "loc": {
                            "start": {
                              "line": 72,
                              "column": 38
                            },
                            "end": {
                              "line": 72,
                              "column": 80
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": "number",
                          "raw": "'number'",
                          "range": [
                            3282,
                            3290
                          ],
                          "loc": {
                            "start": {
                              "line": 72,
                              "column": 85
                            },
                            "end": {
                              "line": 72,
                              "column": 93
                            }
                          }
                        },
                        "range": [
                          3235,
                          3290
                        ],
                        "loc": {
                          "start": {
                            "line": 72,
                            "column": 38
                          },
                          "end": {
                            "line": 72,
                            "column": 93
                          }
                        }
                      },
                      "range": [
                        3209,
                        3290
                      ],
                      "loc": {
                        "start": {
                          "line": 72,
                          "column": 12
                        },
                        "end": {
                          "line": 72,
                          "column": 93
                        }
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "concurrent",
                              "range": [
                                3306,
                                3316
                              ],
                              "loc": {
                                "start": {
                                  "line": 73,
                                  "column": 12
                                },
                                "end": {
                                  "line": 73,
                                  "column": 22
                                }
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "observables",
                                  "range": [
                                    3319,
                                    3330
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 73,
                                      "column": 25
                                    },
                                    "end": {
                                      "line": 73,
                                      "column": 36
                                    }
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "pop",
                                  "range": [
                                    3331,
                                    3334
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 73,
                                      "column": 37
                                    },
                                    "end": {
                                      "line": 73,
                                      "column": 40
                                    }
                                  }
                                },
                                "range": [
                                  3319,
                                  3334
                                ],
                                "loc": {
                                  "start": {
                                    "line": 73,
                                    "column": 25
                                  },
                                  "end": {
                                    "line": 73,
                                    "column": 40
                                  }
                                }
                              },
                              "arguments": [],
                              "range": [
                                3319,
                                3336
                              ],
                              "loc": {
                                "start": {
                                  "line": 73,
                                  "column": 25
                                },
                                "end": {
                                  "line": 73,
                                  "column": 42
                                }
                              }
                            },
                            "range": [
                              3306,
                              3336
                            ],
                            "loc": {
                              "start": {
                                "line": 73,
                                "column": 12
                              },
                              "end": {
                                "line": 73,
                                "column": 42
                              }
                            }
                          },
                          "range": [
                            3306,
                            3337
                          ],
                          "loc": {
                            "start": {
                              "line": 73,
                              "column": 12
                            },
                            "end": {
                              "line": 73,
                              "column": 43
                            }
                          }
                        }
                      ],
                      "range": [
                        3292,
                        3347
                      ],
                      "loc": {
                        "start": {
                          "line": 72,
                          "column": 95
                        },
                        "end": {
                          "line": 74,
                          "column": 9
                        }
                      }
                    },
                    "alternate": null,
                    "range": [
                      3205,
                      3347
                    ],
                    "loc": {
                      "start": {
                        "line": 72,
                        "column": 8
                      },
                      "end": {
                        "line": 74,
                        "column": 9
                      }
                    }
                  }
                ],
                "range": [
                  3156,
                  3353
                ],
                "loc": {
                  "start": {
                    "line": 70,
                    "column": 27
                  },
                  "end": {
                    "line": 75,
                    "column": 5
                  }
                }
              },
              "alternate": {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "last",
                      "range": [
                        3374,
                        3378
                      ],
                      "loc": {
                        "start": {
                          "line": 76,
                          "column": 20
                        },
                        "end": {
                          "line": 76,
                          "column": 24
                        }
                      }
                    },
                    "prefix": true,
                    "range": [
                      3367,
                      3378
                    ],
                    "loc": {
                      "start": {
                        "line": 76,
                        "column": 13
                      },
                      "end": {
                        "line": 76,
                        "column": 24
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": "number",
                    "raw": "'number'",
                    "range": [
                      3383,
                      3391
                    ],
                    "loc": {
                      "start": {
                        "line": 76,
                        "column": 29
                      },
                      "end": {
                        "line": 76,
                        "column": 37
                      }
                    }
                  },
                  "range": [
                    3367,
                    3391
                  ],
                  "loc": {
                    "start": {
                      "line": 76,
                      "column": 13
                    },
                    "end": {
                      "line": 76,
                      "column": 37
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "concurrent",
                          "range": [
                            3403,
                            3413
                          ],
                          "loc": {
                            "start": {
                              "line": 77,
                              "column": 8
                            },
                            "end": {
                              "line": 77,
                              "column": 18
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "observables",
                              "range": [
                                3416,
                                3427
                              ],
                              "loc": {
                                "start": {
                                  "line": 77,
                                  "column": 21
                                },
                                "end": {
                                  "line": 77,
                                  "column": 32
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "pop",
                              "range": [
                                3428,
                                3431
                              ],
                              "loc": {
                                "start": {
                                  "line": 77,
                                  "column": 33
                                },
                                "end": {
                                  "line": 77,
                                  "column": 36
                                }
                              }
                            },
                            "range": [
                              3416,
                              3431
                            ],
                            "loc": {
                              "start": {
                                "line": 77,
                                "column": 21
                              },
                              "end": {
                                "line": 77,
                                "column": 36
                              }
                            }
                          },
                          "arguments": [],
                          "range": [
                            3416,
                            3433
                          ],
                          "loc": {
                            "start": {
                              "line": 77,
                              "column": 21
                            },
                            "end": {
                              "line": 77,
                              "column": 38
                            }
                          }
                        },
                        "range": [
                          3403,
                          3433
                        ],
                        "loc": {
                          "start": {
                            "line": 77,
                            "column": 8
                          },
                          "end": {
                            "line": 77,
                            "column": 38
                          }
                        }
                      },
                      "range": [
                        3403,
                        3434
                      ],
                      "loc": {
                        "start": {
                          "line": 77,
                          "column": 8
                        },
                        "end": {
                          "line": 77,
                          "column": 39
                        }
                      }
                    }
                  ],
                  "range": [
                    3393,
                    3440
                  ],
                  "loc": {
                    "start": {
                      "line": 76,
                      "column": 39
                    },
                    "end": {
                      "line": 78,
                      "column": 5
                    }
                  }
                },
                "alternate": null,
                "range": [
                  3363,
                  3440
                ],
                "loc": {
                  "start": {
                    "line": 76,
                    "column": 9
                  },
                  "end": {
                    "line": 78,
                    "column": 5
                  }
                }
              },
              "range": [
                3133,
                3440
              ],
              "loc": {
                "start": {
                  "line": 70,
                  "column": 4
                },
                "end": {
                  "line": 78,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "scheduler",
                      "range": [
                        3449,
                        3458
                      ],
                      "loc": {
                        "start": {
                          "line": 79,
                          "column": 8
                        },
                        "end": {
                          "line": 79,
                          "column": 17
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null",
                      "range": [
                        3463,
                        3467
                      ],
                      "loc": {
                        "start": {
                          "line": 79,
                          "column": 22
                        },
                        "end": {
                          "line": 79,
                          "column": 26
                        }
                      }
                    },
                    "range": [
                      3449,
                      3467
                    ],
                    "loc": {
                      "start": {
                        "line": 79,
                        "column": 8
                      },
                      "end": {
                        "line": 79,
                        "column": 26
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          3471,
                          3482
                        ],
                        "loc": {
                          "start": {
                            "line": 79,
                            "column": 30
                          },
                          "end": {
                            "line": 79,
                            "column": 41
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length",
                        "range": [
                          3483,
                          3489
                        ],
                        "loc": {
                          "start": {
                            "line": 79,
                            "column": 42
                          },
                          "end": {
                            "line": 79,
                            "column": 48
                          }
                        }
                      },
                      "range": [
                        3471,
                        3489
                      ],
                      "loc": {
                        "start": {
                          "line": 79,
                          "column": 30
                        },
                        "end": {
                          "line": 79,
                          "column": 48
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1",
                      "range": [
                        3494,
                        3495
                      ],
                      "loc": {
                        "start": {
                          "line": 79,
                          "column": 53
                        },
                        "end": {
                          "line": 79,
                          "column": 54
                        }
                      }
                    },
                    "range": [
                      3471,
                      3495
                    ],
                    "loc": {
                      "start": {
                        "line": 79,
                        "column": 30
                      },
                      "end": {
                        "line": 79,
                        "column": 54
                      }
                    }
                  },
                  "range": [
                    3449,
                    3495
                  ],
                  "loc": {
                    "start": {
                      "line": 79,
                      "column": 8
                    },
                    "end": {
                      "line": 79,
                      "column": 54
                    }
                  }
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "instanceof",
                  "left": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        3499,
                        3510
                      ],
                      "loc": {
                        "start": {
                          "line": 79,
                          "column": 58
                        },
                        "end": {
                          "line": 79,
                          "column": 69
                        }
                      }
                    },
                    "property": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0",
                      "range": [
                        3511,
                        3512
                      ],
                      "loc": {
                        "start": {
                          "line": 79,
                          "column": 70
                        },
                        "end": {
                          "line": 79,
                          "column": 71
                        }
                      }
                    },
                    "range": [
                      3499,
                      3513
                    ],
                    "loc": {
                      "start": {
                        "line": 79,
                        "column": 58
                      },
                      "end": {
                        "line": 79,
                        "column": 72
                      }
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "Observable",
                    "range": [
                      3525,
                      3535
                    ],
                    "loc": {
                      "start": {
                        "line": 79,
                        "column": 84
                      },
                      "end": {
                        "line": 79,
                        "column": 94
                      }
                    }
                  },
                  "range": [
                    3499,
                    3535
                  ],
                  "loc": {
                    "start": {
                      "line": 79,
                      "column": 58
                    },
                    "end": {
                      "line": 79,
                      "column": 94
                    }
                  }
                },
                "range": [
                  3449,
                  3535
                ],
                "loc": {
                  "start": {
                    "line": 79,
                    "column": 8
                  },
                  "end": {
                    "line": 79,
                    "column": 94
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          3554,
                          3565
                        ],
                        "loc": {
                          "start": {
                            "line": 80,
                            "column": 15
                          },
                          "end": {
                            "line": 80,
                            "column": 26
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          3566,
                          3567
                        ],
                        "loc": {
                          "start": {
                            "line": 80,
                            "column": 27
                          },
                          "end": {
                            "line": 80,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        3554,
                        3568
                      ],
                      "loc": {
                        "start": {
                          "line": 80,
                          "column": 15
                        },
                        "end": {
                          "line": 80,
                          "column": 29
                        }
                      }
                    },
                    "range": [
                      3547,
                      3569
                    ],
                    "loc": {
                      "start": {
                        "line": 80,
                        "column": 8
                      },
                      "end": {
                        "line": 80,
                        "column": 30
                      }
                    }
                  }
                ],
                "range": [
                  3537,
                  3575
                ],
                "loc": {
                  "start": {
                    "line": 79,
                    "column": 96
                  },
                  "end": {
                    "line": 81,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                3445,
                3575
              ],
              "loc": {
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "mergeAll",
                    "range": [
                      3587,
                      3595
                    ],
                    "loc": {
                      "start": {
                        "line": 82,
                        "column": 11
                      },
                      "end": {
                        "line": 82,
                        "column": 19
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "concurrent",
                      "range": [
                        3596,
                        3606
                      ],
                      "loc": {
                        "start": {
                          "line": 82,
                          "column": 20
                        },
                        "end": {
                          "line": 82,
                          "column": 30
                        }
                      }
                    }
                  ],
                  "range": [
                    3587,
                    3607
                  ],
                  "loc": {
                    "start": {
                      "line": 82,
                      "column": 11
                    },
                    "end": {
                      "line": 82,
                      "column": 31
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        3612,
                        3627
                      ],
                      "loc": {
                        "start": {
                          "line": 82,
                          "column": 36
                        },
                        "end": {
                          "line": 82,
                          "column": 51
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          3628,
                          3639
                        ],
                        "loc": {
                          "start": {
                            "line": 82,
                            "column": 52
                          },
                          "end": {
                            "line": 82,
                            "column": 63
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          3641,
                          3650
                        ],
                        "loc": {
                          "start": {
                            "line": 82,
                            "column": 65
                          },
                          "end": {
                            "line": 82,
                            "column": 74
                          }
                        }
                      }
                    ],
                    "range": [
                      3608,
                      3651
                    ],
                    "loc": {
                      "start": {
                        "line": 82,
                        "column": 32
                      },
                      "end": {
                        "line": 82,
                        "column": 75
                      }
                    }
                  }
                ],
                "range": [
                  3587,
                  3652
                ],
                "loc": {
                  "start": {
                    "line": 82,
                    "column": 11
                  },
                  "end": {
                    "line": 82,
                    "column": 76
                  }
                }
              },
              "range": [
                3580,
                3653
              ],
              "loc": {
                "start": {
                  "line": 82,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 77
                }
              }
            }
          ],
          "range": [
            3002,
            3655
          ],
          "loc": {
            "start": {
              "line": 66,
              "column": 38
            },
            "end": {
              "line": 83,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2971,
          3655
        ],
        "loc": {
          "start": {
            "line": 66,
            "column": 7
          },
          "end": {
            "line": 83,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              198,
              233
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
            "range": [
              234,
              2963
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 65,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=merge.js.map",
            "range": [
              3656,
              3689
            ],
            "loc": {
              "start": {
                "line": 84,
                "column": 0
              },
              "end": {
                "line": 84,
                "column": 33
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2964,
        3655
      ],
      "loc": {
        "start": {
          "line": 66,
          "column": 0
        },
        "end": {
          "line": 83,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            198,
            233
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
          "range": [
            234,
            2963
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 65,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=merge.js.map",
          "range": [
            3656,
            3689
          ],
          "loc": {
            "start": {
              "line": 84,
              "column": 0
            },
            "end": {
              "line": 84,
              "column": 33
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    3655
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 83,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        198,
        233
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n ",
      "range": [
        234,
        2963
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 65,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=merge.js.map",
      "range": [
        3656,
        3689
      ],
      "loc": {
        "start": {
          "line": 84,
          "column": 0
        },
        "end": {
          "line": 84,
          "column": 33
        }
      }
    }
  ]
}