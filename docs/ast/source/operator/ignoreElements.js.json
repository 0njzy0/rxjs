{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              27,
              38
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 27
              },
              "end": {
                "line": 1,
                "column": 38
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ignoreElements",
            "range": [
              9,
              23
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 23
              }
            }
          },
          "range": [
            9,
            38
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 38
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/ignoreElements",
        "raw": "'../operators/ignoreElements'",
        "range": [
          46,
          75
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 46
          },
          "end": {
            "line": 1,
            "column": 75
          }
        }
      },
      "range": [
        0,
        76
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 76
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n ",
          "range": [
            77,
            433
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "ignoreElements",
          "range": [
            450,
            464
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 16
            },
            "end": {
              "line": 12,
              "column": 30
            }
          }
        },
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      480,
                      491
                    ],
                    "loc": {
                      "start": {
                        "line": 13,
                        "column": 11
                      },
                      "end": {
                        "line": 13,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [],
                  "range": [
                    480,
                    493
                  ],
                  "loc": {
                    "start": {
                      "line": 13,
                      "column": 11
                    },
                    "end": {
                      "line": 13,
                      "column": 24
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      494,
                      498
                    ],
                    "loc": {
                      "start": {
                        "line": 13,
                        "column": 25
                      },
                      "end": {
                        "line": 13,
                        "column": 29
                      }
                    }
                  }
                ],
                "range": [
                  480,
                  499
                ],
                "loc": {
                  "start": {
                    "line": 13,
                    "column": 11
                  },
                  "end": {
                    "line": 13,
                    "column": 30
                  }
                }
              },
              "range": [
                473,
                500
              ],
              "loc": {
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 13,
                  "column": 31
                }
              }
            }
          ],
          "range": [
            467,
            502
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 33
            },
            "end": {
              "line": 14,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          441,
          502
        ],
        "loc": {
          "start": {
            "line": 12,
            "column": 7
          },
          "end": {
            "line": 14,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n ",
            "range": [
              77,
              433
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 11,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        434,
        502
      ],
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n ",
          "range": [
            77,
            433
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "EmptyStatement",
      "range": [
        503,
        504
      ],
      "loc": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=ignoreElements.js.map",
          "range": [
            505,
            547
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 42
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    504
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 15,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n ",
      "range": [
        77,
        433
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 11,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=ignoreElements.js.map",
      "range": [
        505,
        547
      ],
      "loc": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 42
        }
      }
    }
  ]
}