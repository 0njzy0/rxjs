{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              18,
              29
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 18
              },
              "end": {
                "line": 1,
                "column": 29
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "mapTo",
            "range": [
              9,
              14
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 14
              }
            }
          },
          "range": [
            9,
            29
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 29
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/mapTo",
        "raw": "'../operators/mapTo'",
        "range": [
          37,
          57
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 37
          },
          "end": {
            "line": 1,
            "column": 57
          }
        }
      },
      "range": [
        0,
        58
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 58
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n ",
          "range": [
            59,
            1042
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "mapTo",
          "range": [
            1059,
            1064
          ],
          "loc": {
            "start": {
              "line": 28,
              "column": 16
            },
            "end": {
              "line": 28,
              "column": 21
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              1065,
              1070
            ],
            "loc": {
              "start": {
                "line": 28,
                "column": 22
              },
              "end": {
                "line": 28,
                "column": 27
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      1085,
                      1096
                    ],
                    "loc": {
                      "start": {
                        "line": 29,
                        "column": 11
                      },
                      "end": {
                        "line": 29,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value",
                      "range": [
                        1097,
                        1102
                      ],
                      "loc": {
                        "start": {
                          "line": 29,
                          "column": 23
                        },
                        "end": {
                          "line": 29,
                          "column": 28
                        }
                      }
                    }
                  ],
                  "range": [
                    1085,
                    1103
                  ],
                  "loc": {
                    "start": {
                      "line": 29,
                      "column": 11
                    },
                    "end": {
                      "line": 29,
                      "column": 29
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      1104,
                      1108
                    ],
                    "loc": {
                      "start": {
                        "line": 29,
                        "column": 30
                      },
                      "end": {
                        "line": 29,
                        "column": 34
                      }
                    }
                  }
                ],
                "range": [
                  1085,
                  1109
                ],
                "loc": {
                  "start": {
                    "line": 29,
                    "column": 11
                  },
                  "end": {
                    "line": 29,
                    "column": 35
                  }
                }
              },
              "range": [
                1078,
                1110
              ],
              "loc": {
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 36
                }
              }
            }
          ],
          "range": [
            1072,
            1112
          ],
          "loc": {
            "start": {
              "line": 28,
              "column": 29
            },
            "end": {
              "line": 30,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1050,
          1112
        ],
        "loc": {
          "start": {
            "line": 28,
            "column": 7
          },
          "end": {
            "line": 30,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n ",
            "range": [
              59,
              1042
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 27,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=mapTo.js.map",
            "range": [
              1113,
              1146
            ],
            "loc": {
              "start": {
                "line": 31,
                "column": 0
              },
              "end": {
                "line": 31,
                "column": 33
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1043,
        1112
      ],
      "loc": {
        "start": {
          "line": 28,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n ",
          "range": [
            59,
            1042
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=mapTo.js.map",
          "range": [
            1113,
            1146
          ],
          "loc": {
            "start": {
              "line": 31,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 33
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1112
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 30,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n ",
      "range": [
        59,
        1042
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 27,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=mapTo.js.map",
      "range": [
        1113,
        1146
      ],
      "loc": {
        "start": {
          "line": 31,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 33
        }
      }
    }
  ]
}