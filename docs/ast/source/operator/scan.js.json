{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrderScan",
            "range": [
              17,
              32
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 17
              },
              "end": {
                "line": 1,
                "column": 32
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "scan",
            "range": [
              9,
              13
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 13
              }
            }
          },
          "range": [
            9,
            32
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 32
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/scan",
        "raw": "'../operators/scan'",
        "range": [
          40,
          59
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 40
          },
          "end": {
            "line": 1,
            "column": 59
          }
        }
      },
      "range": [
        0,
        60
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 60
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            61,
            96
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n ",
          "range": [
            97,
            1619
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "scan",
          "range": [
            1636,
            1640
          ],
          "loc": {
            "start": {
              "line": 40,
              "column": 16
            },
            "end": {
              "line": 40,
              "column": 20
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "accumulator",
            "range": [
              1641,
              1652
            ],
            "loc": {
              "start": {
                "line": 40,
                "column": 21
              },
              "end": {
                "line": 40,
                "column": 32
              }
            }
          },
          {
            "type": "Identifier",
            "name": "seed",
            "range": [
              1654,
              1658
            ],
            "loc": {
              "start": {
                "line": 40,
                "column": 34
              },
              "end": {
                "line": 40,
                "column": 38
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": ">=",
                "left": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "arguments",
                    "range": [
                      1670,
                      1679
                    ],
                    "loc": {
                      "start": {
                        "line": 41,
                        "column": 8
                      },
                      "end": {
                        "line": 41,
                        "column": 17
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "length",
                    "range": [
                      1680,
                      1686
                    ],
                    "loc": {
                      "start": {
                        "line": 41,
                        "column": 18
                      },
                      "end": {
                        "line": 41,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    1670,
                    1686
                  ],
                  "loc": {
                    "start": {
                      "line": 41,
                      "column": 8
                    },
                    "end": {
                      "line": 41,
                      "column": 24
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": 2,
                  "raw": "2",
                  "range": [
                    1690,
                    1691
                  ],
                  "loc": {
                    "start": {
                      "line": 41,
                      "column": 28
                    },
                    "end": {
                      "line": 41,
                      "column": 29
                    }
                  }
                },
                "range": [
                  1670,
                  1691
                ],
                "loc": {
                  "start": {
                    "line": 41,
                    "column": 8
                  },
                  "end": {
                    "line": 41,
                    "column": 29
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "higherOrderScan",
                          "range": [
                            1710,
                            1725
                          ],
                          "loc": {
                            "start": {
                              "line": 42,
                              "column": 15
                            },
                            "end": {
                              "line": 42,
                              "column": 30
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "accumulator",
                            "range": [
                              1726,
                              1737
                            ],
                            "loc": {
                              "start": {
                                "line": 42,
                                "column": 31
                              },
                              "end": {
                                "line": 42,
                                "column": 42
                              }
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "seed",
                            "range": [
                              1739,
                              1743
                            ],
                            "loc": {
                              "start": {
                                "line": 42,
                                "column": 44
                              },
                              "end": {
                                "line": 42,
                                "column": 48
                              }
                            }
                          }
                        ],
                        "range": [
                          1710,
                          1744
                        ],
                        "loc": {
                          "start": {
                            "line": 42,
                            "column": 15
                          },
                          "end": {
                            "line": 42,
                            "column": 49
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "ThisExpression",
                          "range": [
                            1745,
                            1749
                          ],
                          "loc": {
                            "start": {
                              "line": 42,
                              "column": 50
                            },
                            "end": {
                              "line": 42,
                              "column": 54
                            }
                          }
                        }
                      ],
                      "range": [
                        1710,
                        1750
                      ],
                      "loc": {
                        "start": {
                          "line": 42,
                          "column": 15
                        },
                        "end": {
                          "line": 42,
                          "column": 55
                        }
                      }
                    },
                    "range": [
                      1703,
                      1751
                    ],
                    "loc": {
                      "start": {
                        "line": 42,
                        "column": 8
                      },
                      "end": {
                        "line": 42,
                        "column": 56
                      }
                    }
                  }
                ],
                "range": [
                  1693,
                  1757
                ],
                "loc": {
                  "start": {
                    "line": 41,
                    "column": 31
                  },
                  "end": {
                    "line": 43,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                1666,
                1757
              ],
              "loc": {
                "start": {
                  "line": 41,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrderScan",
                    "range": [
                      1769,
                      1784
                    ],
                    "loc": {
                      "start": {
                        "line": 44,
                        "column": 11
                      },
                      "end": {
                        "line": 44,
                        "column": 26
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "accumulator",
                      "range": [
                        1785,
                        1796
                      ],
                      "loc": {
                        "start": {
                          "line": 44,
                          "column": 27
                        },
                        "end": {
                          "line": 44,
                          "column": 38
                        }
                      }
                    }
                  ],
                  "range": [
                    1769,
                    1797
                  ],
                  "loc": {
                    "start": {
                      "line": 44,
                      "column": 11
                    },
                    "end": {
                      "line": 44,
                      "column": 39
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      1798,
                      1802
                    ],
                    "loc": {
                      "start": {
                        "line": 44,
                        "column": 40
                      },
                      "end": {
                        "line": 44,
                        "column": 44
                      }
                    }
                  }
                ],
                "range": [
                  1769,
                  1803
                ],
                "loc": {
                  "start": {
                    "line": 44,
                    "column": 11
                  },
                  "end": {
                    "line": 44,
                    "column": 45
                  }
                }
              },
              "range": [
                1762,
                1804
              ],
              "loc": {
                "start": {
                  "line": 44,
                  "column": 4
                },
                "end": {
                  "line": 44,
                  "column": 46
                }
              }
            }
          ],
          "range": [
            1660,
            1806
          ],
          "loc": {
            "start": {
              "line": 40,
              "column": 40
            },
            "end": {
              "line": 45,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1627,
          1806
        ],
        "loc": {
          "start": {
            "line": 40,
            "column": 7
          },
          "end": {
            "line": 45,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              61,
              96
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n ",
            "range": [
              97,
              1619
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 39,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=scan.js.map",
            "range": [
              1807,
              1839
            ],
            "loc": {
              "start": {
                "line": 46,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 32
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1620,
        1806
      ],
      "loc": {
        "start": {
          "line": 40,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            61,
            96
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n ",
          "range": [
            97,
            1619
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=scan.js.map",
          "range": [
            1807,
            1839
          ],
          "loc": {
            "start": {
              "line": 46,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 32
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1806
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 45,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        61,
        96
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n ",
      "range": [
        97,
        1619
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=scan.js.map",
      "range": [
        1807,
        1839
      ],
      "loc": {
        "start": {
          "line": 46,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 32
        }
      }
    }
  ]
}