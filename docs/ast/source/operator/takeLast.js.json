{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrderTakeLast",
            "range": [
              21,
              40
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 21
              },
              "end": {
                "line": 1,
                "column": 40
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "takeLast",
            "range": [
              9,
              17
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 17
              }
            }
          },
          "range": [
            9,
            40
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 40
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/takeLast",
        "raw": "'../operators/takeLast'",
        "range": [
          48,
          71
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 48
          },
          "end": {
            "line": 1,
            "column": 71
          }
        }
      },
      "range": [
        0,
        72
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 72
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n ",
          "range": [
            73,
            1651
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "takeLast",
          "range": [
            1668,
            1676
          ],
          "loc": {
            "start": {
              "line": 38,
              "column": 16
            },
            "end": {
              "line": 38,
              "column": 24
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "count",
            "range": [
              1677,
              1682
            ],
            "loc": {
              "start": {
                "line": 38,
                "column": 25
              },
              "end": {
                "line": 38,
                "column": 30
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrderTakeLast",
                    "range": [
                      1697,
                      1716
                    ],
                    "loc": {
                      "start": {
                        "line": 39,
                        "column": 11
                      },
                      "end": {
                        "line": 39,
                        "column": 30
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "count",
                      "range": [
                        1717,
                        1722
                      ],
                      "loc": {
                        "start": {
                          "line": 39,
                          "column": 31
                        },
                        "end": {
                          "line": 39,
                          "column": 36
                        }
                      }
                    }
                  ],
                  "range": [
                    1697,
                    1723
                  ],
                  "loc": {
                    "start": {
                      "line": 39,
                      "column": 11
                    },
                    "end": {
                      "line": 39,
                      "column": 37
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      1724,
                      1728
                    ],
                    "loc": {
                      "start": {
                        "line": 39,
                        "column": 38
                      },
                      "end": {
                        "line": 39,
                        "column": 42
                      }
                    }
                  }
                ],
                "range": [
                  1697,
                  1729
                ],
                "loc": {
                  "start": {
                    "line": 39,
                    "column": 11
                  },
                  "end": {
                    "line": 39,
                    "column": 43
                  }
                }
              },
              "range": [
                1690,
                1730
              ],
              "loc": {
                "start": {
                  "line": 39,
                  "column": 4
                },
                "end": {
                  "line": 39,
                  "column": 44
                }
              }
            }
          ],
          "range": [
            1684,
            1732
          ],
          "loc": {
            "start": {
              "line": 38,
              "column": 32
            },
            "end": {
              "line": 40,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1659,
          1732
        ],
        "loc": {
          "start": {
            "line": 38,
            "column": 7
          },
          "end": {
            "line": 40,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n ",
            "range": [
              73,
              1651
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 37,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=takeLast.js.map",
            "range": [
              1733,
              1769
            ],
            "loc": {
              "start": {
                "line": 41,
                "column": 0
              },
              "end": {
                "line": 41,
                "column": 36
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1652,
        1732
      ],
      "loc": {
        "start": {
          "line": 38,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n ",
          "range": [
            73,
            1651
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=takeLast.js.map",
          "range": [
            1733,
            1769
          ],
          "loc": {
            "start": {
              "line": 41,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 36
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1732
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 40,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n ",
      "range": [
        73,
        1651
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 37,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=takeLast.js.map",
      "range": [
        1733,
        1769
      ],
      "loc": {
        "start": {
          "line": 41,
          "column": 0
        },
        "end": {
          "line": 41,
          "column": 36
        }
      }
    }
  ]
}