{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              22,
              33
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 22
              },
              "end": {
                "line": 1,
                "column": 33
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "startWith",
            "range": [
              9,
              18
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 18
              }
            }
          },
          "range": [
            9,
            33
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 33
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators/startWith",
        "raw": "'../operators/startWith'",
        "range": [
          41,
          65
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 41
          },
          "end": {
            "line": 1,
            "column": 65
          }
        }
      },
      "range": [
        0,
        66
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 66
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            67,
            102
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n ",
          "range": [
            103,
            697
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "startWith",
          "range": [
            714,
            723
          ],
          "loc": {
            "start": {
              "line": 17,
              "column": 16
            },
            "end": {
              "line": 17,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "array",
              "range": [
                727,
                732
              ],
              "loc": {
                "start": {
                  "line": 17,
                  "column": 29
                },
                "end": {
                  "line": 17,
                  "column": 34
                }
              }
            },
            "range": [
              724,
              732
            ],
            "loc": {
              "start": {
                "line": 17,
                "column": 26
              },
              "end": {
                "line": 17,
                "column": 34
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      747,
                      758
                    ],
                    "loc": {
                      "start": {
                        "line": 18,
                        "column": 11
                      },
                      "end": {
                        "line": 18,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "SpreadElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "array",
                        "range": [
                          762,
                          767
                        ],
                        "loc": {
                          "start": {
                            "line": 18,
                            "column": 26
                          },
                          "end": {
                            "line": 18,
                            "column": 31
                          }
                        }
                      },
                      "range": [
                        759,
                        767
                      ],
                      "loc": {
                        "start": {
                          "line": 18,
                          "column": 23
                        },
                        "end": {
                          "line": 18,
                          "column": 31
                        }
                      }
                    }
                  ],
                  "range": [
                    747,
                    768
                  ],
                  "loc": {
                    "start": {
                      "line": 18,
                      "column": 11
                    },
                    "end": {
                      "line": 18,
                      "column": 32
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      769,
                      773
                    ],
                    "loc": {
                      "start": {
                        "line": 18,
                        "column": 33
                      },
                      "end": {
                        "line": 18,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  747,
                  774
                ],
                "loc": {
                  "start": {
                    "line": 18,
                    "column": 11
                  },
                  "end": {
                    "line": 18,
                    "column": 38
                  }
                }
              },
              "range": [
                740,
                775
              ],
              "loc": {
                "start": {
                  "line": 18,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 39
                }
              }
            }
          ],
          "range": [
            734,
            777
          ],
          "loc": {
            "start": {
              "line": 17,
              "column": 36
            },
            "end": {
              "line": 19,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          705,
          777
        ],
        "loc": {
          "start": {
            "line": 17,
            "column": 7
          },
          "end": {
            "line": 19,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              67,
              102
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n ",
            "range": [
              103,
              697
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 16,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=startWith.js.map",
            "range": [
              778,
              815
            ],
            "loc": {
              "start": {
                "line": 20,
                "column": 0
              },
              "end": {
                "line": 20,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        698,
        777
      ],
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            67,
            102
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n ",
          "range": [
            103,
            697
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=startWith.js.map",
          "range": [
            778,
            815
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    777
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 19,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        67,
        102
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n ",
      "range": [
        103,
        697
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=startWith.js.map",
      "range": [
        778,
        815
      ],
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 37
        }
      }
    }
  ]
}